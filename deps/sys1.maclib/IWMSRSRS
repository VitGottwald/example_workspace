*%IWMSRSRS: MACRO KEYS(SYSINFO_BLOCK,EXTENDED_DATA,ANSLEN,ENTRY_COUNT,  00000100
*                 QUERYLEN,LOCATION,FUNCTION,METHOD,COST_ZAAP_ON_CP,    00000200
*                 COST_ZIIP_ON_CP,IL_WEIGHTING,RETCODE,RSNCODE,         00000300
*                 PLISTVER,MF);                                         00000400
*/**** START OF SPECIFICATIONS **************************************** 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* MACRO NAME:  IWMSRSRS                              -22/03/14-<2> * 00000800
*                                                                     * 00000900
*                                                                     * 00001000
*01* DESCRIPTIVE NAME:  Sysplex Routing Information                   * 00001100
*                                                                     * 00001200
*01* PROPRIETARY STATEMENT:                                           * 00001300
*                                                                     * 00001400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001500
*     5650-ZOS COPYRIGHT IBM CORP. 1997, 2021                         * 00001600
*                                                                     * 00001700
* STATUS= HBB77D0                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*01* FUNCTION:                                                        * 00002200
*                                                                     * 00002300
*      IWMSRSRS provides four functions: SELECT, QUERY, SPECIFIC and  * 00002400
*      SPECIFICIMP.  All return a list of registered servers known to * 00002500
*      the system on which the service is invoked.  Servers which     * 00002600
*      have deregistered, via IWMSRDRS, may still be present in the   * 00002700
*      output list, due to the asynchronous nature of deregistration. * 00002800
*      Conversely, some registered servers may not appear for this    * 00002900
*      same reason.                                                   * 00003000
*                                                                     * 00003100
*      When either the SELECT, SPECIFIC or SPECIFICIMP function is    * 00003200
*      chosen, IWMSRSRS will return a list of servers in the sysplex  * 00003300
*      which are associated with the input Location name along with a * 00003400
*      relative weighting for each server.  These servers are         * 00003500
*      identified by their Network id and LU name, which were         * 00003600
*      previously registered using the Sysplex Router Register macro, * 00003700
*      IWMSRSRG.  Note that some servers may not appear in the output * 00003800
*      list due to balancing decisions, so this service should not be * 00003900
*      used as a general query service to find all currently          * 00004000
*      registered servers for the input location.                     * 00004100
*                                                                     * 00004200
*      Next to each server in the list will be a weight which tells   * 00004300
*      the caller the relative number of requests to send to each     * 00004400
*      entry.  For example, the caller might send the indicated       * 00004500
*      number of requests to each LU in the list before routing to    * 00004600
*      the next LU in the list.                                       * 00004700
*                                                                     * 00004800
*        Server            Weight    CPU Weight    zAAP Weight    zII * 00004900
*        P Weight                                                     * 00005000
*        ------            ------    ----------    -----------    --- * 00005100
*        --------                                                     * 00005200
*        NETIDA.LUNAME1       4           3              6            * 00005300
*           4                                                         * 00005400
*        NETIDB.LUNAME2       7           8              3            * 00005500
*           9                                                         * 00005600
*        NETIDC.LUNAME3       1           3              1            * 00005700
*           0                                                         * 00005800
*        NETIDD.LUNAME43      4           5              2            * 00005900
*           3                                                         * 00006000
*        NETID4.LUNAME2       2           1              2            * 00006100
*           2                                                         * 00006200
*                                                                     * 00006300
*      The requestor could then choose to send the first 4 requests   * 00006400
*      to NETIDA.LUNAME1, the next 7 requests to NETIDB.LUNAME2, the  * 00006500
*      next request to NETIDC.LUNAME3, and so forth.  When the list   * 00006600
*      is exhausted, the requestor could invoke this macro again and  * 00006700
*      get a whole new list or could rotate through the list again.   * 00006800
*      It is expected that the requestor would invoke this macro      * 00006900
*      frequently to get current system views for work balancing.     * 00007000
*      For example, it would be appropriate for the caller to invoke  * 00007100
*      this service approximately every 1 to 3 minutes, so that the   * 00007200
*      list will remain current with changing system conditions and   * 00007300
*      server availability.                                           * 00007400
*                                                                     * 00007500
*      Four output weights are available: the weight, the CPU weight, * 00007600
*      the zAAP weight and the zIIP weight. The CPU weight is taking  * 00007700
*      only CPU data into account. The zAAP and the zIIP weights are  * 00007800
*      computed when taking only zAAP, respectively zIIP, data into   * 00007900
*      account.  The weight is a combination of these three processor * 00008000
*      weights.                                                       * 00008100
*                                                                     * 00008200
*      An optional input keyword METHOD selects how the weight (also  * 00008300
*      referred to as "mixed" weight) is computed.  The default is    * 00008400
*      METHOD=PROPORTIONAL, which calculates the weight as a          * 00008500
*      combination of these 3 processor weights (CPU, zAAP and zIIP). * 00008600
*      With METHOD=EQUICPU, WLM computes the weight by trying to      * 00008700
*      simulate a 100% usage of the system capacity, and determining  * 00008800
*      the capacity of a CPU-only system having equivalent resource   * 00008900
*      consumption.                                                   * 00009000
*                                                                     * 00009100
*      Both methods can be specified with keyword IL_WEIGHTING, and   * 00009200
*      EQUICPU by COST_ZAAP_ON_CP and COST_ZIIP_ON_CP too.            * 00009300
*                                                                     * 00009400
*      When the QUERY function is requested, IWMSRSRS will return the * 00009500
*      list of all servers in the sysplex which are associated with   * 00009600
*      the input Location name along with a fixed weight of one for   * 00009700
*      each server.  The format of the output is the same as for      * 00009800
*      SELECT.                                                        * 00009900
*                                                                     * 00010000
*      When using the QUERY function, the CPU, zAAP and zIIP weights  * 00010100
*      are always set to 0.                                           * 00010200
*                                                                     * 00010300
*      When using the SELECT, the SPECIFIC or the SPECIFICIMP         * 00010400
*      function, the mixed weight is a combination of the CPU, zAAP   * 00010500
*      and zIIP weights with the relative use of the CPU, zAAP and    * 00010600
*      zIIP by the server. Moreover, the mixed weights are scaled up, * 00010700
*      so that their sum is 64. Due to rounding errors, the sum of    * 00010800
*      the mixed weights is usually as low as 64-(number of servers). * 00010900
*                                                                     * 00011000
*      In contrast to the weights in the SELECT function, the weights * 00011100
*      in the SPECIFIC or SPECIFICIMP function do not only consider   * 00011200
*      available capacity values and the number of servers on the     * 00011300
*      same system.                                                   * 00011400
*                                                                     * 00011500
*      With the SPECIFIC function the following three additional      * 00011600
*      factors are taken into account:                                * 00011700
*                                                                     * 00011800
*      - The performance index that indicates the achievement of the  * 00011900
*      WLM defined goals of the server, that is its related work.  A  * 00012000
*      server that achieves its goal is preferred over one that does  * 00012100
*      not achieve its goal.                                          * 00012200
*                                                                     * 00012300
*      - If the server owns independent enclaves those also take the  * 00012400
*      delays into account that the work is subject to, due to the    * 00012500
*      queue times of the owned enclaves.  A server with less average * 00012600
*      queue times for its enclaves is preferred over one with higher * 00012700
*      queue times.                                                   * 00012800
*                                                                     * 00012900
*      - The health factor of this server. It is dependent on the     * 00013000
*      health indicator which was reported to WLM for this server by  * 00013100
*      the IWM4HLTH service or by IWMSRSRG. If no health indicator    * 00013200
*      was reported, this factor is also neutral.                     * 00013300
*                                                                     * 00013400
*      The SPECIFICIMP function applies all factors of the SPECIFIC   * 00013500
*      function but also considers how much other work with lower     * 00013600
*      importance can be displaced.                                   * 00013700
*                                                                     * 00013800
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00013900
*                                                                     * 00014000
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00014100
*                                                                     * 00014200
*01* ENVIRONMENT:                                                     * 00014300
*                                                                     * 00014400
*                                                                     * 00014500
*      Minimum authorization: Problem state with any PSW key.         * 00014600
*                                                                     * 00014700
*      Dispatchable unit mode: Task mode.                             * 00014800
*                                                                     * 00014900
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00015000
*                                                                     * 00015100
*      AMODE:            31-bit.                                      * 00015200
*                                                                     * 00015300
*      ASC mode:         Primary.                                     * 00015400
*                                                                     * 00015500
*      Interrupt status: Enabled for I/O and external interrupts.     * 00015600
*                                                                     * 00015700
*      Locks:            No locks held.  FRRs may be established.     * 00015800
*                                                                     * 00015900
*      Control parameters: Control parameters must be in the primary  * 00016000
*                        address space.                               * 00016100
*                                                                     * 00016200
*                                                                     * 00016300
*                                                                     * 00016400
*01* PROGRAMMING REQUIREMENTS:                                        * 00016500
*                                                                     * 00016600
*                                                                     * 00016700
*    1.  The macro CVT must be included to use this macro.            * 00016800
*                                                                     * 00016900
*    2.  The macro IWMYCON must be included to use this macro.        * 00017000
*                                                                     * 00017100
*    3.  The macro IWMPB must be in the library concatenation, since  * 00017200
*        it is included by IWMYCON.                                   * 00017300
*                                                                     * 00017400
*    4.  Note that the high order halfword of register 0, and the     * 00017500
*        reason code variable when specified, may be non-zero and     * 00017600
*        represents diagnostic data which is NOT part of the external * 00017700
*        interface.  The high order halfword should thus be excluded  * 00017800
*        from comparison with the reason code values described above. * 00017900
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00018000
*        be used for this purpose.                                    * 00018100
*                                                                     * 00018200
*    5.  All character data, unless otherwise specified, is assumed   * 00018300
*        to be left justified and padded with blanks on the right, as * 00018400
*        needed, to occupy the specified number of bytes.             * 00018500
*                                                                     * 00018600
*                                                                     * 00018700
*                                                                     * 00018800
*01* RESTRICTIONS:                                                    * 00018900
*                                                                     * 00019000
*                                                                     * 00019100
*    1.  This macro may not be used prior to the completion of WLM    * 00019200
*        address space initialization                                 * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*01* INPUT REGISTER INFORMATION:                                      * 00019700
*                                                                     * 00019800
*    Before issuing the IWMSRSRS macro, the caller does not have to   * 00019900
*    place any information into any register unless using it in       * 00020000
*    register notation for a particular parameter, or using it as a   * 00020100
*    base register.                                                   * 00020200
*                                                                     * 00020300
*01* OUTPUT REGISTER INFORMATION:                                     * 00020400
*                                                                     * 00020500
*    When control returns to the caller, the GPRs contain:            * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*    REGISTER  CONTENTS                                               * 00020900
*                                                                     * 00021000
*    0         Reason code if GR15 return code is non-zero            * 00021100
*                                                                     * 00021200
*    1         Used as work register by the system                    * 00021300
*                                                                     * 00021400
*    2-13      Unchanged                                              * 00021500
*                                                                     * 00021600
*    14        Used as work register by the system                    * 00021700
*                                                                     * 00021800
*    15        Return code                                            * 00021900
*                                                                     * 00022000
*                                                                     * 00022100
*                                                                     * 00022200
*    When control returns to the caller, the ARs contain:             * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*    REGISTER  CONTENTS                                               * 00022600
*                                                                     * 00022700
*    0-1       Used as work registers by the system                   * 00022800
*                                                                     * 00022900
*    2-13      Unchanged                                              * 00023000
*                                                                     * 00023100
*    14-15     Used as work registers by the system                   * 00023200
*                                                                     * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*    Some callers depend on register contents remaining the same      * 00023600
*    before and after issuing a service.  If the system changes the   * 00023700
*    contents of registers on which the caller depends, the caller    * 00023800
*    must save them before issuing the service, and restore them      * 00023900
*    after the system returns control.                                * 00024000
*                                                                     * 00024100
*01* PERFORMANCE IMPLICATIONS:                                        * 00024200
*                                                                     * 00024300
*    None                                                             * 00024400
*                                                                     * 00024500
*01* SYNTAX:                                                          * 00024600
*                                                                     * 00024700
*Ýxlabel¨  IWMSRSRS     SYSINFO_BLOCK                                 * 00024800
*                                     =xsysinfo_block                 * 00024900
*                    ÐÝ,EXTENDED_DATA=NO¨                             * 00025000
*                    ¿Ý,EXTENDED_DATA=YES¨                            * 00025100
*                      ,ANSLEN=xanslen                                * 00025200
*                     Ý,ENTRY_COUNT=xentry_count¨                     * 00025300
*                      ,QUERYLEN=xquerylen                            * 00025400
*                      ,LOCATION=xlocation                            * 00025500
*                    ÐÝ,FUNCTION=SELECT¨                              * 00025600
*                    ÔÝ,FUNCTION=QUERY¨                               * 00025700
*                    ÔÝ,FUNCTION=SPECIFIC¨                            * 00025800
*                    ¿Ý,FUNCTION=SPECIFICIMP¨                         * 00025900
*                     Ý,METHOD=»PROPORTIONAL!EQUICPUº¨                * 00026000
*                     Ý,COST_ZAAP_ON_CP=»xcost_zaap_on_cp!1º¨         * 00026100
*                     Ý,COST_ZIIP_ON_CP=»xcost_ziip_on_cp!1º¨         * 00026200
*                     Ý,IL_WEIGHTING=»xil_weighting!0º¨               * 00026300
*                     Ý,RETCODE=xretcode¨                             * 00026400
*                     Ý,RSNCODE=xrsncode¨                             * 00026500
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00026600
*                    ÐÝ,MF=S¨                                         * 00026700
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00026800
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00026900
*                                                                     * 00027000
*                                                                     * 00027100
*      Where:                                                         * 00027200
*                                                                     * 00027300
*                                                                     * 00027400
*      Ýxlabel¨                                                       * 00027500
*          is an optional symbol, starting in column 1, that is the   * 00027600
*          name on the IWMSRSRS macro invocation.  The name must      * 00027700
*          conform to the rules for an ordinary assembler language    * 00027800
*          symbol.                                                    * 00027900
*          DEFAULT: No name.                                          * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*      SYSINFO_BLOCK(xsysinfo_block)                                  * 00028500
*          is a required input.  It is the name (RS-type) (or address * 00028600
*          in register (2)-(12) ASM only) of the area to be filled in * 00028700
*          with the system information for the registered, active,    * 00028800
*          LUs in the SYSPLEX associated with the input location.     * 00028900
*                                                                     * 00029000
*          The area must be large enough to contain at least 1 entry. * 00029100
*          The format of this area is mapped by IWMWSYSR.  The        * 00029200
*          EXTENDED_DATA keyword describes the desired format.  The   * 00029300
*          FUNCTION keyword describes which servers are candidates    * 00029400
*          for inclusion.                                             * 00029500
*                                                                     * 00029600
*                                                                     * 00029700
*                                                                     * 00029800
*                                                                     * 00029900
*      ÝEXTENDED_DATA(»NO!YESº)¨                                      * 00030000
*          is an optional keyword input which describes whether the   * 00030100
*          format of the output area named by SYSINFO_BLOCK includes  * 00030200
*          the extended section or not (see IWMWSYSR).                * 00030300
*          DEFAULT: NO                                                * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*          ÝEXTENDED_DATA(NO)¨                                        * 00030700
*                                                                     * 00030800
*              indicates that the format of the output area named by  * 00030900
*              SYSINFO_BLOCK includes only the standard information   * 00031000
*              mapped by the SYSR, which consists of an array of      * 00031100
*              entries described by SYSR_INFO.                        * 00031200
*                                                                     * 00031300
*          ÝEXTENDED_DATA(YES)¨                                       * 00031400
*                                                                     * 00031500
*              indicates that the format of the output area given by  * 00031600
*              SYSINFO_BLOCK includes first the standard information  * 00031700
*              mapped by the SYSR, which consists of an array of      * 00031800
*              entries described by SYSR_INFO, followed immediately   * 00031900
*              by the header for the extension section and any other  * 00032000
*              data described by the header.                          * 00032100
*                                                                     * 00032200
*              The EXTENDED_DATA includes the header and associated   * 00032300
*              userdata.  Data associated with entries on MVS images  * 00032400
*              not supporting a particular type of data will be set   * 00032500
*              as binary zeroes.  No special indication will be given * 00032600
*              for this condition.  In particular no special return   * 00032700
*              or reason codes are given.                             * 00032800
*                                                                     * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*                                                                     * 00033200
*                                                                     * 00033300
*                                                                     * 00033400
*      ANSLEN(xanslen)                                                * 00033500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00033600
*          only) of a required fullword input which contains the      * 00033700
*          length of the SYSINFO_BLOCK in bytes.                      * 00033800
*                                                                     * 00033900
*                                                                     * 00034000
*                                                                     * 00034100
*                                                                     * 00034200
*      ÝENTRY_COUNT(xentry_count)¨                                    * 00034300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00034400
*          only) of an optional fullword output which will hold the   * 00034500
*          number of server entries returned by the service.  This is * 00034600
*          the number of entries in the SYSR_INFO array (see          * 00034700
*          IWMWSYSR).                                                 * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*      QUERYLEN(xquerylen)                                            * 00035300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00035400
*          only) of a required fullword output variable which         * 00035500
*          contains the number of bytes needed for all data           * 00035600
*          requested, taking into account the format specified via    * 00035700
*          the EXTENDED_DATA keyword.                                 * 00035800
*                                                                     * 00035900
*                                                                     * 00036000
*                                                                     * 00036100
*                                                                     * 00036200
*      LOCATION(xlocation)                                            * 00036300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00036400
*          only) of a required 18 character input which contains the  * 00036500
*          LOCATION associated with the registered address spaces     * 00036600
*          which are candidates to receive work.                      * 00036700
*                                                                     * 00036800
*                                                                     * 00036900
*                                                                     * 00037000
*                                                                     * 00037100
*      ÝFUNCTION(»SELECT!QUERY!SPECIFIC!SPECIFICIMPº)¨                * 00037200
*          is an optional keyword input which describes which set of  * 00037300
*          servers are of interest to the caller.                     * 00037400
*          DEFAULT: SELECT                                            * 00037500
*                                                                     * 00037600
*                                                                     * 00037700
*          ÝFUNCTION(SELECT)¨                                         * 00037800
*                                                                     * 00037900
*              indicates that the servers best suited to receive work * 00038000
*              are to be returned.                                    * 00038100
*                                                                     * 00038200
*          ÝFUNCTION(QUERY)¨                                          * 00038300
*                                                                     * 00038400
*              indicates that all servers associated with the input   * 00038500
*              LOCATION are to be returned.                           * 00038600
*                                                                     * 00038700
*          ÝFUNCTION(SPECIFIC)¨                                       * 00038800
*                                                                     * 00038900
*              indicates that all servers in the sysplex which are    * 00039000
*              associated with the input Location name along with a   * 00039100
*              relative weighting for each server are returned.       * 00039200
*                                                                     * 00039300
*          ÝFUNCTION(SPECIFICIMP)¨                                    * 00039400
*                                                                     * 00039500
*              indicates the same function as SPECIFIC but also       * 00039600
*              considers how much other work with lower importance    * 00039700
*              can be displaced.                                      * 00039800
*                                                                     * 00039900
*                                                                     * 00040000
*                                                                     * 00040100
*                                                                     * 00040200
*                                                                     * 00040300
*                                                                     * 00040400
*      ÝMETHOD(»PROPORTIONAL!EQUICPUº)¨                               * 00040500
*          is an optional keyword input which selects the method for  * 00040600
*          computing the output weights.  The default is              * 00040700
*          METHOD=PROPORTIONAL.                                       * 00040800
*          DEFAULT: PROPORTIONAL                                      * 00040900
*                                                                     * 00041000
*                                                                     * 00041100
*          METHOD(PROPORTIONAL)                                       * 00041200
*              Calculates the output weights as a proportion of the 3 * 00041300
*              processor types weights.                               * 00041400
*                                                                     * 00041500
*          METHOD(EQUICPU)                                            * 00041600
*              Calculates a CPU equivalent of the systems before      * 00041700
*              computing the output weights.                          * 00041800
*                                                                     * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*                                                                     * 00042200
*                                                                     * 00042300
*                                                                     * 00042400
*      ÝCOST_ZAAP_ON_CP(»xcost_zaap_on_cp!1º)¨                        * 00042500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00042600
*          only) of an optional fullword input which is used in       * 00042700
*          conjunction with METHOD=EQUICPU. It describes the          * 00042800
*          additional cost of executing zAAP-eligible work on a CPU   * 00042900
*          instead of on a zAAP processor.                            * 00043000
*                                                                     * 00043100
*          If the caller wants to use the full system capacity,       * 00043200
*          independently of the cost, then it should set              * 00043300
*          COST_ZAAP_ON_CP=1.  With high values of this cost          * 00043400
*          parameter, WLM considers that a system having used up its  * 00043500
*          free zAAP capacity should offload less work to the CPU,    * 00043600
*          and gives this system a smaller output weight.             * 00043700
*                                                                     * 00043800
*          This cost parameter must be in the range from 1 to 100.    * 00043900
*          If the specified value is outside of this range, WLM will  * 00044000
*          instead use the nearest valid integer (1 or 100) as cost   * 00044100
*          parameter.                                                 * 00044200
*          DEFAULT: 1                                                 * 00044300
*                                                                     * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*      ÝCOST_ZIIP_ON_CP(»xcost_ziip_on_cp!1º)¨                        * 00044800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00044900
*          only) of an optional fullword input which is used in       * 00045000
*          conjunction with METHOD=EQUICPU. It describes the          * 00045100
*          additional cost of executing zIIP-eligible work on a CPU   * 00045200
*          instead of on a zIIP processor.                            * 00045300
*                                                                     * 00045400
*          If the caller wants to use the full system capacity,       * 00045500
*          independently of the cost, then it should set              * 00045600
*          COST_ZIIP_ON_CP=1.  With high values of this cost          * 00045700
*          parameter, WLM considers that a system having used up its  * 00045800
*          free zIIP capacity should offload less work to the CPU,    * 00045900
*          and gives this system a smaller output weight.             * 00046000
*                                                                     * 00046100
*          This cost parameter must be in the range from 1 to 100.    * 00046200
*          If the specified value is outside of this range, WLM will  * 00046300
*          instead use the nearest valid integer (1 or 100) as cost   * 00046400
*          parameter.                                                 * 00046500
*          DEFAULT: 1                                                 * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*      ÝIL_WEIGHTING(»xil_weighting!0º)¨                              * 00047100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00047200
*          only) of an optional fullword input which controls how WLM * 00047300
*          weights available capacity at importance levels (ILs)      * 00047400
*          lower than the currently selected one. The value of        * 00047500
*          IL_WEIGHTING should be in the range from 0 to 3.  If the   * 00047600
*          passed value is outside of this range, WLM will instead    * 00047700
*          use the nearest valid integer (0 or 3) as IL_WEIGHTING.    * 00047800
*                                                                     * 00047900
*          When this parameter is set to 0 (the default value), all   * 00048000
*          free capacities used by levels less important than the     * 00048100
*          current one are weighted the same. This means that the     * 00048200
*          free capacity below the current level is considered to be  * 00048300
*          totally free.                                              * 00048400
*                                                                     * 00048500
*          When this parameter is set to 1, free capacity at the      * 00048600
*          lowest ILs is weighted more than the current IL, with a    * 00048700
*          weighting growing proportionally to the square root of the * 00048800
*          IL difference + 1. For example , with a selected IL of 1,  * 00048900
*          free capacity at IL 5 is weighted about 2.236 times more   * 00049000
*          than free capacity at IL 1.                                * 00049100
*                                                                     * 00049200
*          When this parameter is set to 2, free capacity at the      * 00049300
*          lowest ILs is weighted more than the current IL, with a    * 00049400
*          weighting growing proportionally to the IL difference + 1. * 00049500
*          For example , with a selected IL of 1, free capacity at IL * 00049600
*          5 is weighted 5 times more than free capacity at IL 1.     * 00049700
*                                                                     * 00049800
*          When this parameter is set to 3, free capacity at the      * 00049900
*          lowest ILs is weighted more than the current IL, with a    * 00050000
*          weighting growing proportionally to the square of the IL   * 00050100
*          difference + 1. For example , with a selected IL of 1,     * 00050200
*          free capacity at IL 5 is weighted 25 times more than free  * 00050300
*          capacity at IL 1.                                          * 00050400
*          DEFAULT: 0                                                 * 00050500
*                                                                     * 00050600
*                                                                     * 00050700
*                                                                     * 00050800
*                                                                     * 00050900
*      ÝRETCODE(xretcode)¨                                            * 00051000
*          is the name (RS-type) of an optional fullword output       * 00051100
*          variable (or register (2)-(12) or (15) ASM only) into      * 00051200
*          which the return code is to be copied from GPR 15.  If you * 00051300
*          specify 15, GPR15, REG15, or R15 (within or without        * 00051400
*          parentheses), the value will be left in GPR 15.            * 00051500
*                                                                     * 00051600
*                                                                     * 00051700
*                                                                     * 00051800
*                                                                     * 00051900
*      ÝRSNCODE(xrsncode)¨                                            * 00052000
*          is the name (RS-type) of an optional fullword output       * 00052100
*          variable into which the reason code is to be copied from   * 00052200
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00052300
*          R0 (within or without parentheses), the value will be left * 00052400
*          in GPR 0.                                                  * 00052500
*                                                                     * 00052600
*                                                                     * 00052700
*                                                                     * 00052800
*                                                                     * 00052900
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00053000
*          is an optional byte input decimal value in the "0-2" range * 00053100
*          that specifies the macro version.  PLISTVER is the only    * 00053200
*          key allowed on the list form of MF and determines which    * 00053300
*          parameter list is generated.  The macro keys associated    * 00053400
*          with each supported version of the macro are listed in     * 00053500
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00053600
*          instead of a number, and the parameter list will be of the * 00053700
*          largest size currently supported. This size may grow from  * 00053800
*          release to release (thus possibly affecting the amount of  * 00053900
*          storage needed by your program).  If your program can      * 00054000
*          tolerate this, IBM recommends that you always specify MAX  * 00054100
*          when creating the list form parameter list as that will    * 00054200
*          ensure that the list form parameter list is always long    * 00054300
*          enough to hold whatever parameters might be specified on   * 00054400
*          the execute form.                                          * 00054500
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00054600
*          default is the lowest version which allows all of the      * 00054700
*          parameters specified on the invocation to be processed.    * 00054800
*                                                                     * 00054900
*                                                                     * 00055000
*                                                                     * 00055100
*                                                                     * 00055200
*      ÝMF(»S!L!Eº)¨                                                  * 00055300
*          is an optional keyword input which specifies the macro     * 00055400
*          form.                                                      * 00055500
*          DEFAULT: S                                                 * 00055600
*                                                                     * 00055700
*                                                                     * 00055800
*          ÝMF(S)¨                                                    * 00055900
*              specifies the standard form of the macro.  The "S"     * 00056000
*              form generates code to put the parameters into the     * 00056100
*              parameter list and invoke the desired service.  Full   * 00056200
*              checking for required macro keys is done along with    * 00056300
*              supplying defaults for omitted optional parameters.    * 00056400
*              The ?EPILOG macro must be invoked at the end of the    * 00056500
*              module.                                                * 00056600
*                                                                     * 00056700
*              For assembly language code modules, the "S" form       * 00056800
*              generates code to put the parameters into an in-line   * 00056900
*              parameter list and invoke the desired service.  Full   * 00057000
*              checking for required macro keys is done along with    * 00057100
*              supplying defaults for omitted optional parameters.    * 00057200
*                                                                     * 00057300
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00057400
*              specifies the list form of the macro.  The "L" form    * 00057500
*              defines an area to be used for the parameter list.     * 00057600
*              Only the PLISTVER key may be specified on the          * 00057700
*              invocation.  All other macro parameters are flagged as * 00057800
*              errors.  If PLISTVER is not specified, the original    * 00057900
*              parameter list definition is used.                     * 00058000
*                                                                     * 00058100
*            ,xmfctrl                                                 * 00058200
*              is a required input.  It is the name of a storage area * 00058300
*              for the parameter list.                                * 00058400
*                                                                     * 00058500
*            »,xmfattr!BDY(DWORD)º                                    * 00058600
*              is an optional 60 character input string that varies   * 00058700
*              from 1 to 60 characters. Use it to force boundary      * 00058800
*              alignment of the parameter list. Use only 0F or 0D     * 00058900
*              (assembler-only).                                      * 00059000
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00059100
*              forces the parameter list to a doubleword boundary.    * 00059200
*                                                                     * 00059300
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00059400
*              specifies the execute form of the macro.  The "E" form * 00059500
*              generates code to put the parameters into the          * 00059600
*              parameter list specified by xmfctrl and provides full  * 00059700
*              syntax checking with default setting.                  * 00059800
*                                                                     * 00059900
*            ,xmfctrl                                                 * 00060000
*              is a required input.  It is the name (RS-type) (or     * 00060100
*              address in register (1)-(12) ASM only) of a storage    * 00060200
*              area for the parameter list.                           * 00060300
*                                                                     * 00060400
*            »,COMPLETEº                                              * 00060500
*              is an optional keyword input which specifies the       * 00060600
*              degree of macro parameter syntax checking.             * 00060700
*              DEFAULT: COMPLETE                                      * 00060800
*                                                                     * 00060900
*                                                                     * 00061000
*              COMPLETE                                               * 00061100
*                  Checking for required macro keys is done and       * 00061200
*                  defaults are supplied for omitted optional         * 00061300
*                  parameters.                                        * 00061400
*                                                                     * 00061500
*                                                                     * 00061600
*                                                                     * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*                                                                     * 00062000
*                                                                     * 00062100
*01* ABEND CODES:  None.                                              * 00062200
*                                                                     * 00062300
*01* RETURN CODES:                                                    * 00062400
*                                                                     * 00062500
*                                                                     * 00062600
*            0    Name: IwmRetCodeOk                                  * 00062700
*                                                                     * 00062800
*                 Meaning: Successful completion.                     * 00062900
*                                                                     * 00063000
*                 Action: None required.                              * 00063100
*                                                                     * 00063200
*            4    Name: IwmRetCodeWarning                             * 00063300
*                                                                     * 00063400
*                 Meaning: Successful completion, unusual conditions  * 00063500
*                 noted.                                              * 00063600
*                                                                     * 00063700
*                                                                     * 00063800
*                 HEX REASON  MEANING/ACTION                          * 00063900
*                 CODE                                                * 00064000
*                                                                     * 00064100
*                 xxxx040A    Name: IwmRsnCodeOutputAreaTooSmall      * 00064200
*                                                                     * 00064300
*                             Meaning:  The output area supplied is   * 00064400
*                             too small to receive all the available  * 00064500
*                             information.                            * 00064600
*                                                                     * 00064700
*                             Action: None required.  If necessary,   * 00064800
*                             reinvoke the service with an output     * 00064900
*                             area of sufficient size to receive all  * 00065000
*                             information.                            * 00065100
*                                                                     * 00065200
*                 xxxx040B    Name: IwmRsnCodeNoServersRegistered     * 00065300
*                                                                     * 00065400
*                             Meaning:  No Servers have registered in * 00065500
*                             the sysplex.                            * 00065600
*                                                                     * 00065700
*                             Action: None required.                  * 00065800
*                                                                     * 00065900
*                                                                     * 00066000
*                                                                     * 00066100
*            8    Name: IwmRetCodeInvocError                          * 00066200
*                                                                     * 00066300
*                 Meaning: Invalid invocation environment or          * 00066400
*                 parameters.                                         * 00066500
*                                                                     * 00066600
*                                                                     * 00066700
*                 HEX REASON  MEANING/ACTION                          * 00066800
*                 CODE                                                * 00066900
*                                                                     * 00067000
*                 xxxx0803    Name: IwmRsnCodeDisabled                * 00067100
*                                                                     * 00067200
*                             Meaning: Caller is disabled.            * 00067300
*                                                                     * 00067400
*                             Action: Avoid requesting this function  * 00067500
*                             while disabled.                         * 00067600
*                                                                     * 00067700
*                 xxxx0804    Name: IwmRsnCodeLocked                  * 00067800
*                                                                     * 00067900
*                             Meaning: Caller is locked.              * 00068000
*                                                                     * 00068100
*                             Action: Avoid requesting this function  * 00068200
*                             while locked.                           * 00068300
*                                                                     * 00068400
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00068500
*                                                                     * 00068600
*                             Meaning:  Error accessing parameter     * 00068700
*                             list.                                   * 00068800
*                                                                     * 00068900
*                             Action: Check for possible storage      * 00069000
*                             overlay.                                * 00069100
*                                                                     * 00069200
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00069300
*                                                                     * 00069400
*                             Meaning: Caller invoked service while   * 00069500
*                             DATOFF                                  * 00069600
*                                                                     * 00069700
*                             Action: Avoid requesting this function  * 00069800
*                             in this environment.                    * 00069900
*                                                                     * 00070000
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00070100
*                                                                     * 00070200
*                             Meaning: Caller invoked service but was * 00070300
*                             in 24 bit addressing mode.              * 00070400
*                                                                     * 00070500
*                             Action: Request this function only when * 00070600
*                             you are in 31 bit addressing mode.      * 00070700
*                                                                     * 00070800
*                 xxxx0825    Name: IwmRsnCodeAscModeNotPrimary       * 00070900
*                                                                     * 00071000
*                             Meaning: Caller invoked service but was * 00071100
*                             not DAT on Primary ASC mode.            * 00071200
*                                                                     * 00071300
*                             Action: Avoid requesting this function  * 00071400
*                             in this environment.                    * 00071500
*                                                                     * 00071600
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00071700
*                                                                     * 00071800
*                             Meaning: Version number in parameter    * 00071900
*                             list or version length field is not     * 00072000
*                             valid.                                  * 00072100
*                                                                     * 00072200
*                             Action: Check for possible storage      * 00072300
*                             overlay of the parameter list.          * 00072400
*                                                                     * 00072500
*                 xxxx089D    Name: IwmRsnCodeWrongSysLevels          * 00072600
*                                                                     * 00072700
*                             Meaning: There are servers registered   * 00072800
*                             in the sysplex, associated with the     * 00072900
*                             input Location name, but with a too old * 00073000
*                             z/OS level (prior to V1R7) for the      * 00073100
*                             SPECIFIC function in the routing        * 00073200
*                             service.                                * 00073300
*                                                                     * 00073400
*                             Action: You may either deregister the   * 00073500
*                             servers with the old level, or decide   * 00073600
*                             to use IWMSRSRS with function SELECT    * 00073700
*                             instead of SPECIFIC.                    * 00073800
*                                                                     * 00073900
*                                                                     * 00074000
*                                                                     * 00074100
*            C    Name: IwmRetCodeEnvError                            * 00074200
*                                                                     * 00074300
*                 Meaning: Environmental error.                       * 00074400
*                                                                     * 00074500
*                                                                     * 00074600
*                 HEX REASON  MEANING/ACTION                          * 00074700
*                 CODE                                                * 00074800
*                                                                     * 00074900
*                 xxxx0C01    Name: IwmRsnCodeNoStg                   * 00075000
*                                                                     * 00075100
*                             Meaning:  Storage is not available for  * 00075200
*                             the request.                            * 00075300
*                                                                     * 00075400
*                             Action: There is a storage shortage.    * 00075500
*                             The function may work successfully at a * 00075600
*                             later time.                             * 00075700
*                                                                     * 00075800
*                                                                     * 00075900
*                                                                     * 00076000
*            10   Name: IwmRetCodeCompError                           * 00076100
*                                                                     * 00076200
*                 Meaning: Component error.                           * 00076300
*                                                                     * 00076400
*                 Action: No action required.  The function may be    * 00076500
*                 successful if invoked again.                        * 00076600
*                                                                     * 00076700
*                                                                     * 00076800
*                                                                     * 00076900
*01* REASON CODES:                                                    * 00077000
*                                                                     * 00077100
*       A unique reason code will be returned whenever the return     * 00077200
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00077300
*       under their corresponding return code.  Reason code and       * 00077400
*       return code constants are defined within IWMYCON.  Note that  * 00077500
*       the high order halfword of register 0, and the reason code    * 00077600
*       variable when specified, may be non-zero and represents       * 00077700
*       diagnostic data which is NOT part of the external interface.  * 00077800
*       The high order halfword should thus be excluded from          * 00077900
*       comparison with the reason code values described above.  The  * 00078000
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00078100
*       used for this purpose.                                        * 00078200
*                                                                     * 00078300
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00078400
*                                                                     * 00078500
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00078600
*                                                                     * 00078700
*01* COMPONENT:  SCWLM                                                * 00078800
*                                                                     * 00078900
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00079000
*                                                                     * 00079100
*01* EXAMPLES:                                                        * 00079200
*                                                                     * 00079300
*    To register an instance of a given location:                     * 00079400
*                                                                     * 00079500
*               IWMSRSRS SYSINFO_BLOCK=DATA,                          * 00079600
*                        EXTENDED_DATA=YES,                           * 00079700
*                        ANSLEN=SIZE,                                 * 00079800
*                        ENTRY_COUNT=E,                               * 00079900
*                        QUERYLEN=Q,                                  * 00080000
*                        LOCATION=LOC,                                * 00080100
*                        FUNCTION=QUERY,RETCODE=RC,RSNCODE=RSN        * 00080200
*      *                                                              * 00080300
*      * Storage areas                                                * 00080400
*      *                                                              * 00080500
*      DATA     DS    CL200           Area to receive output          * 00080600
*      SIZEEQU  EQU   *-DATA          Equate for size of Data         * 00080700
*      E        DS    F               Field to receive entry count    * 00080800
*      Q        DS    F               Field to receive query length   * 00080900
*      LOC      DS    CL18            Contains the Location           * 00081000
*      *                              associated with the server      * 00081100
*      *                              instance                        * 00081200
*      RC       DS    F               Return code                     * 00081300
*      RSN      DS    F               Reason code                     * 00081400
*      SIZE     DC    A(SIZEEQU)      Field to hold size              * 00081500
*                                                                     * 00081600
*                                                                     * 00081700
*01* MACRO USAGE NOTES:                                               * 00081800
*                                                                     * 00081900
*                                                                     * 00082000
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00082100
*        global macro variable.  Any value other than 'NO' will       * 00082200
*        result in the macro expansion being printed.  The default is * 00082300
*        'YES'.  The following examples illustrate how the ZPRINT     * 00082400
*        variable should be set.                                      * 00082500
*                                                                     * 00082600
*                    GBLC &ZPRINT                                     * 00082700
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*    2.  The IWMSRSRS macro supports multiple versions. The macro key * 00083100
*        list  below  contains the version level in which the key was * 00083200
*        first  introduced.  Positionals  are  identified by the word * 00083300
*        'Positional'  followed by the numeric value of its position. * 00083400
*        Nested  positionals  are  preceded  by their outer key.  The * 00083500
*        lowest value represents the original version and the highest * 00083600
*        value  represents  the  most  recent version of the IWMSRSRS * 00083700
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00083800
*        least  as high as the highest version number of all the keys * 00083900
*        being used.                                                  * 00084000
*                                                                     * 00084100
*        VERSION   KEY                                                * 00084200
*                                                                     * 00084300
*              0      ANSLEN                                          * 00084400
*                     LOCATION                                        * 00084500
*                     QUERYLEN                                        * 00084600
*                     SYSINFO_BLOCK                                   * 00084700
*              1      ENTRY_COUNT                                     * 00084800
*                     EXTENDED_DATA                                   * 00084900
*                     FUNCTION                                        * 00085000
*              2      COST_ZAAP_ON_CP                                 * 00085100
*                     COST_ZIIP_ON_CP                                 * 00085200
*                     IL_WEIGHTING                                    * 00085300
*                     METHOD                                          * 00085400
*                                                                     * 00085500
*                                                                     * 00085600
*                                                                     * 00085700
*01* CHANGE ACTIVITY:                                                 * 00085800
*                                                                     * 00085900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00086000
*                                                                     * 00086100
*    $L0=ENCLV    HBB5520 940222 PDDD:  Sysplex Router.               * 00086200
*    $L1=WLMP     HBB6603 960220 PD16:  DB2 TCP/IP Support.           * 00086300
*    $L2=WLMPDNS  JBB6604 961031 PDKP:  Domain Name Support.          * 00086400
*    $L3=WLMPSRC  HBB7720 040329 3241PB:  New function 'SPECIFIC'.    * 00086500
*    $L4=ME01479  HBB7720 040930 3241NN:  New reason code             * 00086600
*                                         IwmRsnCodeWrongSysLevels    * 00086700
*                                         for function 'SPECIFIC'.    * 00086800
*    $L5=LZAAP3A  HBB7740 060630 3241NN:  New reason code             * 00086900
*                                         IwmRsnCodeCpuDataOnly.      * 00087000
*                                         (removed)                   * 00087100
*    $L6=LENHRTA  HBB7760 080331 3241NN:  New optional parameters     * 00087200
*                                         METHOD, COST_ZAAP_ON_CP,    * 00087300
*                                         COST_ZIIP_ON_CP and         * 00087400
*                                         IL_WEIGHTING.               * 00087500
*    $L7=ME15836  HBB7760 090323 3241NN:  Synchronization with WLM    * 00087600
*                                         services book.  Correcting  * 00087700
*                                         descriptions of macro and   * 00087800
*                                         parameters METHOD,          * 00087900
*                                         COST_ZAAP_ON_CP,            * 00088000
*                                         COST_ZIIP_ON_CP and         * 00088100
*                                         IL_WEIGHTING.               * 00088200
*    $L8=ME24605  HBB7790 120815 3241AK:  Fix IL_WEIGHTING plver      * 00088300
*    $L9=OA62027  HBB77D0 220314 3241GV:  New function 'SPECIFICIMP'. * 00088400
****** END OF SPECIFICATIONS *****************************************/ 00088500
*/********************************************************************* 00088600
         MACRO                                                          00088700
&XLABEL  IWMSRSRS &SYSINFO_BLOCK=,&EXTENDED_DATA=,&ANSLEN=,            *00088800
               &ENTRY_COUNT=,&QUERYLEN=,&LOCATION=,&FUNCTION=,&METHOD=,*00088900
               &COST_ZAAP_ON_CP=,&COST_ZIIP_ON_CP=,&IL_WEIGHTING=,     *00089000
               &RETCODE=,&RSNCODE=,&PLISTVER=,&MF=                      00089100
.*                                                                      00089200
*                     MACDATE -22/03/14-<2>                             00089300
.*                                                                      00089400
.*******************************************************************    00089500
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00089600
.*******************************************************************    00089700
                     GBLC  &ZPRINT     YES=PRINT NO=NO PRINT            00089800
                     GBLC  &ZTEST      YES=TEST NO=NO TEST              00089900
                     GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX      00090000
.*                                                                      00090100
                     GBLC  &ZIWMSRSRS  YES=MACRO USED AT LEAST ONCE     00090200
.*******************************************************************    00090300
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00090400
.*******************************************************************    00090500
                     LCLC  &ZMS        ERROR MESSAGE WORK AREA          00090600
                     LCLC  &ZCNDX      SYSNDX CHARACTERS                00090700
                     LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED       00090800
                     LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR      00090900
                     LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE      00091000
                     LCLA  &ZAWRK      USED AS A WORK AREA              00091100
                     LCLA  &ZASIZ      USED FOR SIZE OF VALUE           00091200
                     LCLA  &ZN         NUMERIC WORK VARIABLE            00091300
                     LCLC  &ZC         CHARACTER WORK VARIABLE          00091400
                     LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE      00091500
                     LCLA  &ZTLA       VALUE TOO LONG VARIABLE          00091600
                     LCLC  &ZMAC_G     "G" or null                      00091700
&ZMAC_G              SETC  ''                                           00091800
                     LCLC  &ZMAC_LR                                     00091900
&ZMAC_LR             SETC  'LR'                                         00092000
                     LCLC  &ZMAC_L                                      00092100
&ZMAC_L              SETC  'L'                                          00092200
                     LCLC  &ZMAC_ST                                     00092300
&ZMAC_ST             SETC  'ST'                                         00092400
                     LCLC  &ZMAC_LLGT                                   00092500
&ZMAC_LLGT           SETC  'L'                                          00092600
                     LCLC  &ZMAC_LGR                                    00092700
&ZMAC_LGR            SETC  'LR'                                         00092800
                     LCLC  &ZMAC_LG                                     00092900
&ZMAC_LG             SETC  'L'                                          00093000
                     LCLC  &ZMAC_STG                                    00093100
&ZMAC_STG            SETC  'ST'                                         00093200
                     LCLA  &ZMACRET    MACRO RETURN CODE                00093300
&ZMACRET             SETA  0           ASSUME NO ERRORS                 00093400
.*                                                                      00093500
                     LCLC  &ZCSYSLIST(255)      NONXKEY, POS ARRAY      00093600
                     LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()       00093700
                     LCLA  &ZPLLEN     PARAMETER LIST LENGTH            00093800
                     LCLC  &ZENDBASEPL          End of base PL          00093900
                     LCLA  &ZPLWORKA   PARAMETER LIST LENGTH            00094000
.*******************************************************************    00094100
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00094200
.*******************************************************************    00094300
                     LCLA  &ZI         INDEX FOR ARRAY                  00094400
                     LCLA  &ZJ         INDEX FOR PARMS                  00094500
                     LCLA  &ZK         INDEX FOR PARSE                  00094600
                     LCLA  &ZLO        LOW RANGE VALUE                  00094700
                     LCLA  &ZHI        HIGH RANGE VALUE                 00094800
                     LCLC  &ZW         WORK AREA FOR PARM               00094900
.********************************************************************   00095000
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00095100
.********************************************************************   00095200
                     GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL          00095300
                     GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE   00095400
                     GBLA  &SYSALVL    SYSSTATE ARCHLVL                 00095500
                     GBLC  &SYSAM64    SYSSTATE AMODE64                 00095600
.*                                                                      00095700
                     AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED   00095800
                     AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED    00095900
                     SPLEVEL  TEST                                      00096000
.ZSYS2               ANOP  ,                                            00096100
                     AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1        00096200
                     AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1        00096300
                     SYSSTATE TEST                                      00096400
                     AGO   .ZSYS4                                       00096500
.ZSYS3               ANOP  ,                                            00096600
&SYSASCE             SETC  'P'         ASSUME SYSSTATE PRIMARY          00096700
.ZSYS4               ANOP  ,                                            00096800
                     AIF   ('&SYSAM64' NE 'YES').ZSYSN64                00096900
&ZMAC_LLGT           SETC 'LLGT'                                        00097000
&ZMAC_LGR            SETC 'LGR'                                         00097100
&ZMAC_LG             SETC 'LG'                                          00097200
&ZMAC_STG            SETC 'STG'                                         00097300
.ZSYSN64             ANOP  ,                                            00097400
                     AIF   (&SYSALVL LE 1).ZSYS4A                       00097500
&ZMAC_G              SETC 'G'                                           00097600
&ZMAC_LR             SETC 'LGR'                                         00097700
&ZMAC_L              SETC 'LG'                                          00097800
&ZMAC_ST             SETC 'STG'                                         00097900
.ZSYS4A              ANOP  ,                                            00098000
.*******************************************************************    00098100
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00098200
.*******************************************************************    00098300
                     LCLC  &XSYSINFO_BLOCK      ++ NAME                 00098400
                     LCLC  &XEXTENDED_DATA      ++ VALUE                00098500
                     LCLC  &XANSLEN    ++ NAME                          00098600
                     LCLC  &XENTRY_COUNT        ++ NAME                 00098700
                     LCLC  &XQUERYLEN  ++ NAME                          00098800
                     LCLC  &XLOCATION  ++ NAME                          00098900
                     LCLC  &XFUNCTION  ++ VALUE                         00099000
                     LCLC  &XMETHOD    ++ VALUE                         00099100
                     LCLC  &XCOST_ZAAP_ON_CP    ++ NAME                 00099200
                     LCLC  &XCOST_ZIIP_ON_CP    ++ NAME                 00099300
                     LCLC  &XIL_WEIGHTING       ++ NAME                 00099400
                     LCLC  &XRETCODE   ++ NAME                          00099500
                     LCLC  &XRSNCODE   ++ NAME                          00099600
                     LCLA  &XPLISTVER  ++ VALUE                         00099700
                     LCLC  &XMF        ++ VALUE                         00099800
                     LCLC  &XMFCTRL    ++ NAME                          00099900
                     LCLC  &XMFATTR    ++ VALUE                         00100000
                     LCLC  &XMFSCK     ++ VALUE                         00100100
.*******************************************************************    00100200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00100300
.*******************************************************************    00100400
                     LCLC  &ZXSYSINFO_BLOCK     ++ INPUT NAME           00100500
                     LCLC  &ZXEXTENDED_DATA     ++ INPUT VALUE          00100600
                     LCLC  &ZXANSLEN   ++ INPUT NAME                    00100700
                     LCLC  &ZXENTRY_COUNT       ++ OUTPUT NAME          00100800
                     LCLC  &ZXQUERYLEN          ++ OUTPUT NAME          00100900
                     LCLC  &ZXLOCATION          ++ INPUT NAME           00101000
                     LCLC  &ZXFUNCTION          ++ INPUT VALUE          00101100
                     LCLC  &ZXMETHOD   ++ INPUT VALUE                   00101200
                     LCLC  &ZXCOST_ZAAP_ON_CP   ++ INPUT NAME           00101300
                     LCLC  &ZXCOST_ZIIP_ON_CP   ++ INPUT NAME           00101400
                     LCLC  &ZXIL_WEIGHTING      ++ INPUT NAME           00101500
                     LCLC  &ZXRETCODE  ++ OUTPUT NAME                   00101600
                     LCLC  &ZXRSNCODE  ++ OUTPUT NAME                   00101700
                     LCLC  &ZXPLISTVER          ++ INPUT VALUE          00101800
                     LCLC  &ZXMF       ++ INPUT VALUE                   00101900
                     LCLC  &ZXMFCTRL   ++ INPUT NAME                    00102000
                     LCLC  &ZXMFATTR   ++ INPUT VALUE                   00102100
                     LCLC  &ZXMFSCK    ++ INPUT VALUE                   00102200
.********************************************************************   00102300
.***AC.PLV01  PROCESS PLISTVER                                      *   00102400
.********************************************************************   00102500
&XPLISTVER      SETA  0                                                 00102600
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00102700
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00102800
&XPLISTVER      SETA  2                                                 00102900
.ZPLV0          ANOP  ,                                                 00103000
.*                                                                      00103100
                AIF   ('&EXTENDED_DATA' EQ '').ZPLV1E                   00103200
                AIF   (&XPLISTVER GE 1).ZPLV1E                          00103300
&XPLISTVER      SETA  1                                                 00103400
.ZPLV1E         ANOP  ,                                                 00103500
.*                                                                      00103600
                AIF   ('&ENTRY_COUNT' EQ '').ZPLV2E                     00103700
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00103800
&XPLISTVER      SETA  1                                                 00103900
.ZPLV2E         ANOP  ,                                                 00104000
.*                                                                      00104100
                AIF   ('&FUNCTION' EQ '').ZPLV3E                        00104200
                AIF   (&XPLISTVER GE 1).ZPLV3E                          00104300
&XPLISTVER      SETA  1                                                 00104400
.ZPLV3E         ANOP  ,                                                 00104500
.*                                                                      00104600
                AIF   ('&METHOD' EQ '').ZPLV4E                          00104700
                AIF   (&XPLISTVER GE 2).ZPLV4E                          00104800
&XPLISTVER      SETA  2                                                 00104900
.ZPLV4E         ANOP  ,                                                 00105000
.*                                                                      00105100
                AIF   ('&COST_ZAAP_ON_CP' EQ '').ZPLV5E                 00105200
                AIF   (&XPLISTVER GE 2).ZPLV5E                          00105300
&XPLISTVER      SETA  2                                                 00105400
.ZPLV5E         ANOP  ,                                                 00105500
.*                                                                      00105600
                AIF   ('&COST_ZIIP_ON_CP' EQ '').ZPLV6E                 00105700
                AIF   (&XPLISTVER GE 2).ZPLV6E                          00105800
&XPLISTVER      SETA  2                                                 00105900
.ZPLV6E         ANOP  ,                                                 00106000
.*                                                                      00106100
                AIF   ('&IL_WEIGHTING' EQ '').ZPLV7E                    00106200
                AIF   (&XPLISTVER GE 2).ZPLV7E                          00106300
&XPLISTVER      SETA  2                                                 00106400
.ZPLV7E         ANOP  ,                                                 00106500
.*                                                                      00106600
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00106700
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00106800
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00106900
.*-------------------------------------------------------------------   00107000
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00107100
&ZMS            SETC  '"PLISTVER='                                      00107200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00107300
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00107400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00107500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00107600
                AGO   .ZPVCK2                                           00107700
.ZPVCK3         ANOP  ,                                                 00107800
.*-------------------------------------------------------------------   00107900
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00108000
&ZMS            SETC  '"PLISTVER='                                      00108100
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00108200
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00108300
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00108400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00108500
                AGO   .ZPVCKE                                           00108600
.ZPVCK2         ANOP  ,                                                 00108700
.*-------------------------------------------------------------------   00108800
&ZCVAL          SETC  '&PLISTVER(1)'                                    00108900
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00109000
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00109100
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00109200
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00109300
                AIF   (&ZN LE 2).ZPVCK4A   NOT HIGH                     00109400
.ZPVCK6         ANOP  ,                                                 00109500
&ZMS            SETC  '"PLISTVER='                                      00109600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00109700
&ZMS            SETC  '&ZMS THE RANGE IS "0-2"'                         00109800
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00109900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00110000
&XPLISTVER      SETA  2                                                 00110100
                AGO   .ZPVCKE                                           00110200
.*-------------------------------------------------------------------   00110300
.ZPVCK4A        ANOP  ,                                                 00110400
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00110500
&ZMS            SETC  'PLISTVER='                                       00110600
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00110700
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00110800
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00110900
                MNOTE 8,' &ZMS IS REQUIRED.'                            00111000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00111100
                AGO   .ZPVCK5                                           00111200
.ZPVCK4         ANOP  ,                                                 00111300
&XPLISTVER      SETA  &PLISTVER(1)                                      00111400
.ZPVCK5         ANOP  ,                                                 00111500
.ZPVCKE         ANOP  ,                                                 00111600
.********************************************************************   00111700
.***AG.MF01 PROCESS MF MACRO FORMS                                      00111800
.********************************************************************   00111900
                     ACTR  10000                                        00112000
.*------------------------------------------------------------------    00112100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112200
&XMF                 SETC  ''          INITIALIZE XVARIABLE             00112300
.*-------------------------------------------------------------------   00112400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112500
.ZG53                ANOP  ,                                            00112600
&ZTLC                SETC 'S'                                           00112700
                     AIF   ('&MF(1)' NE '&ZTLC').ZG54                   00112800
&XMF                 SETC  'S'         SET KEYWORD                      00112900
                     AIF   (N'&MF LE 1).ZG53A   CK NUM                  00113000
&ZMS                 SETC  '"MF='                                       00113100
&ZMS                 SETC  '&ZMS.&MF"'                                  00113200
&ZMS                 SETC  '&ZMS "MF"'                                  00113300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00113400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00113500
.ZG53A               ANOP  ,                                            00113600
.*-------------------------------------------------------------------   00113700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00113800
.ZG54                ANOP  ,                                            00113900
&ZTLC                SETC 'L'                                           00114000
                     AIF   ('&MF(1)' NE '&ZTLC').ZG61                   00114100
&XMF                 SETC  'L'         SET KEYWORD                      00114200
                     AIF   (N'&MF LE 3).ZG54A   CK NUM                  00114300
&ZMS                 SETC  '"MF='                                       00114400
&ZMS                 SETC  '&ZMS.&MF"'                                  00114500
&ZMS                 SETC  '&ZMS "MF"'                                  00114600
                     MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'         00114700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00114800
.ZG54A               ANOP  ,                                            00114900
.*-------------------------------------------------------------------   00115000
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00115100
                     AIF   (N'&SYSLIST NE 0).ZG54B  POSITIONALS?        00115200
                     AIF   ('&SYSINFO_BLOCK' NE '').ZG54B  KEYS?        00115300
                     AIF   ('&EXTENDED_DATA' NE '').ZG54B  KEYS?        00115400
                     AIF   ('&ANSLEN' NE '').ZG54B  KEYS?               00115500
                     AIF   ('&ENTRY_COUNT' NE '').ZG54B  KEYS?          00115600
                     AIF   ('&QUERYLEN' NE '').ZG54B  KEYS?             00115700
                     AIF   ('&LOCATION' NE '').ZG54B  KEYS?             00115800
                     AIF   ('&FUNCTION' NE '').ZG54B  KEYS?             00115900
                     AIF   ('&METHOD' NE '').ZG54B  KEYS?               00116000
                     AIF   ('&COST_ZAAP_ON_CP' NE '').ZG54B  KEYS?      00116100
                     AIF   ('&COST_ZIIP_ON_CP' NE '').ZG54B  KEYS?      00116200
                     AIF   ('&IL_WEIGHTING' NE '').ZG54B  KEYS?         00116300
                     AIF   ('&RETCODE' NE '').ZG54B  KEYS?              00116400
                     AIF   ('&RSNCODE' NE '').ZG54B  KEYS?              00116500
                     AGO    .ZG54C     INVOCATION OKAY                  00116600
.ZG54B               ANOP  ,                                            00116700
&ZMS                 SETC  'THE "L" FORM OF "MF"'                       00116800
&ZMS                 SETC  '&ZMS CAN ONLY HAVE'                         00116900
&ZMS                 SETC  '&ZMS THE "PLISTVER" KEY'                    00117000
                     MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'       00117100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00117200
.ZG54C               ANOP  ,                                            00117300
.*-------------------------------------------------------------------   00117400
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00117500
&ZXMFCTRL            SETC  'INPUT'     SET IN/OUTPUT                    00117600
&XMFCTRL             SETC  '&MF(2,1)'  SET XVARIABLE                    00117700
                     AIF   (N'&MF(2) GT 1).ZG56B  MULTI                 00117800
&XMFCTRL             SETC  '&MF(2)'    SET XVARIABLE                    00117900
.ZG56B               AIF   (K'&MF(2) GT 0).ZG56C                        00118000
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00118100
&ZMS                 SETC  'WHEN "L" IS SPECIFIED'                      00118200
&ZMS                 SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'          00118300
                     MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                 00118400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00118500
.ZG56C               ANOP  ,                                            00118600
.*-------------------------------------------------------------------   00118700
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00118800
                     AIF   (K'&ZXMFCTRL LE 0).ZG56P  NOT I/O            00118900
                     AIF   ('&XMFCTRL'(1,1) NE '(').ZG56P               00119000
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00119100
&ZMS                 SETC  '"MF='                                       00119200
&ZMS                 SETC  '&ZMS.&MF"'                                  00119300
&ZMS                 SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'    00119400
                     MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'            00119500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00119600
.ZG56P               ANOP  ,                                            00119700
.*-------------------------------------------------------------------   00119800
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00119900
&ZXMFATTR            SETC  'INPUT'     SET IN/OUTPUT                    00120000
&XMFATTR             SETC  '0D'                                         00120100
                     AIF   (K'&MF(3) LE 0).ZG59B  PARM                  00120200
&XMFATTR             SETC  '&MF(3,1)'  SET XVARIABLE                    00120300
                     AIF   (N'&MF(3) GT 1).ZG59B  MULTI                 00120400
&XMFATTR             SETC  '&MF(3)'    SET XVARIABLE                    00120500
.ZG59B               ANOP  ,                                            00120600
.*-------------------------------------------------------------------   00120700
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00120800
                     AIF   (K'&ZXMFATTR LE 0).ZG59P  NOT I/O            00120900
                     AIF   ('&XMFATTR'(1,1) NE '(').ZG59P               00121000
&ZXMFATTR            SETC  ''          RESET IN/OUTPUT                  00121100
&ZMS                 SETC  '"MF='                                       00121200
&ZMS                 SETC  '&ZMS.&MF"'                                  00121300
&ZMS                 SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'    00121400
                     MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'            00121500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00121600
.ZG59P               ANOP  ,                                            00121700
.*-------------------------------------------------------------------   00121800
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00121900
                     AIF   (K'&ZXMFATTR LE 0).ZG59S  NOT I/O            00122000
                     AIF   (K'&XMFATTR LE 60).ZG59S  LNG OK             00122100
&ZXMFATTR            SETC  ''          RESET IN/OUTPUT                  00122200
&ZMS                 SETC  '"MF='                                       00122300
&ZMS                 SETC  '&ZMS.&MF"'                                  00122400
&ZMS                 SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'        00122500
                     MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'           00122600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00122700
.ZG59S               ANOP  ,                                            00122800
.*-------------------------------------------------------------------   00122900
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00123000
.ZG61                ANOP  ,                                            00123100
&ZTLC                SETC 'E'                                           00123200
                     AIF   ('&MF(1)' NE '&ZTLC').ZG69                   00123300
&XMF                 SETC  'E'         SET KEYWORD                      00123400
                     AIF   (N'&MF LE 3).ZG61A   CK NUM                  00123500
&ZMS                 SETC  '"MF='                                       00123600
&ZMS                 SETC  '&ZMS.&MF"'                                  00123700
&ZMS                 SETC  '&ZMS "MF"'                                  00123800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'         00123900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00124000
.ZG61A               ANOP  ,                                            00124100
.*-------------------------------------------------------------------   00124200
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00124300
&ZXMFCTRL            SETC  'INPUT'     SET IN/OUTPUT                    00124400
&XMFCTRL             SETC  '&MF(2,1)'  SET XVARIABLE                    00124500
                     AIF   (N'&MF(2) GT 1).ZG63B  MULTI                 00124600
&XMFCTRL             SETC  '&MF(2)'    SET XVARIABLE                    00124700
.ZG63B               AIF   (K'&MF(2) GT 0).ZG63C                        00124800
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00124900
&ZMS                 SETC  'WHEN "E" IS SPECIFIED'                      00125000
&ZMS                 SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'          00125100
                     MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                 00125200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00125300
.ZG63C               ANOP  ,                                            00125400
.*-------------------------------------------------------------------   00125500
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00125600
                     AIF   (K'&ZXMFCTRL LE 0).ZG63R  NOT I/O            00125700
                     AIF   ('&XMFCTRL'(1,1) NE '(').ZG63R               00125800
&ZCGPR               SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                   00125900
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG63P                 00126000
                     AIF   (K'&ZCGPR GT 2).ZG63Q                        00126100
                     AIF   ('&ZCGPR' EQ '0').ZG63Q                      00126200
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00126300
                     AIF   (T'&ZCGPR NE 'N').ZG63Q  INVALID REG NAME    00126400
.ZG63P               ANOP  ,                                            00126500
                     AIF   (T'&ZCGPR NE 'N').ZG63R  NON NUMERIC         00126600
                     AIF   ('&ZCGPR' LT '1').ZG63Q                      00126700
                     AIF   ('&ZCGPR' LE '12').ZG63R                     00126800
.ZG63Q               ANOP  ,                                            00126900
&ZMS                 SETC  '"MF='                                       00127000
&ZMS                 SETC  '&ZMS.&MF"'                                  00127100
&ZMS                 SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'    00127200
                     MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'             00127300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00127400
.ZG63R               ANOP  ,                                            00127500
.*-------------------------------------------------------------------   00127600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00127700
&XMFSCK              SETC  ''          INITIALIZE XVARIABLE             00127800
.ZG67A   AIF   ('&MF(3)' NE 'COMPLETE').ZG68A                           00127900
&XMFSCK              SETC  'COMPLETE'  SET KEYWORD                      00128000
.*-------------------------------------------------------------------   00128100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00128200
.ZG68A               AIF   (K'&XMFSCK GT 0).ZG68C  KEYWORD              00128300
                     AIF   (K'&MF(3) LE 0).ZG68B                        00128400
&ZMS                 SETC  '"MF='                                       00128500
&ZMS                 SETC  '&ZMS.&MF"'                                  00128600
&ZMS                 SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '    00128700
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00128800
&ZMS                 SETC  '&ZMS "COMPLETE".'                           00128900
                     MNOTE 8,' &ZMS '                                   00129000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00129100
.ZG68B               ANOP  ,                                            00129200
&XMFSCK              SETC  'COMPLETE'  SET DEFAULT KEYWORD              00129300
.ZG68C               ANOP  ,                                            00129400
&ZXMFSCK             SETC  'INPUT'     SET IN/OUTPUT                    00129500
.*------------------------------------------------------------------    00129600
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00129700
.ZG69                ANOP  ,                                            00129800
&ZXMF                SETC  'INPUT'     SET IN/OUTPUT                    00129900
                     AIF   (K'&XMF GT 0).ZG69E  VALID ARG               00130000
                     AIF   (T'&MF EQ 'O').ZG69D  OMITTED                00130100
&ZASYSLNDX           SETA  0                                            00130200
.ZG69A               ANOP  ,           POSITIONAL MACRO KEY             00130300
&ZASYSLNDX           SETA  &ZASYSLNDX+1                                 00130400
                     AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG69C             00130500
&ZTLC                SETC 'MF'                                          00130600
                     AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG69A    00130700
.ZG69B               ANOP  ,                                            00130800
&ZXMF                SETC  ''          RESET IN/OUTPUT                  00130900
&ZMS                 SETC  'THE "MF" KEY'                               00131000
&ZMS                 SETC  '&ZMS MUST CONTAIN ONE'                      00131100
                     MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'             00131200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00131300
                     AGO   .ZG69E                                       00131400
.ZG69C               ANOP  ,                                            00131500
&ZXMF                SETC  ''          RESET IN/OUTPUT                  00131600
&ZMS                 SETC  '"MF='                                       00131700
&ZMS                 SETC  '&ZMS.&MF"'                                  00131800
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00131900
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00132000
&ZMS                 SETC  '&ZMS "S",'                                  00132100
&ZMS                 SETC  '&ZMS "L",'                                  00132200
&ZMS                 SETC  '&ZMS OR "E".'                               00132300
                     MNOTE 8,' &ZMS '                                   00132400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00132500
                     AGO   .ZG69E                                       00132600
.ZG69D               ANOP  ,                                            00132700
&XMF                 SETC  'S'         SET DEFAULT KEYWORD              00132800
&XMFSCK              SETC  'COMPLETE'  COMPLETE CHECKING                00132900
.ZG69E               ANOP  ,                                            00133000
.********************************************************************   00133100
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00133200
.********************************************************************   00133300
                     ACTR  10000                                        00133400
.*-------------------------------------------------------------------   00133500
.***AG.MF03 MF=(SLE)                                                    00133600
                     AIF   ('&XMF' EQ 'L').ZGMFX                        00133700
.*----------------------------------------------------------------***   00133800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00133900
                     AIF   (N'&SYSINFO_BLOCK LE 1).ZG2A  CK NUM         00134000
&ZMS                 SETC  '"SYSINFO_BLOCK='                            00134100
&ZMS                 SETC  '&ZMS.&SYSINFO_BLOCK"'                       00134200
&ZMS                 SETC  '&ZMS "SYSINFO_BLOCK"'                       00134300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00134400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00134500
.ZG2A                ANOP  ,                                            00134600
.*-------------------------------------------------------------------   00134700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00134800
&ZXSYSINFO_BLOCK     SETC  'INPUT'     SET IN/OUTPUT                    00134900
&XSYSINFO_BLOCK      SETC  '&SYSINFO_BLOCK(1)'  SET XVARIABLE           00135000
                     AIF   (N'&SYSINFO_BLOCK GT 1).ZG2B  MULTI          00135100
&XSYSINFO_BLOCK      SETC  '&SYSINFO_BLOCK'     SET XVARIABLE           00135200
.ZG2B                AIF   (K'&SYSINFO_BLOCK(1) GT 0).ZG2C              00135300
&ZXSYSINFO_BLOCK     SETC  ''          RESET IN/OUTPUT                  00135400
&ZMS                 SETC  ' '                                          00135500
&ZMS                 SETC  '&ZMS "SYSINFO_BLOCK" KEY AND ITS'           00135600
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00135700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00135800
.ZG2C                ANOP  ,                                            00135900
.*-------------------------------------------------------------------   00136000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00136100
                     AIF   (K'&ZXSYSINFO_BLOCK LE 0).ZG2R  NOT I/O      00136200
                     AIF   ('&XSYSINFO_BLOCK'(1,1) NE '(').ZG2R         00136300
&ZCGPR               SETC  '&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2)     00136400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                  00136500
                     AIF   (K'&ZCGPR GT 2).ZG2Q                         00136600
                     AIF   ('&ZCGPR' EQ '0').ZG2Q                       00136700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00136800
                     AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME     00136900
.ZG2P                ANOP  ,                                            00137000
                     AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC          00137100
                     AIF   ('&ZCGPR' LT '2').ZG2Q                       00137200
                     AIF   ('&ZCGPR' LE '12').ZG2R                      00137300
.ZG2Q                ANOP  ,                                            00137400
&ZMS                 SETC  '"SYSINFO_BLOCK='                            00137500
&ZMS                 SETC  '&ZMS.&SYSINFO_BLOCK"'                       00137600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00137700
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00137800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00137900
.ZG2R                ANOP  ,                                            00138000
.*------------------------------------------------------------------    00138100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00138200
&XEXTENDED_DATA      SETC  ''          INITIALIZE XVARIABLE             00138300
.*-------------------------------------------------------------------   00138400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00138500
.ZG6                 ANOP  ,                                            00138600
                     AIF   (K'&EXTENDED_DATA(1) LE 0).ZG6A              00138700
&ZTLC                SETC 'NO'                                          00138800
                     AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG7         00138900
&XEXTENDED_DATA      SETC  'NO'        SET KEYWORD                      00139000
                     AIF   (N'&EXTENDED_DATA LE 1).ZG6A  CK NUM         00139100
&ZMS                 SETC  '"EXTENDED_DATA='                            00139200
&ZMS                 SETC  '&ZMS.&EXTENDED_DATA"'                       00139300
&ZMS                 SETC  '&ZMS "EXTENDED_DATA"'                       00139400
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00139500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00139600
.ZG6A                ANOP  ,                                            00139700
.*-------------------------------------------------------------------   00139800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00139900
.ZG7                 ANOP  ,                                            00140000
&ZTLC                SETC 'YES'                                         00140100
                     AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG8         00140200
&XEXTENDED_DATA      SETC  'YES'       SET KEYWORD                      00140300
                     AIF   (N'&EXTENDED_DATA LE 1).ZG7A  CK NUM         00140400
&ZMS                 SETC  '"EXTENDED_DATA='                            00140500
&ZMS                 SETC  '&ZMS.&EXTENDED_DATA"'                       00140600
&ZMS                 SETC  '&ZMS "EXTENDED_DATA"'                       00140700
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00140800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00140900
.ZG7A                ANOP  ,                                            00141000
.*------------------------------------------------------------------    00141100
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00141200
.ZG8                 ANOP  ,                                            00141300
&ZXEXTENDED_DATA     SETC  'INPUT'     SET IN/OUTPUT                    00141400
                     AIF   (K'&XEXTENDED_DATA GT 0).ZG8E  VALID ARG     00141500
                     AIF   (T'&EXTENDED_DATA EQ 'O').ZG8D  OMITTED      00141600
&ZASYSLNDX           SETA  0                                            00141700
.ZG8A                ANOP  ,           POSITIONAL MACRO KEY             00141800
&ZASYSLNDX           SETA  &ZASYSLNDX+1                                 00141900
                     AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG8C              00142000
&ZTLC                SETC 'EXTENDED_DATA'                               00142100
                     AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG8A     00142200
.ZG8B                ANOP  ,                                            00142300
&ZXEXTENDED_DATA     SETC  ''          RESET IN/OUTPUT                  00142400
&ZMS                 SETC  'THE "EXTENDED_DATA" KEY'                    00142500
&ZMS                 SETC  '&ZMS MUST CONTAIN ONE'                      00142600
                     MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'             00142700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00142800
                     AGO   .ZG8E                                        00142900
.ZG8C                ANOP  ,                                            00143000
&ZXEXTENDED_DATA     SETC  ''          RESET IN/OUTPUT                  00143100
&ZMS                 SETC  '"EXTENDED_DATA='                            00143200
&ZMS                 SETC  '&ZMS.&EXTENDED_DATA"'                       00143300
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00143400
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00143500
&ZMS                 SETC  '&ZMS "NO"'                                  00143600
&ZMS                 SETC  '&ZMS OR "YES".'                             00143700
                     MNOTE 8,' &ZMS '                                   00143800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00143900
                     AGO   .ZG8E                                        00144000
.ZG8D                ANOP  ,                                            00144100
&XEXTENDED_DATA      SETC  'NO'        SET DEFAULT KEYWORD              00144200
.ZG8E                ANOP  ,                                            00144300
.*----------------------------------------------------------------***   00144400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00144500
                     AIF   (N'&ANSLEN LE 1).ZG10A  CK NUM               00144600
&ZMS                 SETC  '"ANSLEN='                                   00144700
&ZMS                 SETC  '&ZMS.&ANSLEN"'                              00144800
&ZMS                 SETC  '&ZMS "ANSLEN"'                              00144900
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00145000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00145100
.ZG10A               ANOP  ,                                            00145200
.*-------------------------------------------------------------------   00145300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00145400
&ZXANSLEN            SETC  'INPUT'     SET IN/OUTPUT                    00145500
&XANSLEN             SETC  '&ANSLEN(1)'         SET XVARIABLE           00145600
                     AIF   (N'&ANSLEN GT 1).ZG10B  MULTI                00145700
&XANSLEN             SETC  '&ANSLEN'   SET XVARIABLE                    00145800
.ZG10B               AIF   (K'&ANSLEN(1) GT 0).ZG10C                    00145900
&ZXANSLEN            SETC  ''          RESET IN/OUTPUT                  00146000
&ZMS                 SETC  ' '                                          00146100
&ZMS                 SETC  '&ZMS "ANSLEN" KEY AND ITS'                  00146200
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00146300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00146400
.ZG10C               ANOP  ,                                            00146500
.*-------------------------------------------------------------------   00146600
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00146700
                     AIF   (K'&ZXANSLEN LE 0).ZG10R  NOT I/O            00146800
                     AIF   ('&XANSLEN'(1,1) NE '(').ZG10R               00146900
&ZCGPR               SETC  '&XANSLEN'(2,K'&XANSLEN-2)                   00147000
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                 00147100
                     AIF   (K'&ZCGPR GT 2).ZG10Q                        00147200
                     AIF   ('&ZCGPR' EQ '0').ZG10Q                      00147300
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00147400
                     AIF   (T'&ZCGPR NE 'N').ZG10Q  INVALID REG NAME    00147500
.ZG10P               ANOP  ,                                            00147600
                     AIF   (T'&ZCGPR NE 'N').ZG10R  NON NUMERIC         00147700
                     AIF   ('&ZCGPR' LT '2').ZG10Q                      00147800
                     AIF   ('&ZCGPR' LE '12').ZG10R                     00147900
.ZG10Q               ANOP  ,                                            00148000
&ZMS                 SETC  '"ANSLEN='                                   00148100
&ZMS                 SETC  '&ZMS.&ANSLEN"'                              00148200
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00148300
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00148400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00148500
.ZG10R               ANOP  ,                                            00148600
.*----------------------------------------------------------------***   00148700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00148800
                     AIF   (N'&ENTRY_COUNT LE 1).ZG13A  CK NUM          00148900
&ZMS                 SETC  '"ENTRY_COUNT='                              00149000
&ZMS                 SETC  '&ZMS.&ENTRY_COUNT"'                         00149100
&ZMS                 SETC  '&ZMS "ENTRY_COUNT"'                         00149200
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00149300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00149400
.ZG13A               ANOP  ,                                            00149500
.*-------------------------------------------------------------------   00149600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00149700
                     AIF   (K'&ENTRY_COUNT(1) LE 0).ZG13C  NO PARM      00149800
&ZXENTRY_COUNT       SETC  'OUTPUT'    SET OUTPUT                       00149900
&XENTRY_COUNT        SETC  '&ENTRY_COUNT(1)'    SET XVARIABLE           00150000
                     AIF   (N'&ENTRY_COUNT GT 1).ZG13C                  00150100
&XENTRY_COUNT        SETC  '&ENTRY_COUNT'       SET XVARIABLE           00150200
.ZG13C               ANOP  ,                                            00150300
.*-------------------------------------------------------------------   00150400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00150500
                     AIF   (K'&ZXENTRY_COUNT LE 0).ZG13R  NOT I/O       00150600
                     AIF   ('&XENTRY_COUNT'(1,1) NE '(').ZG13R          00150700
&ZCGPR               SETC  '&XENTRY_COUNT'(2,K'&XENTRY_COUNT-2)         00150800
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                 00150900
                     AIF   (K'&ZCGPR GT 2).ZG13Q                        00151000
                     AIF   ('&ZCGPR' EQ '0').ZG13Q                      00151100
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00151200
                     AIF   (T'&ZCGPR NE 'N').ZG13Q  INVALID REG NAME    00151300
.ZG13P               ANOP  ,                                            00151400
                     AIF   (T'&ZCGPR NE 'N').ZG13R  NON NUMERIC         00151500
                     AIF   ('&ZCGPR' LT '2').ZG13Q                      00151600
                     AIF   ('&ZCGPR' LE '12').ZG13R                     00151700
.ZG13Q               ANOP  ,                                            00151800
&ZMS                 SETC  '"ENTRY_COUNT='                              00151900
&ZMS                 SETC  '&ZMS.&ENTRY_COUNT"'                         00152000
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00152100
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00152200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00152300
.ZG13R               ANOP  ,                                            00152400
.*----------------------------------------------------------------***   00152500
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00152600
                     AIF   (N'&QUERYLEN LE 1).ZG16A  CK NUM             00152700
&ZMS                 SETC  '"QUERYLEN='                                 00152800
&ZMS                 SETC  '&ZMS.&QUERYLEN"'                            00152900
&ZMS                 SETC  '&ZMS "QUERYLEN"'                            00153000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00153100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00153200
.ZG16A               ANOP  ,                                            00153300
.*-------------------------------------------------------------------   00153400
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00153500
&ZXQUERYLEN          SETC  'OUTPUT'    SET IN/OUTPUT                    00153600
&XQUERYLEN           SETC  '&QUERYLEN(1)'       SET XVARIABLE           00153700
                     AIF   (N'&QUERYLEN GT 1).ZG16B  MULTI              00153800
&XQUERYLEN           SETC  '&QUERYLEN'          SET XVARIABLE           00153900
.ZG16B               AIF   (K'&QUERYLEN(1) GT 0).ZG16C                  00154000
&ZXQUERYLEN          SETC  ''          RESET IN/OUTPUT                  00154100
&ZMS                 SETC  ' '                                          00154200
&ZMS                 SETC  '&ZMS "QUERYLEN" KEY AND ITS'                00154300
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00154400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00154500
.ZG16C               ANOP  ,                                            00154600
.*-------------------------------------------------------------------   00154700
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00154800
                     AIF   (K'&ZXQUERYLEN LE 0).ZG16R  NOT I/O          00154900
                     AIF   ('&XQUERYLEN'(1,1) NE '(').ZG16R             00155000
&ZCGPR               SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)               00155100
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                 00155200
                     AIF   (K'&ZCGPR GT 2).ZG16Q                        00155300
                     AIF   ('&ZCGPR' EQ '0').ZG16Q                      00155400
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00155500
                     AIF   (T'&ZCGPR NE 'N').ZG16Q  INVALID REG NAME    00155600
.ZG16P               ANOP  ,                                            00155700
                     AIF   (T'&ZCGPR NE 'N').ZG16R  NON NUMERIC         00155800
                     AIF   ('&ZCGPR' LT '2').ZG16Q                      00155900
                     AIF   ('&ZCGPR' LE '12').ZG16R                     00156000
.ZG16Q               ANOP  ,                                            00156100
&ZMS                 SETC  '"QUERYLEN='                                 00156200
&ZMS                 SETC  '&ZMS.&QUERYLEN"'                            00156300
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00156400
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00156500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00156600
.ZG16R               ANOP  ,                                            00156700
.*----------------------------------------------------------------***   00156800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00156900
                     AIF   (N'&LOCATION LE 1).ZG19A  CK NUM             00157000
&ZMS                 SETC  '"LOCATION='                                 00157100
&ZMS                 SETC  '&ZMS.&LOCATION"'                            00157200
&ZMS                 SETC  '&ZMS "LOCATION"'                            00157300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00157400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00157500
.ZG19A               ANOP  ,                                            00157600
.*-------------------------------------------------------------------   00157700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00157800
&ZXLOCATION          SETC  'INPUT'     SET IN/OUTPUT                    00157900
&XLOCATION           SETC  '&LOCATION(1)'       SET XVARIABLE           00158000
                     AIF   (N'&LOCATION GT 1).ZG19B  MULTI              00158100
&XLOCATION           SETC  '&LOCATION'          SET XVARIABLE           00158200
.ZG19B               AIF   (K'&LOCATION(1) GT 0).ZG19C                  00158300
&ZXLOCATION          SETC  ''          RESET IN/OUTPUT                  00158400
&ZMS                 SETC  ' '                                          00158500
&ZMS                 SETC  '&ZMS "LOCATION" KEY AND ITS'                00158600
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00158700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00158800
.ZG19C               ANOP  ,                                            00158900
.*-------------------------------------------------------------------   00159000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00159100
                     AIF   (K'&ZXLOCATION LE 0).ZG19R  NOT I/O          00159200
                     AIF   ('&XLOCATION'(1,1) NE '(').ZG19R             00159300
&ZCGPR               SETC  '&XLOCATION'(2,K'&XLOCATION-2)               00159400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                 00159500
                     AIF   (K'&ZCGPR GT 2).ZG19Q                        00159600
                     AIF   ('&ZCGPR' EQ '0').ZG19Q                      00159700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00159800
                     AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME    00159900
.ZG19P               ANOP  ,                                            00160000
                     AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC         00160100
                     AIF   ('&ZCGPR' LT '2').ZG19Q                      00160200
                     AIF   ('&ZCGPR' LE '12').ZG19R                     00160300
.ZG19Q               ANOP  ,                                            00160400
&ZMS                 SETC  '"LOCATION='                                 00160500
&ZMS                 SETC  '&ZMS.&LOCATION"'                            00160600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00160700
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00160800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00160900
.ZG19R               ANOP  ,                                            00161000
.*------------------------------------------------------------------    00161100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00161200
&XFUNCTION           SETC  ''          INITIALIZE XVARIABLE             00161300
.*-------------------------------------------------------------------   00161400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00161500
.ZG23                ANOP  ,                                            00161600
                     AIF   (K'&FUNCTION(1) LE 0).ZG23A                  00161700
&ZTLC                SETC 'SELECT'                                      00161800
                     AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG24             00161900
&XFUNCTION           SETC  'SELECT'    SET KEYWORD                      00162000
                     AIF   (N'&FUNCTION LE 1).ZG23A  CK NUM             00162100
&ZMS                 SETC  '"FUNCTION='                                 00162200
&ZMS                 SETC  '&ZMS.&FUNCTION"'                            00162300
&ZMS                 SETC  '&ZMS "FUNCTION"'                            00162400
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00162500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00162600
.ZG23A               ANOP  ,                                            00162700
.*-------------------------------------------------------------------   00162800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00162900
.ZG24                ANOP  ,                                            00163000
&ZTLC                SETC 'QUERY'                                       00163100
                     AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG25             00163200
&XFUNCTION           SETC  'QUERY'     SET KEYWORD                      00163300
                     AIF   (N'&FUNCTION LE 1).ZG24A  CK NUM             00163400
&ZMS                 SETC  '"FUNCTION='                                 00163500
&ZMS                 SETC  '&ZMS.&FUNCTION"'                            00163600
&ZMS                 SETC  '&ZMS "FUNCTION"'                            00163700
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00163800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00163900
.ZG24A               ANOP  ,                                            00164000
.*-------------------------------------------------------------------   00164100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00164200
.ZG25                ANOP  ,                                            00164300
&ZTLC                SETC 'SPECIFIC'                                    00164400
                     AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG26             00164500
&XFUNCTION           SETC  'SPECIFIC'  SET KEYWORD                      00164600
                     AIF   (N'&FUNCTION LE 1).ZG25A  CK NUM             00164700
&ZMS                 SETC  '"FUNCTION='                                 00164800
&ZMS                 SETC  '&ZMS.&FUNCTION"'                            00164900
&ZMS                 SETC  '&ZMS "FUNCTION"'                            00165000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00165100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00165200
.ZG25A               ANOP  ,                                            00165300
.*-------------------------------------------------------------------   00165400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00165500
.ZG26                ANOP  ,                                            00165600
&ZTLC                SETC 'SPECIFICIMP'                                 00165700
                     AIF   ('&FUNCTION(1)' NE '&ZTLC').ZG27             00165800
&XFUNCTION           SETC  'SPECIFICIMP'        SET KEYWORD             00165900
                     AIF   (N'&FUNCTION LE 1).ZG26A  CK NUM             00166000
&ZMS                 SETC  '"FUNCTION='                                 00166100
&ZMS                 SETC  '&ZMS.&FUNCTION"'                            00166200
&ZMS                 SETC  '&ZMS "FUNCTION"'                            00166300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00166400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00166500
.ZG26A               ANOP  ,                                            00166600
.*------------------------------------------------------------------    00166700
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00166800
.ZG27                ANOP  ,                                            00166900
&ZXFUNCTION          SETC  'INPUT'     SET IN/OUTPUT                    00167000
                     AIF   (K'&XFUNCTION GT 0).ZG27E  VALID ARG         00167100
                     AIF   (T'&FUNCTION EQ 'O').ZG27D  OMITTED          00167200
&ZASYSLNDX           SETA  0                                            00167300
.ZG27A               ANOP  ,           POSITIONAL MACRO KEY             00167400
&ZASYSLNDX           SETA  &ZASYSLNDX+1                                 00167500
                     AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG27C             00167600
&ZTLC                SETC 'FUNCTION'                                    00167700
                     AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG27A    00167800
.ZG27B               ANOP  ,                                            00167900
&ZXFUNCTION          SETC  ''          RESET IN/OUTPUT                  00168000
&ZMS                 SETC  'THE "FUNCTION" KEY'                         00168100
&ZMS                 SETC  '&ZMS MUST CONTAIN ONE'                      00168200
                     MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'             00168300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00168400
                     AGO   .ZG27E                                       00168500
.ZG27C               ANOP  ,                                            00168600
&ZXFUNCTION          SETC  ''          RESET IN/OUTPUT                  00168700
&ZMS                 SETC  '"FUNCTION='                                 00168800
&ZMS                 SETC  '&ZMS.&FUNCTION"'                            00168900
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00169000
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00169100
&ZMS                 SETC  '&ZMS "SELECT",'                             00169200
&ZMS                 SETC  '&ZMS "QUERY",'                              00169300
&ZMS                 SETC  '&ZMS "SPECIFIC",'                           00169400
&ZMS                 SETC  '&ZMS OR "SPECIFICIMP".'                     00169500
                     MNOTE 8,' &ZMS '                                   00169600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00169700
                     AGO   .ZG27E                                       00169800
.ZG27D               ANOP  ,                                            00169900
&XFUNCTION           SETC  'SELECT'    SET DEFAULT KEYWORD              00170000
.ZG27E               ANOP  ,                                            00170100
.*----------------------------------------------------------------***   00170200
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00170300
                     AIF   (N'&METHOD LE 1).ZG29A  CK NUM               00170400
&ZMS                 SETC  '"METHOD='                                   00170500
&ZMS                 SETC  '&ZMS.&METHOD"'                              00170600
&ZMS                 SETC  '&ZMS "METHOD"'                              00170700
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00170800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00170900
.ZG29A               ANOP  ,                                            00171000
.*-------------------------------------------------------------------   00171100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00171200
&XMETHOD             SETC  ''          INITIALIZE XVARIABLE             00171300
.ZG30A   AIF   ('&METHOD(1)' NE 'PROPORTIONAL').ZG31A                   00171400
&XMETHOD             SETC  'PROPORTIONAL'       SET KEYWORD             00171500
.*-------------------------------------------------------------------   00171600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00171700
.ZG31A   AIF   ('&METHOD(1)' NE 'EQUICPU').ZG32A                        00171800
&XMETHOD             SETC  'EQUICPU'   SET KEYWORD                      00171900
.*-------------------------------------------------------------------   00172000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00172100
.ZG32A               AIF   (K'&XMETHOD GT 0).ZG32C  KEYWORD             00172200
                     AIF   (K'&METHOD(1) LE 0).ZG32B                    00172300
&ZMS                 SETC  '"METHOD='                                   00172400
&ZMS                 SETC  '&ZMS.&METHOD"'                              00172500
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00172600
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00172700
&ZMS                 SETC  '&ZMS "PROPORTIONAL"'                        00172800
&ZMS                 SETC  '&ZMS OR "EQUICPU".'                         00172900
                     MNOTE 8,' &ZMS '                                   00173000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00173100
.ZG32B               ANOP  ,                                            00173200
&XMETHOD             SETC  'PROPORTIONAL'       SET DEFAULT KEYWORD     00173300
.ZG32C               ANOP  ,                                            00173400
&ZXMETHOD            SETC  'INPUT'     SET IN/OUTPUT                    00173500
.*----------------------------------------------------------------***   00173600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00173700
                     AIF   (N'&COST_ZAAP_ON_CP LE 1).ZG34A  CK NUM      00173800
&ZMS                 SETC  '"COST_ZAAP_ON_CP='                          00173900
&ZMS                 SETC  '&ZMS.&COST_ZAAP_ON_CP"'                     00174000
&ZMS                 SETC  '&ZMS "COST_ZAAP_ON_CP"'                     00174100
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00174200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00174300
.ZG34A               ANOP  ,                                            00174400
.*-------------------------------------------------------------------   00174500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00174600
&ZXCOST_ZAAP_ON_CP   SETC  'INPUT'     SET IN/OUTPUT                    00174700
&XCOST_ZAAP_ON_CP    SETC  '1'                                          00174800
                     AIF   (K'&COST_ZAAP_ON_CP(1) LE 0).ZG34B  PARM     00174900
&XCOST_ZAAP_ON_CP    SETC  '&COST_ZAAP_ON_CP(1)'  SET XVARIABLE         00175000
                     AIF   (N'&COST_ZAAP_ON_CP GT 1).ZG34B  MULTI       00175100
&XCOST_ZAAP_ON_CP    SETC  '&COST_ZAAP_ON_CP'   SET XVARIABLE           00175200
.ZG34B               ANOP  ,                                            00175300
.*-------------------------------------------------------------------   00175400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00175500
                     AIF   (K'&ZXCOST_ZAAP_ON_CP LE 0).ZG34R  NOT I/O   00175600
                     AIF   ('&XCOST_ZAAP_ON_CP'(1,1) NE '(').ZG34R      00175700
&ZCGPR               SETC  '&XCOST_ZAAP_ON_CP'(2,K'&XCOST_ZAAP_ON_CP-2) 00175800
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                 00175900
                     AIF   (K'&ZCGPR GT 2).ZG34Q                        00176000
                     AIF   ('&ZCGPR' EQ '0').ZG34Q                      00176100
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00176200
                     AIF   (T'&ZCGPR NE 'N').ZG34Q  INVALID REG NAME    00176300
.ZG34P               ANOP  ,                                            00176400
                     AIF   (T'&ZCGPR NE 'N').ZG34R  NON NUMERIC         00176500
                     AIF   ('&ZCGPR' LT '2').ZG34Q                      00176600
                     AIF   ('&ZCGPR' LE '12').ZG34R                     00176700
.ZG34Q               ANOP  ,                                            00176800
&ZMS                 SETC  '"COST_ZAAP_ON_CP='                          00176900
&ZMS                 SETC  '&ZMS.&COST_ZAAP_ON_CP"'                     00177000
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00177100
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00177200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00177300
.ZG34R               ANOP  ,                                            00177400
.*----------------------------------------------------------------***   00177500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00177600
                     AIF   (N'&COST_ZIIP_ON_CP LE 1).ZG37A  CK NUM      00177700
&ZMS                 SETC  '"COST_ZIIP_ON_CP='                          00177800
&ZMS                 SETC  '&ZMS.&COST_ZIIP_ON_CP"'                     00177900
&ZMS                 SETC  '&ZMS "COST_ZIIP_ON_CP"'                     00178000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00178100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00178200
.ZG37A               ANOP  ,                                            00178300
.*-------------------------------------------------------------------   00178400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00178500
&ZXCOST_ZIIP_ON_CP   SETC  'INPUT'     SET IN/OUTPUT                    00178600
&XCOST_ZIIP_ON_CP    SETC  '1'                                          00178700
                     AIF   (K'&COST_ZIIP_ON_CP(1) LE 0).ZG37B  PARM     00178800
&XCOST_ZIIP_ON_CP    SETC  '&COST_ZIIP_ON_CP(1)'  SET XVARIABLE         00178900
                     AIF   (N'&COST_ZIIP_ON_CP GT 1).ZG37B  MULTI       00179000
&XCOST_ZIIP_ON_CP    SETC  '&COST_ZIIP_ON_CP'   SET XVARIABLE           00179100
.ZG37B               ANOP  ,                                            00179200
.*-------------------------------------------------------------------   00179300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00179400
                     AIF   (K'&ZXCOST_ZIIP_ON_CP LE 0).ZG37R  NOT I/O   00179500
                     AIF   ('&XCOST_ZIIP_ON_CP'(1,1) NE '(').ZG37R      00179600
&ZCGPR               SETC  '&XCOST_ZIIP_ON_CP'(2,K'&XCOST_ZIIP_ON_CP-2) 00179700
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG37P                 00179800
                     AIF   (K'&ZCGPR GT 2).ZG37Q                        00179900
                     AIF   ('&ZCGPR' EQ '0').ZG37Q                      00180000
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00180100
                     AIF   (T'&ZCGPR NE 'N').ZG37Q  INVALID REG NAME    00180200
.ZG37P               ANOP  ,                                            00180300
                     AIF   (T'&ZCGPR NE 'N').ZG37R  NON NUMERIC         00180400
                     AIF   ('&ZCGPR' LT '2').ZG37Q                      00180500
                     AIF   ('&ZCGPR' LE '12').ZG37R                     00180600
.ZG37Q               ANOP  ,                                            00180700
&ZMS                 SETC  '"COST_ZIIP_ON_CP='                          00180800
&ZMS                 SETC  '&ZMS.&COST_ZIIP_ON_CP"'                     00180900
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00181000
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00181100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00181200
.ZG37R               ANOP  ,                                            00181300
.*----------------------------------------------------------------***   00181400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00181500
                     AIF   (N'&IL_WEIGHTING LE 1).ZG40A  CK NUM         00181600
&ZMS                 SETC  '"IL_WEIGHTING='                             00181700
&ZMS                 SETC  '&ZMS.&IL_WEIGHTING"'                        00181800
&ZMS                 SETC  '&ZMS "IL_WEIGHTING"'                        00181900
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00182000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00182100
.ZG40A               ANOP  ,                                            00182200
.*-------------------------------------------------------------------   00182300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00182400
&ZXIL_WEIGHTING      SETC  'INPUT'     SET IN/OUTPUT                    00182500
&XIL_WEIGHTING       SETC  '0'                                          00182600
                     AIF   (K'&IL_WEIGHTING(1) LE 0).ZG40B  PARM        00182700
&XIL_WEIGHTING       SETC  '&IL_WEIGHTING(1)'   SET XVARIABLE           00182800
                     AIF   (N'&IL_WEIGHTING GT 1).ZG40B  MULTI          00182900
&XIL_WEIGHTING       SETC  '&IL_WEIGHTING'      SET XVARIABLE           00183000
.ZG40B               ANOP  ,                                            00183100
.*-------------------------------------------------------------------   00183200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00183300
                     AIF   (K'&ZXIL_WEIGHTING LE 0).ZG40R  NOT I/O      00183400
                     AIF   ('&XIL_WEIGHTING'(1,1) NE '(').ZG40R         00183500
&ZCGPR               SETC  '&XIL_WEIGHTING'(2,K'&XIL_WEIGHTING-2)       00183600
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG40P                 00183700
                     AIF   (K'&ZCGPR GT 2).ZG40Q                        00183800
                     AIF   ('&ZCGPR' EQ '0').ZG40Q                      00183900
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00184000
                     AIF   (T'&ZCGPR NE 'N').ZG40Q  INVALID REG NAME    00184100
.ZG40P               ANOP  ,                                            00184200
                     AIF   (T'&ZCGPR NE 'N').ZG40R  NON NUMERIC         00184300
                     AIF   ('&ZCGPR' LT '2').ZG40Q                      00184400
                     AIF   ('&ZCGPR' LE '12').ZG40R                     00184500
.ZG40Q               ANOP  ,                                            00184600
&ZMS                 SETC  '"IL_WEIGHTING='                             00184700
&ZMS                 SETC  '&ZMS.&IL_WEIGHTING"'                        00184800
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00184900
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00185000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00185100
.ZG40R               ANOP  ,                                            00185200
.*----------------------------------------------------------------***   00185300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00185400
                     AIF   (N'&RETCODE LE 1).ZG43A  CK NUM              00185500
&ZMS                 SETC  '"RETCODE='                                  00185600
&ZMS                 SETC  '&ZMS.&RETCODE"'                             00185700
&ZMS                 SETC  '&ZMS "RETCODE"'                             00185800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00185900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00186000
.ZG43A               ANOP  ,                                            00186100
.*-------------------------------------------------------------------   00186200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00186300
                     AIF   (K'&RETCODE(1) LE 0).ZG43C  NO PARM          00186400
&ZXRETCODE           SETC  'OUTPUT'    SET OUTPUT                       00186500
&XRETCODE            SETC  '&RETCODE(1)'        SET XVARIABLE           00186600
                     AIF   (N'&RETCODE GT 1).ZG43C                      00186700
&XRETCODE            SETC  '&RETCODE'  SET XVARIABLE                    00186800
.ZG43C               ANOP  ,                                            00186900
.*-------------------------------------------------------------------   00187000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00187100
                     AIF   (K'&ZXRETCODE LE 0).ZG43R  NOT I/O           00187200
                     AIF   ('&XRETCODE'(1,1) NE '(').ZG43R              00187300
&ZCGPR               SETC  '&XRETCODE'(2,K'&XRETCODE-2)                 00187400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                 00187500
                     AIF   (K'&ZCGPR GT 2).ZG43Q                        00187600
                     AIF   ('&ZCGPR' EQ '0').ZG43Q                      00187700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00187800
                     AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME    00187900
.ZG43P               ANOP  ,                                            00188000
                     AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC         00188100
                     AIF   ('&ZCGPR' EQ '15').ZG43R                     00188200
                     AIF   ('&ZCGPR' LT '2').ZG43Q                      00188300
                     AIF   ('&ZCGPR' LE '12').ZG43R                     00188400
.ZG43Q               ANOP  ,                                            00188500
&ZMS                 SETC  '"RETCODE='                                  00188600
&ZMS                 SETC  '&ZMS.&RETCODE"'                             00188700
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00188800
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'     00188900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00189000
.ZG43R               ANOP  ,                                            00189100
.*----------------------------------------------------------------***   00189200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00189300
                     AIF   (N'&RSNCODE LE 1).ZG46A  CK NUM              00189400
&ZMS                 SETC  '"RSNCODE='                                  00189500
&ZMS                 SETC  '&ZMS.&RSNCODE"'                             00189600
&ZMS                 SETC  '&ZMS "RSNCODE"'                             00189700
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00189800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00189900
.ZG46A               ANOP  ,                                            00190000
.*-------------------------------------------------------------------   00190100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00190200
                     AIF   (K'&RSNCODE(1) LE 0).ZG46C  NO PARM          00190300
&ZXRSNCODE           SETC  'OUTPUT'    SET OUTPUT                       00190400
&XRSNCODE            SETC  '&RSNCODE(1)'        SET XVARIABLE           00190500
                     AIF   (N'&RSNCODE GT 1).ZG46C                      00190600
&XRSNCODE            SETC  '&RSNCODE'  SET XVARIABLE                    00190700
.ZG46C               ANOP  ,                                            00190800
.*-------------------------------------------------------------------   00190900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00191000
                     AIF   (K'&ZXRSNCODE LE 0).ZG46R  NOT I/O           00191100
                     AIF   ('&XRSNCODE'(1,1) NE '(').ZG46R              00191200
&ZCGPR               SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                 00191300
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG46P                 00191400
                     AIF   (K'&ZCGPR GT 2).ZG46Q                        00191500
                     AIF   ('&ZCGPR' EQ '0').ZG46R                      00191600
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00191700
                     AIF   (T'&ZCGPR NE 'N').ZG46Q  INVALID REG NAME    00191800
.ZG46P               ANOP  ,                                            00191900
                     AIF   (T'&ZCGPR NE 'N').ZG46R  NON NUMERIC         00192000
                     AIF   ('&ZCGPR' EQ '0').ZG46R                      00192100
                     AIF   ('&ZCGPR' LT '2').ZG46Q                      00192200
                     AIF   ('&ZCGPR' LE '12').ZG46R                     00192300
.ZG46Q               ANOP  ,                                            00192400
&ZMS                 SETC  '"RSNCODE='                                  00192500
&ZMS                 SETC  '&ZMS.&RSNCODE"'                             00192600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00192700
                     MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'      00192800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00192900
.ZG46R               ANOP  ,                                            00193000
.******************************************************************     00193100
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00193200
.******************************************************************     00193300
                     ACTR  10000                                        00193400
.*----------------------------------------------------------------***   00193500
.***AH.P02 EXTRA POSITIONALS                                            00193600
                     AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS         00193700
                     AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL         00193800
                     AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL     00193900
                     AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL      00194000
.ZGLISTX1            ANOP  ,                                            00194100
&ZCVAL               SETC  ''          ERROR FIELD                      00194200
&ZAWRK               SETA  0           POSITIONAL NUMBER                00194300
.ZGLIST2             ANOP  ,                                            00194400
&ZAWRK               SETA  &ZAWRK+1    NEXT POSITIONAL                  00194500
                     AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE         00194600
&ZCVAL               SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA              00194700
                     AGO   .ZGLIST2                                     00194800
.*                                                                      00194900
.ZGLIST3             ANOP  ,                                            00195000
&ZCVAL               SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA           00195100
&ZMS                 SETC  'POSITIONAL ARGUMENT(S),'                    00195200
&ZMS                 SETC  '&ZMS "&ZCVAL"'                              00195300
&ZMS                 SETC  '&ZMS CANNOT BE USED.'                       00195400
&ZMS                 SETC  '&ZMS NO POSITIONAL ARGUMENTS'               00195500
                     MNOTE 8,' &ZMS ARE ALLOWED.'                       00195600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00195700
.ZGLISTX             ANOP  ,                                            00195800
&ZASYSLNDX           SETA  0                                            00195900
.*-------------------------------------------------------------------   00196000
.***AG.MF04 MF=(SLE)                                                    00196100
.ZGMFX               ANOP  ,           END OF FULL SYNTAX CHECK         00196200
.*******************************************************************    00196300
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00196400
.*******************************************************************    00196500
                     AIF   (&ZMACRET NE 0).ZLX2  ERROR DETECTED         00196600
.*******************************************************************    00196700
.***AE.01  START OF IWMSRSRS MACRO CODE                                 00196800
.*******************************************************************    00196900
                     LCLC  &M0M0001                 NAME                00197000
&M0M0001             SETC  '&XLABEL'                SET NAME            00197100
                     AIF   (K'&XLABEL NE 0).XLAB2                       00197200
&M0M0001             SETC  'M00M&SYSNDX'            DEFAULT NAME        00197300
.*                                                                      00197400
.XLAB2               ANOP  ,                                            00197500
                     AIF   ('&XMF' EQ 'L').XLAB3                        00197600
&M0M0001 DS    0H                             IWMSRSRS-2                00197700
.XLAB3               ANOP  ,                                            00197800
.*******************************************************************    00197900
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00198000
.*******************************************************************    00198100
              PUSH  PRINT                                               00198200
                     AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON   00198300
                     PRINT OFF         ++ PR01                          00198400
                     AGO   .ZPRNTXX                                     00198500
.ZPRINTX             PRINT ON                                           00198600
.ZPRNTXX             ANOP  ,                                            00198700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00198800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00198900
.********************************************************************   00199000
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00199100
.********************************************************************   00199200
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00199300
                      LCLA  &ZOPN1         INVOCATION INDEX             00199400
                      LCLC  &ZOPL(4095)    LABEL                        00199500
                      LCLC  &ZOPO(4095)    OPERATION                    00199600
                      LCLC  &ZOPV(4095)    VALUE                        00199700
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00199800
.*                                                                      00199900
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00200000
.******************************************************************     00200100
.***AL.L10 IWMSRSRS FMT=LIST MF=S!L PARAMETERS                          00200200
.******************************************************************     00200300
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00200400
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00200500
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00200600
&XMFATTR              SETC  '0D'                                        00200700
.*                                                                      00200800
&ZOPN                 SETA  &ZOPN+1                                     00200900
&ZOPL(&ZOPN)          SETC  ' '                                         00201000
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00201100
&ZOPV(&ZOPN)          SETC  '4,8'                                       00201200
&ZOPN                 SETA  &ZOPN+1                                     00201300
&ZOPL(&ZOPN)          SETC  ' '                                         00201400
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00201500
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00201600
&ZOPD(&ZOPN)          SETC  '++ IWMSRSRS ARG PARMS'                     00201700
.*                                                                      00201800
&ZOPN                 SETA  &ZOPN+1                                     00201900
&ZOPL(&ZOPN)          SETC  ' '                                         00202000
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00202100
&ZOPV(&ZOPN)          SETC  '1'                                         00202200
&ZOPD(&ZOPN)          SETC  ' '                                         00202300
.*                                                                      00202400
.ZLMFSL2              ANOP  ,                                           00202500
.*-------------------------------------------------------------------   00202600
.***AM.L00  IWMSRSRS FMT=LIST name                                      00202700
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00202800
&ZOPN                 SETA &ZOPN+1                                      00202900
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00203000
&ZOPO(&ZOPN)          SETC 'EQU'                                        00203100
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00203200
&ZOPD(&ZOPN)          SETC '++ IWMSRSRS NAME'                           00203300
.ZLMFSL2M             ANOP  ,                                           00203400
.*-------------------------------------------------------------------   00203500
.***AM.L01  IWMSRSRS FMT=LIST PARAMETERS                                00203600
&ZOPN                 SETA &ZOPN+1                                      00203700
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00203800
&ZOPO(&ZOPN)          SETC 'DS'                                         00203900
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00204000
&ZOPD(&ZOPN)          SETC '++ IWMSRSRS PARM LIST'                      00204100
.*-------------------------------------------------------------------   00204200
.***AM.L02 XVERSION XL1                                                 00204300
&ZOPN                 SETA &ZOPN+1                                      00204400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00204500
&ZOPO(&ZOPN)          SETC 'DS'                                         00204600
&ZOPV(&ZOPN)          SETC 'XL1'                                        00204700
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00204800
.*-------------------------------------------------------------------   00204900
.***AM.L09  XRSV002 CL3                                                 00205000
&ZOPN                 SETA &ZOPN+1                                      00205100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV002'                          00205200
&ZOPO(&ZOPN)          SETC 'DS'                                         00205300
&ZOPV(&ZOPN)          SETC 'CL3'                                        00205400
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00205500
.*-------------------------------------------------------------------   00205600
.***AM.L09  XSYSINFO_BLOCK A                                            00205700
&ZOPN                 SETA &ZOPN+1                                      00205800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSYSINFO_BLOCK'                   00205900
&ZOPO(&ZOPN)          SETC 'DS'                                         00206000
&ZOPV(&ZOPN)          SETC 'A'                                          00206100
&ZOPD(&ZOPN)          SETC '++ &ZXSYSINFO_BLOCK '                       00206200
.*-------------------------------------------------------------------   00206300
.***AM.L09  XANSLEN F                                                   00206400
&ZOPN                 SETA &ZOPN+1                                      00206500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSLEN'                          00206600
&ZOPO(&ZOPN)          SETC 'DS'                                         00206700
&ZOPV(&ZOPN)          SETC 'F'                                          00206800
&ZOPD(&ZOPN)          SETC '++ &ZXANSLEN '                              00206900
.*-------------------------------------------------------------------   00207000
.***AM.L09  XQUERYLEN F                                                 00207100
&ZOPN                 SETA &ZOPN+1                                      00207200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XQUERYLEN'                        00207300
&ZOPO(&ZOPN)          SETC 'DS'                                         00207400
&ZOPV(&ZOPN)          SETC 'F'                                          00207500
&ZOPD(&ZOPN)          SETC '++ &ZXQUERYLEN '                            00207600
.*-------------------------------------------------------------------   00207700
.***AM.L09  XLOCATION CL18                                              00207800
&ZOPN                 SETA &ZOPN+1                                      00207900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XLOCATION'                        00208000
&ZOPO(&ZOPN)          SETC 'DS'                                         00208100
&ZOPV(&ZOPN)          SETC 'CL18'                                       00208200
&ZOPD(&ZOPN)          SETC '++ &ZXLOCATION '                            00208300
.*-------------------------------------------------------------------   00208400
.***AM.L09  XRSV0022 CL2                                                00208500
&ZOPN                 SETA &ZOPN+1                                      00208600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0022'                         00208700
&ZOPO(&ZOPN)          SETC 'DS'                                         00208800
&ZOPV(&ZOPN)          SETC 'CL2'                                        00208900
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00209000
.*-------------------------------------------------------------------   00209100
.***AM.MLM2 SAVED LOCATION COUNTER                                      00209200
                      AIF  (&XPLISTVER GE 1).ZL8LA                      00209300
                      AIF  ('&ZENDBASEPL' NE '').ZL8LA                  00209400
&ZENDBASEPL           SETC 'YES'                                        00209500
&ZOPN                 SETA &ZOPN+1                                      00209600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00209700
&ZOPO(&ZOPN)          SETC 'EQU'                                        00209800
&ZOPV(&ZOPN)          SETC '*'                                          00209900
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00210000
.ZL8LA                ANOP  ,                                           00210100
.*-------------------------------------------------------------------   00210200
.***AM.LVER1                                                            00210300
                      AIF  (&XPLISTVER LT 1).ZL8L                       00210400
.*-------------------------------------------------------------------   00210500
.*-------------------------------------------------------------------   00210600
.***AM.L09  XPLISTLEN XL2                                               00210700
&ZOPN                 SETA &ZOPN+1                                      00210800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00210900
&ZOPO(&ZOPN)          SETC 'DS'                                         00211000
&ZOPV(&ZOPN)          SETC 'XL2'                                        00211100
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00211200
.*-------------------------------------------------------------------   00211300
.***AM.LVER2                                                            00211400
.ZL8L                 ANOP  ,                                           00211500
.*-------------------------------------------------------------------   00211600
.*-------------------------------------------------------------------   00211700
.***AM.LVER1                                                            00211800
                      AIF  (&XPLISTVER LT 1).ZL9L                       00211900
.*-------------------------------------------------------------------   00212000
.*-------------------------------------------------------------------   00212100
.***AM.L03 XSRS_OPTIONS BL.8                                            00212200
&ZOPN                 SETA &ZOPN+1                                      00212300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRS_OPTIONS'                     00212400
&ZOPO(&ZOPN)          SETC 'DS'                                         00212500
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00212600
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00212700
.*-------------------------------------------------------------------   00212800
.***AM.LVER2                                                            00212900
.ZL9L                 ANOP  ,                                           00213000
.*-------------------------------------------------------------------   00213100
.*-------------------------------------------------------------------   00213200
.***AM.LVER1                                                            00213300
                      AIF  (&XPLISTVER LT 1).ZL10L                      00213400
.*-------------------------------------------------------------------   00213500
.*                                                                      00213600
&ZOPN                 SETA  &ZOPN+1                                     00213700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XEXTENDED_DATA_YES'              00213800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00213900
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00214000
&ZOPD(&ZOPN)          SETC  '++ XEXTENDED_DATA.'                        00214100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00214200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00214300
.*-------------------------------------------------------------------   00214400
.***AM.LVER2                                                            00214500
.ZL10L                ANOP  ,                                           00214600
.*-------------------------------------------------------------------   00214700
.*-------------------------------------------------------------------   00214800
.***AM.LVER1                                                            00214900
                      AIF  (&XPLISTVER LT 1).ZL11L                      00215000
.*-------------------------------------------------------------------   00215100
.*                                                                      00215200
&ZOPN                 SETA  &ZOPN+1                                     00215300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_QUERY'                 00215400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00215500
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00215600
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00215700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).QUERY'                        00215800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00215900
.*-------------------------------------------------------------------   00216000
.***AM.LVER2                                                            00216100
.ZL11L                ANOP  ,                                           00216200
.*-------------------------------------------------------------------   00216300
.*-------------------------------------------------------------------   00216400
.***AM.LVER1                                                            00216500
                      AIF  (&XPLISTVER LT 1).ZL12L                      00216600
.*-------------------------------------------------------------------   00216700
.*                                                                      00216800
&ZOPN                 SETA  &ZOPN+1                                     00216900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_SPECIFIC'              00217000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00217100
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00217200
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00217300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SPECIFIC'                     00217400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00217500
.*-------------------------------------------------------------------   00217600
.***AM.LVER2                                                            00217700
.ZL12L                ANOP  ,                                           00217800
.*-------------------------------------------------------------------   00217900
.*-------------------------------------------------------------------   00218000
.***AM.LVER1                                                            00218100
                      AIF  (&XPLISTVER LT 1).ZL13L                      00218200
.*-------------------------------------------------------------------   00218300
.*                                                                      00218400
&ZOPN                 SETA  &ZOPN+1                                     00218500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_SPECIFICIMP'           00218600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00218700
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00218800
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00218900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SPECIFICIMP'                  00219000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00219100
.*-------------------------------------------------------------------   00219200
.***AM.LVER2                                                            00219300
.ZL13L                ANOP  ,                                           00219400
.*-------------------------------------------------------------------   00219500
.*-------------------------------------------------------------------   00219600
.***AM.LVER1                                                            00219700
                      AIF  (&XPLISTVER LT 1).ZL14L                      00219800
.*-------------------------------------------------------------------   00219900
.*-------------------------------------------------------------------   00220000
.***AM.L09  XRSV0025 CL1                                                00220100
&ZOPN                 SETA &ZOPN+1                                      00220200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0025'                         00220300
&ZOPO(&ZOPN)          SETC 'DS'                                         00220400
&ZOPV(&ZOPN)          SETC 'CL1'                                        00220500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00220600
.*-------------------------------------------------------------------   00220700
.***AM.LVER2                                                            00220800
.ZL14L                ANOP  ,                                           00220900
.*-------------------------------------------------------------------   00221000
.*-------------------------------------------------------------------   00221100
.***AM.LVER1                                                            00221200
                      AIF  (&XPLISTVER LT 1).ZL15L                      00221300
.*-------------------------------------------------------------------   00221400
.*-------------------------------------------------------------------   00221500
.***AM.L09  XENTRY_COUNT F                                              00221600
&ZOPN                 SETA &ZOPN+1                                      00221700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XENTRY_COUNT'                     00221800
&ZOPO(&ZOPN)          SETC 'DS'                                         00221900
&ZOPV(&ZOPN)          SETC 'F'                                          00222000
&ZOPD(&ZOPN)          SETC '++ &ZXENTRY_COUNT '                         00222100
.*-------------------------------------------------------------------   00222200
.***AM.LVER2                                                            00222300
.ZL15L                ANOP  ,                                           00222400
.*-------------------------------------------------------------------   00222500
.*-------------------------------------------------------------------   00222600
.***AM.MLM2 SAVED LOCATION COUNTER                                      00222700
                      AIF  (&XPLISTVER GE 2).ZL16LA                     00222800
                      AIF  ('&ZENDBASEPL' NE '').ZL16LA                 00222900
&ZENDBASEPL           SETC 'YES'                                        00223000
&ZOPN                 SETA &ZOPN+1                                      00223100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00223200
&ZOPO(&ZOPN)          SETC 'EQU'                                        00223300
&ZOPV(&ZOPN)          SETC '*'                                          00223400
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00223500
.ZL16LA               ANOP  ,                                           00223600
.*-------------------------------------------------------------------   00223700
.***AM.LVER1                                                            00223800
                      AIF  (&XPLISTVER LT 2).ZL16L                      00223900
.*-------------------------------------------------------------------   00224000
.*-------------------------------------------------------------------   00224100
.***AM.L09  XCOST_ZAAP_ON_CP F                                          00224200
&ZOPN                 SETA &ZOPN+1                                      00224300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOST_ZAAP_ON_CP'                 00224400
&ZOPO(&ZOPN)          SETC 'DS'                                         00224500
&ZOPV(&ZOPN)          SETC 'F'                                          00224600
&ZOPD(&ZOPN)          SETC '++ &ZXCOST_ZAAP_ON_CP '                     00224700
.*-------------------------------------------------------------------   00224800
.***AM.LVER2                                                            00224900
.ZL16L                ANOP  ,                                           00225000
.*-------------------------------------------------------------------   00225100
.*-------------------------------------------------------------------   00225200
.***AM.LVER1                                                            00225300
                      AIF  (&XPLISTVER LT 2).ZL17L                      00225400
.*-------------------------------------------------------------------   00225500
.*-------------------------------------------------------------------   00225600
.***AM.L09  XCOST_ZIIP_ON_CP F                                          00225700
&ZOPN                 SETA &ZOPN+1                                      00225800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOST_ZIIP_ON_CP'                 00225900
&ZOPO(&ZOPN)          SETC 'DS'                                         00226000
&ZOPV(&ZOPN)          SETC 'F'                                          00226100
&ZOPD(&ZOPN)          SETC '++ &ZXCOST_ZIIP_ON_CP '                     00226200
.*-------------------------------------------------------------------   00226300
.***AM.LVER2                                                            00226400
.ZL17L                ANOP  ,                                           00226500
.*-------------------------------------------------------------------   00226600
.*-------------------------------------------------------------------   00226700
.***AM.LVER1                                                            00226800
                      AIF  (&XPLISTVER LT 2).ZL18L                      00226900
.*-------------------------------------------------------------------   00227000
.*-------------------------------------------------------------------   00227100
.***AM.L09  XIL_WEIGHTING F                                             00227200
&ZOPN                 SETA &ZOPN+1                                      00227300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XIL_WEIGHTING'                    00227400
&ZOPO(&ZOPN)          SETC 'DS'                                         00227500
&ZOPV(&ZOPN)          SETC 'F'                                          00227600
&ZOPD(&ZOPN)          SETC '++ &ZXIL_WEIGHTING '                        00227700
.*-------------------------------------------------------------------   00227800
.***AM.LVER2                                                            00227900
.ZL18L                ANOP  ,                                           00228000
.*-------------------------------------------------------------------   00228100
.*-------------------------------------------------------------------   00228200
.***AM.LVER1                                                            00228300
                      AIF  (&XPLISTVER LT 2).ZL19L                      00228400
.*-------------------------------------------------------------------   00228500
.*-------------------------------------------------------------------   00228600
.***AM.L03 XEQUICPU_OPTIONS BL.8                                        00228700
&ZOPN                 SETA &ZOPN+1                                      00228800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEQUICPU_OPTIONS'                 00228900
&ZOPO(&ZOPN)          SETC 'DS'                                         00229000
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00229100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00229200
.*-------------------------------------------------------------------   00229300
.***AM.LVER2                                                            00229400
.ZL19L                ANOP  ,                                           00229500
.*-------------------------------------------------------------------   00229600
.*-------------------------------------------------------------------   00229700
.***AM.LVER1                                                            00229800
                      AIF  (&XPLISTVER LT 2).ZL20L                      00229900
.*-------------------------------------------------------------------   00230000
.*                                                                      00230100
&ZOPN                 SETA  &ZOPN+1                                     00230200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMETHOD_PROPORTIONAL'            00230300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00230400
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00230500
&ZOPD(&ZOPN)          SETC  '++ XMETHOD.'                               00230600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PROPORTIONAL'                 00230700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00230800
.*-------------------------------------------------------------------   00230900
.***AM.LVER2                                                            00231000
.ZL20L                ANOP  ,                                           00231100
.*-------------------------------------------------------------------   00231200
.*-------------------------------------------------------------------   00231300
.***AM.LVER1                                                            00231400
                      AIF  (&XPLISTVER LT 2).ZL21L                      00231500
.*-------------------------------------------------------------------   00231600
.*                                                                      00231700
&ZOPN                 SETA  &ZOPN+1                                     00231800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMETHOD_EQUICPU'                 00231900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00232000
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00232100
&ZOPD(&ZOPN)          SETC  '++ XMETHOD.'                               00232200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EQUICPU'                      00232300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00232400
.*-------------------------------------------------------------------   00232500
.***AM.LVER2                                                            00232600
.ZL21L                ANOP  ,                                           00232700
.*-------------------------------------------------------------------   00232800
.*-------------------------------------------------------------------   00232900
.***AM.L10 END OF IWMSRSRS LIST PARAMETERS                              00233000
&ZOPN                 SETA &ZOPN+1                                      00233100
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00233200
&ZOPO(&ZOPN)          SETC 'EQU'                                        00233300
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00233400
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00233500
.*                                                                      00233600
&ZOPN                 SETA &ZOPN+1                                      00233700
&ZOPL(&ZOPN)          SETC ' '                                          00233800
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00233900
&ZOPV(&ZOPN)          SETC '1'                                          00234000
&ZOPD(&ZOPN)          SETC ' '                                          00234100
.*-------------------------------------------------------------------   00234200
.***AL.L12 IWMSRSRS FMT=LIST MF=S!L PARAMETERS                          00234300
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00234400
.*                                                                      00234500
&ZOPN                 SETA  &ZOPN+1                                     00234600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00234700
&ZOPO(&ZOPN)          SETC  'DC'                                        00234800
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00234900
&ZOPD(&ZOPN)          SETC  '++ IWMSRSRS ARG PARMS'                     00235000
.*                                                                      00235100
.ZLMFSLX              ANOP  ,                                           00235200
.*-------------------------------------------------------------------   00235300
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00235400
&ZPLLEN               SETA 36                                           00235500
.*                                                                      00235600
                      AIF  (&XPLISTVER LT 1).ZLLEN2Z                    00235700
&ZPLLEN               SETA 44                                           00235800
.ZLLEN2Z              ANOP  ,                                           00235900
.*                                                                      00236000
                      AIF  (&XPLISTVER LT 2).ZLLEN3Z                    00236100
&ZPLLEN               SETA 57                                           00236200
.ZLLEN3Z              ANOP  ,                                           00236300
.*                                                                      00236400
.******************************************************************     00236500
.***AI.L01 IWMSRSRS FMT=LIST FILL IN PARAMETER AREA                     00236600
.******************************************************************     00236700
                      ACTR  10000                                       00236800
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00236900
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00237000
&ZCVAL                SETC  'LAE'          XAX MODE                     00237100
.ZIMFXA               ANOP ,                                            00237200
.*                                                                      00237300
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00237400
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00237500
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00237600
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00237700
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00237800
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00237900
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00238000
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00238100
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00238200
&ZOPN                 SETA  &ZOPN+1                                     00238300
&ZOPL(&ZOPN)          SETC  ' '                                         00238400
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00238500
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00238600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00238700
                      AGO   .ZIMFNX                                     00238800
.*                                                                      00238900
.ZIMFN2               ANOP ,                                            00239000
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00239100
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00239200
&ZOPN                 SETA  &ZOPN+1                                     00239300
&ZOPL(&ZOPN)          SETC  ' '                                         00239400
&ZOPO(&ZOPN)          SETC  'LAE'                                       00239500
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00239600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00239700
                      AGO   .ZIMFNX                                     00239800
.ZIMFNX1              ANOP ,                                            00239900
&ZOPN                 SETA  &ZOPN+1                                     00240000
&ZOPL(&ZOPN)          SETC  ' '                                         00240100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00240200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00240300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00240400
.ZIMFNX               ANOP ,                                            00240500
.********************************************************************   00240600
.***AI.L02 IWMSRSRS FMT=LIST INITIALIZE PARAMETER AREA                  00240700
.********************************************************************   00240800
.***AI.L03 MF=(SLE)                                                     00240900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00241000
.*                                                                      00241100
&ZOPN                 SETA  &ZOPN+1                                     00241200
&ZOPL(&ZOPN)          SETC  ' '                                         00241300
&ZOPO(&ZOPN)          SETC  'XC'                                        00241400
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00241500
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00241600
.ZIMFLX               ANOP  ,                                           00241700
.*-------------------------------------------------------------------   00241800
.***AI.L04B XVERSION XL1                                                00241900
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00242000
&ZOPN                 SETA  &ZOPN+1                                     00242100
&ZOPL(&ZOPN)          SETC  ' '                                         00242200
&ZOPO(&ZOPN)          SETC  'MVI'                                       00242300
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           00242400
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00242500
.ZIMFVZ               ANOP  ,                                           00242600
.*-------------------------------------------------------------------   00242700
.***AI.L19  XSYSINFO_BLOCK A                                            00242800
                      AIF   ('&ZXSYSINFO_BLOCK' EQ '').ZI3H             00242900
&ZCLNG                SETC  '&XSYSINFO_BLOCK'                           00243000
&ZCGPR                SETC  '14'                                        00243100
         AIF   ('&XSYSINFO_BLOCK'(1,1) EQ '(').ZI3F  IN GPR             00243200
.*                                                                      00243300
&ZOPN                 SETA  &ZOPN+1                                     00243400
&ZOPL(&ZOPN)          SETC  ' '                                         00243500
&ZOPO(&ZOPN)          SETC  'LA'                                        00243600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00243700
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSINFO_BLOCK XSYSINFO_BLOCK'        00243800
.*                                                                      00243900
                      AGO   .ZI3G                                       00244000
.*                                                                      00244100
.ZI3F                 ANOP  ,                                           00244200
&ZCGPR   SETC  '&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2)                 00244300
.*                                                                      00244400
.ZI3G                 ANOP  ,                                           00244500
.*                                                                      00244600
&ZOPN                 SETA  &ZOPN+1                                     00244700
&ZOPL(&ZOPN)          SETC  ' '                                         00244800
&ZOPO(&ZOPN)          SETC  'ST'                                        00244900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4(,1)'                              00245000
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSINFO_BLOCK XSYSINFO_BLOCK'        00245100
.*                                                                      00245200
.ZI3H                 ANOP  ,                                           00245300
.*-------------------------------------------------------------------   00245400
.***AI.L25  XANSLEN F                                                   00245500
                      AIF   ('&ZXANSLEN' EQ '').ZI4E                    00245600
                      AIF   ('&ZXANSLEN' EQ 'OUTPUT').ZI4E              00245700
&ZCGPR                SETC  '&XANSLEN'                                  00245800
.*                                                                      00245900
                      AIF   ('&XANSLEN'(1,1) NE '(').ZI4B               00246000
&ZCGPR   SETC  '0('.'&XANSLEN'(2,K'&XANSLEN-2).')'                      00246100
                      AGO   .ZI4D                                       00246200
.ZI4B                 ANOP  ,                                           00246300
.*                                                                      00246400
&ZC                   SETC  '&XANSLEN'(1,1)                             00246500
                      AIF   (T'&ZC NE 'N').ZI4D                         00246600
&ZC                   SETC  '&XANSLEN'                                  00246700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI4D                00246800
&ZCGPR                SETC  '=FL4''&XANSLEN'''                          00246900
.*                                                                      00247000
.ZI4D                 ANOP  ,                                           00247100
.*                                                                      00247200
&ZOPN                 SETA  &ZOPN+1                                     00247300
&ZOPL(&ZOPN)          SETC  ' '                                         00247400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00247500
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00247600
&ZOPD(&ZOPN)          SETC  '++ &ZXANSLEN XANSLEN'                      00247700
.*                                                                      00247800
.ZI4E                 ANOP  ,                                           00247900
.*-------------------------------------------------------------------   00248000
.***AI.L25  XLOCATION CL18                                              00248100
                      AIF   ('&ZXLOCATION' EQ '').ZI6E                  00248200
                      AIF   ('&ZXLOCATION' EQ 'OUTPUT').ZI6E            00248300
&ZCGPR                SETC  '&XLOCATION'                                00248400
.*                                                                      00248500
                      AIF   ('&XLOCATION'(1,1) NE '(').ZI6B             00248600
&ZCGPR   SETC  '0('.'&XLOCATION'(2,K'&XLOCATION-2).')'                  00248700
.ZI6B                 ANOP  ,                                           00248800
.*                                                                      00248900
&ZOPN                 SETA  &ZOPN+1                                     00249000
&ZOPL(&ZOPN)          SETC  ' '                                         00249100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00249200
&ZOPV(&ZOPN)          SETC  '16(18,1),&ZCGPR'                           00249300
&ZOPD(&ZOPN)          SETC  '++ &ZXLOCATION XLOCATION'                  00249400
.*                                                                      00249500
.ZI6E                 ANOP  ,                                           00249600
.*-------------------------------------------------------------------   00249700
.***AI.LVER01                                                           00249800
                      AIF  (&XPLISTVER LT 1).ZI8Z                       00249900
.*-------------------------------------------------------------------   00250000
.***AI.L04 XPLISTLEN XL2                                                00250100
&ZOPN                 SETA  &ZOPN+1                                     00250200
&ZOPL(&ZOPN)          SETC  ' '                                         00250300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00250400
&ZOPV(&ZOPN)          SETC  '36(2,1),=AL2(&ZPLLEN)'                     00250500
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00250600
.*-------------------------------------------------------------------   00250700
.***AI.LVER02                                                           00250800
.ZI8Z                 ANOP  ,                                           00250900
.*-------------------------------------------------------------------   00251000
.***AI.LVER01                                                           00251100
                      AIF  (&XPLISTVER LT 1).ZI9Z                       00251200
.*-------------------------------------------------------------------   00251300
.***AI.L05 XSRS_OPTIONS BL1                                             00251400
&ZW                   SETC  ''                                          00251500
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00251600
.*-------------------------------------------------------------------   00251700
.***AI.LVER02                                                           00251800
.ZI9Z                 ANOP  ,                                           00251900
.*-------------------------------------------------------------------   00252000
.***AI.LVER01                                                           00252100
                      AIF  (&XPLISTVER LT 1).ZI10Z                      00252200
.*-------------------------------------------------------------------   00252300
.***AI.L08 XSRS_OPTIONS "YES"                                           00252400
.***      BL1'1XXXXXXX'                                                 00252500
         AIF   ('&XEXTENDED_DATA' NE 'YES').ZI10A                       00252600
&ZW                   SETC  '&ZW.1'                                     00252700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00252800
                      AGO   .ZI10C                                      00252900
.*                                                                      00253000
.ZI10A                ANOP  ,                                           00253100
&ZW                   SETC  '&ZW.0'                                     00253200
.ZI10C                ANOP  ,                                           00253300
.*-------------------------------------------------------------------   00253400
.***AI.LVER02                                                           00253500
.ZI10Z                ANOP  ,                                           00253600
.*-------------------------------------------------------------------   00253700
.***AI.LVER01                                                           00253800
                      AIF  (&XPLISTVER LT 1).ZI11Z                      00253900
.*-------------------------------------------------------------------   00254000
.***AI.L08 XSRS_OPTIONS "QUERY"                                         00254100
.***      BL1'X1XXXXXX'                                                 00254200
         AIF   ('&XFUNCTION' NE 'QUERY').ZI11A                          00254300
&ZW                   SETC  '&ZW.1'                                     00254400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00254500
                      AGO   .ZI11C                                      00254600
.*                                                                      00254700
.ZI11A                ANOP  ,                                           00254800
&ZW                   SETC  '&ZW.0'                                     00254900
.ZI11C                ANOP  ,                                           00255000
.*-------------------------------------------------------------------   00255100
.***AI.LVER02                                                           00255200
.ZI11Z                ANOP  ,                                           00255300
.*-------------------------------------------------------------------   00255400
.***AI.LVER01                                                           00255500
                      AIF  (&XPLISTVER LT 1).ZI12Z                      00255600
.*-------------------------------------------------------------------   00255700
.***AI.L08 XSRS_OPTIONS "SPECIFIC"                                      00255800
.***      BL1'XX1XXXXX'                                                 00255900
         AIF   ('&XFUNCTION' NE 'SPECIFIC').ZI12A                       00256000
&ZW                   SETC  '&ZW.1'                                     00256100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00256200
                      AGO   .ZI12C                                      00256300
.*                                                                      00256400
.ZI12A                ANOP  ,                                           00256500
&ZW                   SETC  '&ZW.0'                                     00256600
.ZI12C                ANOP  ,                                           00256700
.*-------------------------------------------------------------------   00256800
.***AI.LVER02                                                           00256900
.ZI12Z                ANOP  ,                                           00257000
.*-------------------------------------------------------------------   00257100
.***AI.LVER01                                                           00257200
                      AIF  (&XPLISTVER LT 1).ZI13Z                      00257300
.*-------------------------------------------------------------------   00257400
.***AI.L08 XSRS_OPTIONS "SPECIFICIMP"                                   00257500
.***      BL1'XXX1XXXX'                                                 00257600
         AIF   ('&XFUNCTION' NE 'SPECIFICIMP').ZI13A                    00257700
&ZW                   SETC  '&ZW.10000'                                 00257800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00257900
                      AGO   .ZI13C                                      00258000
.*                                                                      00258100
.ZI13A                ANOP  ,                                           00258200
&ZW                   SETC  '&ZW.00000'                                 00258300
.ZI13C                ANOP  ,                                           00258400
.*-------------------------------------------------------------------   00258500
.***AI.L11 XSRS_OPTIONS BL1                                             00258600
                      AIF   ('&ZCLNG' NE 'YES').ZI13E  ALL ZERO BITS    00258700
&ZOPN                 SETA  &ZOPN+1                                     00258800
&ZOPL(&ZOPN)          SETC  ' '                                         00258900
&ZOPO(&ZOPN)          SETC  'OI'                                        00259000
&ZOPV(&ZOPN)          SETC  '38(1),B''&ZW'''                            00259100
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00259200
.ZI13E                ANOP  ,                                           00259300
.*-------------------------------------------------------------------   00259400
.***AI.LVER02                                                           00259500
.ZI13Z                ANOP  ,                                           00259600
.*-------------------------------------------------------------------   00259700
.***AI.LVER01                                                           00259800
                      AIF  (&XPLISTVER LT 1).ZI14Z                      00259900
.*-------------------------------------------------------------------   00260000
.***AI.LVER02                                                           00260100
.ZI14Z                ANOP  ,                                           00260200
.*-------------------------------------------------------------------   00260300
.***AI.LVER01                                                           00260400
                      AIF  (&XPLISTVER LT 2).ZI16Z                      00260500
.*-------------------------------------------------------------------   00260600
.***AI.L25  XCOST_ZAAP_ON_CP F                                          00260700
                      AIF   ('&ZXCOST_ZAAP_ON_CP' EQ '').ZI16E          00260800
                      AIF   ('&ZXCOST_ZAAP_ON_CP' EQ 'OUTPUT').ZI16E    00260900
&ZCGPR                SETC  '&XCOST_ZAAP_ON_CP'                         00261000
.*                                                                      00261100
                      AIF   ('&XCOST_ZAAP_ON_CP'(1,1) NE '(').ZI16B     00261200
&ZCGPR   SETC  '0('.'&XCOST_ZAAP_ON_CP'(2,K'&XCOST_ZAAP_ON_CP-2).')'    00261300
                      AGO   .ZI16D                                      00261400
.ZI16B                ANOP  ,                                           00261500
.*                                                                      00261600
&ZC                   SETC  '&XCOST_ZAAP_ON_CP'(1,1)                    00261700
                      AIF   (T'&ZC NE 'N').ZI16D                        00261800
&ZC                   SETC  '&XCOST_ZAAP_ON_CP'                         00261900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI16D               00262000
&ZCGPR                SETC  '=FL4''&XCOST_ZAAP_ON_CP'''                 00262100
.*                                                                      00262200
.ZI16D                ANOP  ,                                           00262300
.*                                                                      00262400
&ZOPN                 SETA  &ZOPN+1                                     00262500
&ZOPL(&ZOPN)          SETC  ' '                                         00262600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00262700
&ZOPV(&ZOPN)          SETC  '44(4,1),&ZCGPR'                            00262800
&ZOPD(&ZOPN)          SETC  '++ &ZXCOST_ZAAP_ON_CP XCOST_ZAAP_ON_CP'    00262900
.*                                                                      00263000
.ZI16E                ANOP  ,                                           00263100
.*-------------------------------------------------------------------   00263200
.***AI.LVER02                                                           00263300
.ZI16Z                ANOP  ,                                           00263400
.*-------------------------------------------------------------------   00263500
.***AI.LVER01                                                           00263600
                      AIF  (&XPLISTVER LT 2).ZI17Z                      00263700
.*-------------------------------------------------------------------   00263800
.***AI.L25  XCOST_ZIIP_ON_CP F                                          00263900
                      AIF   ('&ZXCOST_ZIIP_ON_CP' EQ '').ZI17E          00264000
                      AIF   ('&ZXCOST_ZIIP_ON_CP' EQ 'OUTPUT').ZI17E    00264100
&ZCGPR                SETC  '&XCOST_ZIIP_ON_CP'                         00264200
.*                                                                      00264300
                      AIF   ('&XCOST_ZIIP_ON_CP'(1,1) NE '(').ZI17B     00264400
&ZCGPR   SETC  '0('.'&XCOST_ZIIP_ON_CP'(2,K'&XCOST_ZIIP_ON_CP-2).')'    00264500
                      AGO   .ZI17D                                      00264600
.ZI17B                ANOP  ,                                           00264700
.*                                                                      00264800
&ZC                   SETC  '&XCOST_ZIIP_ON_CP'(1,1)                    00264900
                      AIF   (T'&ZC NE 'N').ZI17D                        00265000
&ZC                   SETC  '&XCOST_ZIIP_ON_CP'                         00265100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI17D               00265200
&ZCGPR                SETC  '=FL4''&XCOST_ZIIP_ON_CP'''                 00265300
.*                                                                      00265400
.ZI17D                ANOP  ,                                           00265500
.*                                                                      00265600
&ZOPN                 SETA  &ZOPN+1                                     00265700
&ZOPL(&ZOPN)          SETC  ' '                                         00265800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00265900
&ZOPV(&ZOPN)          SETC  '48(4,1),&ZCGPR'                            00266000
&ZOPD(&ZOPN)          SETC  '++ &ZXCOST_ZIIP_ON_CP XCOST_ZIIP_ON_CP'    00266100
.*                                                                      00266200
.ZI17E                ANOP  ,                                           00266300
.*-------------------------------------------------------------------   00266400
.***AI.LVER02                                                           00266500
.ZI17Z                ANOP  ,                                           00266600
.*-------------------------------------------------------------------   00266700
.***AI.LVER01                                                           00266800
                      AIF  (&XPLISTVER LT 2).ZI18Z                      00266900
.*-------------------------------------------------------------------   00267000
.***AI.L25  XIL_WEIGHTING F                                             00267100
                      AIF   ('&ZXIL_WEIGHTING' EQ '').ZI18E             00267200
                      AIF   ('&ZXIL_WEIGHTING' EQ 'OUTPUT').ZI18E       00267300
&ZCGPR                SETC  '&XIL_WEIGHTING'                            00267400
         AIF   ('&XIL_WEIGHTING' EQ '0').ZI18E                          00267500
         AIF   ('&XIL_WEIGHTING' EQ '0').ZI18E                          00267600
.*                                                                      00267700
                      AIF   ('&XIL_WEIGHTING'(1,1) NE '(').ZI18B        00267800
&ZCGPR   SETC  '0('.'&XIL_WEIGHTING'(2,K'&XIL_WEIGHTING-2).')'          00267900
                      AGO   .ZI18D                                      00268000
.ZI18B                ANOP  ,                                           00268100
.*                                                                      00268200
&ZC                   SETC  '&XIL_WEIGHTING'(1,1)                       00268300
                      AIF   (T'&ZC NE 'N').ZI18D                        00268400
&ZC                   SETC  '&XIL_WEIGHTING'                            00268500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI18D               00268600
&ZCGPR                SETC  '=FL4''&XIL_WEIGHTING'''                    00268700
.*                                                                      00268800
.ZI18D                ANOP  ,                                           00268900
.*                                                                      00269000
&ZOPN                 SETA  &ZOPN+1                                     00269100
&ZOPL(&ZOPN)          SETC  ' '                                         00269200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00269300
&ZOPV(&ZOPN)          SETC  '52(4,1),&ZCGPR'                            00269400
&ZOPD(&ZOPN)          SETC  '++ &ZXIL_WEIGHTING XIL_WEIGHTING'          00269500
.*                                                                      00269600
.ZI18E                ANOP  ,                                           00269700
.*-------------------------------------------------------------------   00269800
.***AI.LVER02                                                           00269900
.ZI18Z                ANOP  ,                                           00270000
.*-------------------------------------------------------------------   00270100
.***AI.LVER01                                                           00270200
                      AIF  (&XPLISTVER LT 2).ZI19Z                      00270300
.*-------------------------------------------------------------------   00270400
.***AI.L05 XEQUICPU_OPTIONS BL1                                         00270500
&ZW                   SETC  ''                                          00270600
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00270700
.*-------------------------------------------------------------------   00270800
.***AI.LVER02                                                           00270900
.ZI19Z                ANOP  ,                                           00271000
.*-------------------------------------------------------------------   00271100
.***AI.LVER01                                                           00271200
                      AIF  (&XPLISTVER LT 2).ZI20Z                      00271300
.*-------------------------------------------------------------------   00271400
.***AI.L08 XEQUICPU_OPTIONS "PROPORTIONAL"                              00271500
.***      BL1'1XXXXXXX'                                                 00271600
         AIF   ('&XMETHOD' NE 'PROPORTIONAL').ZI20A                     00271700
&ZW                   SETC  '&ZW.1'                                     00271800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00271900
                      AGO   .ZI20C                                      00272000
.*                                                                      00272100
.ZI20A                ANOP  ,                                           00272200
&ZW                   SETC  '&ZW.0'                                     00272300
.ZI20C                ANOP  ,                                           00272400
.*-------------------------------------------------------------------   00272500
.***AI.LVER02                                                           00272600
.ZI20Z                ANOP  ,                                           00272700
.*-------------------------------------------------------------------   00272800
.***AI.LVER01                                                           00272900
                      AIF  (&XPLISTVER LT 2).ZI21Z                      00273000
.*-------------------------------------------------------------------   00273100
.***AI.L08 XEQUICPU_OPTIONS "EQUICPU"                                   00273200
.***      BL1'X1XXXXXX'                                                 00273300
         AIF   ('&XMETHOD' NE 'EQUICPU').ZI21A                          00273400
&ZW                   SETC  '&ZW.1000000'                               00273500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00273600
                      AGO   .ZI21C                                      00273700
.*                                                                      00273800
.ZI21A                ANOP  ,                                           00273900
&ZW                   SETC  '&ZW.0000000'                               00274000
.ZI21C                ANOP  ,                                           00274100
.*-------------------------------------------------------------------   00274200
.***AI.L11 XEQUICPU_OPTIONS BL1                                         00274300
                      AIF   ('&ZCLNG' NE 'YES').ZI21E  ALL ZERO BITS    00274400
&ZOPN                 SETA  &ZOPN+1                                     00274500
&ZOPL(&ZOPN)          SETC  ' '                                         00274600
&ZOPO(&ZOPN)          SETC  'OI'                                        00274700
&ZOPV(&ZOPN)          SETC  '56(1),B''&ZW'''                            00274800
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00274900
.ZI21E                ANOP  ,                                           00275000
.*-------------------------------------------------------------------   00275100
.***AI.LVER02                                                           00275200
.ZI21Z                ANOP  ,                                           00275300
.*-------------------------------------------------------------------   00275400
&ZOPN1                SETA &ZOPN                                        00275500
.*******************************************************************    00275600
.***  PROCESS IWMSRSRS OUTPUT PARAMETERS                                00275700
.*******************************************************************    00275800
                      ACTR  10000                                       00275900
.*------------------------------------------------------------------    00276000
.***AO.L02 XQUERYLEN F                                                  00276100
         AIF   ('&ZXQUERYLEN' EQ 'OUTPUT').ZO5A  OUTPUT                 00276200
         AIF   ('&ZXQUERYLEN' NE 'INOUT').ZO5C  INOUT                   00276300
.ZO5A    AIF   ('&XQUERYLEN'(1,1) NE '(').ZO5B  ADDR IN GPR             00276400
&ZCGPR   SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                           00276500
&ZOPN                 SETA  &ZOPN+1                                     00276600
&ZOPL(&ZOPN)          SETC  ' '                                         00276700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00276800
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),12(1)'                         00276900
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00277000
                      AGO   .ZO5C                                       00277100
.*                                                                      00277200
.ZO5B                 ANOP  ,                                           00277300
&ZAWRK   SETA  K'&XQUERYLEN                                             00277400
         AIF   ('&XQUERYLEN'(&ZAWRK,1) NE ')').ZO5G                     00277500
&ZN      SETA  2                                                        00277600
.ZO5H    ANOP                                                           00277700
         AIF   (&ZN GE &ZAWRK).ZO5G                                     00277800
         AIF   ('&XQUERYLEN'(&ZN,1) NE '(').ZO5I                        00277900
&ZC      SETC  '&XQUERYLEN'(1,&ZN).'4'.','                              00278000
&ZC      SETC  '&ZC'.'&XQUERYLEN'(&ZN+1,&ZAWRK-&ZN).',12(1)'            00278100
         AGO   .ZO5J                                                    00278200
.ZO5I    ANOP                                                           00278300
&ZN      SETA  &ZN+1                                                    00278400
         AGO   .ZO5H                                                    00278500
.ZO5G    ANOP                                                           00278600
&ZC      SETC  '&XQUERYLEN.(4),12(1)'                                   00278700
.ZO5J    ANOP                                                           00278800
&ZOPN                 SETA  &ZOPN+1                                     00278900
&ZOPL(&ZOPN)          SETC  ' '                                         00279000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00279100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00279200
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00279300
.ZO5C                 ANOP  ,                                           00279400
.*------------------------------------------------------------------    00279500
.***AO.LVER01                                                           00279600
                      AIF  (&XPLISTVER LT 1).ZO15Z  PLVER               00279700
.*------------------------------------------------------------------    00279800
.***AO.L02 XENTRY_COUNT F                                               00279900
         AIF   ('&ZXENTRY_COUNT' EQ 'OUTPUT').ZO15A  OUTPUT             00280000
         AIF   ('&ZXENTRY_COUNT' NE 'INOUT').ZO15C  INOUT               00280100
.ZO15A    AIF   ('&XENTRY_COUNT'(1,1) NE '(').ZO15B  ADDR IN GPR        00280200
&ZCGPR   SETC  '&XENTRY_COUNT'(2,K'&XENTRY_COUNT-2)                     00280300
&ZOPN                 SETA  &ZOPN+1                                     00280400
&ZOPL(&ZOPN)          SETC  ' '                                         00280500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00280600
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),40(1)'                         00280700
&ZOPD(&ZOPN)          SETC  '++ XENTRY_COUNT F'                         00280800
                      AGO   .ZO15C                                      00280900
.*                                                                      00281000
.ZO15B                ANOP  ,                                           00281100
&ZAWRK   SETA  K'&XENTRY_COUNT                                          00281200
         AIF   ('&XENTRY_COUNT'(&ZAWRK,1) NE ')').ZO15G                 00281300
&ZN      SETA  2                                                        00281400
.ZO15H    ANOP                                                          00281500
         AIF   (&ZN GE &ZAWRK).ZO15G                                    00281600
         AIF   ('&XENTRY_COUNT'(&ZN,1) NE '(').ZO15I                    00281700
&ZC      SETC  '&XENTRY_COUNT'(1,&ZN).'4'.','                           00281800
&ZC      SETC  '&ZC'.'&XENTRY_COUNT'(&ZN+1,&ZAWRK-&ZN).',40(1)'         00281900
         AGO   .ZO15J                                                   00282000
.ZO15I    ANOP                                                          00282100
&ZN      SETA  &ZN+1                                                    00282200
         AGO   .ZO15H                                                   00282300
.ZO15G    ANOP                                                          00282400
&ZC      SETC  '&XENTRY_COUNT.(4),40(1)'                                00282500
.ZO15J    ANOP                                                          00282600
&ZOPN                 SETA  &ZOPN+1                                     00282700
&ZOPL(&ZOPN)          SETC  ' '                                         00282800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00282900
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00283000
&ZOPD(&ZOPN)          SETC  '++ XENTRY_COUNT F'                         00283100
.ZO15C                ANOP  ,                                           00283200
.*------------------------------------------------------------------    00283300
.***AO.LVER02                                                           00283400
.ZO15Z                ANOP  ,                                           00283500
.*******************************************************************    00283600
.***AO.X02  RETURN CODE PROCESSING                                      00283700
.*******************************************************************    00283800
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00283900
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00284000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00284100
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00284200
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00284300
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00284400
&ZOPN                 SETA  &ZOPN+1                                     00284500
&ZOPL(&ZOPN)          SETC  ' '                                         00284600
&ZOPO(&ZOPN)          SETC  'ST'                                        00284700
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00284800
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00284900
                      AGO   .ZMRETX                                     00285000
.*                                                                      00285100
.ZMRET2               ANOP  ,                                           00285200
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00285300
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00285400
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00285500
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00285600
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00285700
&ZOPN                 SETA  &ZOPN+1                                     00285800
&ZOPL(&ZOPN)          SETC  ' '                                         00285900
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00286000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00286100
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00286200
.ZMRETX               ANOP  ,                                           00286300
.*******************************************************************    00286400
.***AO.X03  REASON CODE PROCESSING                                      00286500
.*******************************************************************    00286600
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00286700
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00286800
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00286900
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00287000
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00287100
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00287200
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00287300
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00287400
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00287500
&ZOPN                 SETA  &ZOPN+1                                     00287600
&ZOPL(&ZOPN)          SETC  ' '                                         00287700
&ZOPO(&ZOPN)          SETC  'ST'                                        00287800
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00287900
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00288000
                      AGO   .ZMRSNX                                     00288100
.*                                                                      00288200
.ZMRSN2               ANOP  ,                                           00288300
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00288400
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00288500
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00288600
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00288700
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00288800
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00288900
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00289000
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00289100
&ZOPN                 SETA  &ZOPN+1                                     00289200
&ZOPL(&ZOPN)          SETC  ' '                                         00289300
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00289400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00289500
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00289600
.ZMRSNX               ANOP  ,                                           00289700
.*******************************************************************    00289800
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00289900
.*******************************************************************    00290000
.ZMFLX                ANOP  ,              MF=L PROCESSING              00290100
.*******************************************************************    00290200
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00290300
.*******************************************************************    00290400
                      ACTR  10000                                       00290500
.*                                                                      00290600
                      LCLA  &ZLC           COLUMN POSITION              00290700
                      LCLA  &ZOPX          LIST TABLE INDEX             00290800
                      LCLC  &ZLL           LABEL                        00290900
                      LCLC  &ZLOP          OPERATION                    00291000
                      LCLC  &ZLV           VALUE                        00291100
                      LCLC  &ZLD           DESCRIPTION                  00291200
.*                                                                      00291300
&ZOPX                 SETA  1                                           00291400
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00291500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00291600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00291700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00291800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00291900
                      AIF   (K'&ZLD LE 0).ZL5                           00292000
&ZLC                  SETA  35             COMMENT COLUMN               00292100
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00292200
&ZLC                  SETA  33             COMMMENT COLUMN              00292300
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00292400
&ZLV                  SETC  '&ZLV'.' '                                  00292500
                      AGO   .ZL3                                        00292600
.*                                                                      00292700
.ZL4                  ANOP  ,                                           00292800
&ZLV                  SETC  '&ZLV'.' '                                  00292900
.ZL5                  ANOP  ,                                           00293000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00293100
.*                                                                      00293200
&ZLL     &ZLOP &ZLV                                                     00293300
.*                                                                      00293400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00293500
                      AGO   .ZL2           CONTINUE LOOPING             00293600
.*                                                                      00293700
.ZLX                  ANOP  ,                                           00293800
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00293900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00294000
         L     14,16(0,0)              GET CVT ADDRESS                  00294100
         L     14,772(14,0)            GET SFT ADDRESS                  00294200
         L     14,380(14,0)            GET LX FOR SERVICE ROUTINE       00294300
         LA    15,30                   GET EX FOR SERVICE ROUTINE       00294400
         OR    14,15                   GET PC NUMBER                    00294500
         PC    0(14)                                                    00294600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00294700
.ZLINKX               ANOP  ,                                           00294800
.*******************************************************************    00294900
.***AP.X01  FORMAT GENERATED CODE                                       00295000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00295100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00295200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00295300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00295400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00295500
                      AIF   (K'&ZLD LE 0).ZL51                          00295600
&ZLC                  SETA  35             COMMENT COLUMN               00295700
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00295800
&ZLC                  SETA  33             COMMENT COLUMN               00295900
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00296000
&ZLV                  SETC  '&ZLV'.' '                                  00296100
                      AGO   .ZL31                                       00296200
.*                                                                      00296300
.ZL41                 ANOP  ,                                           00296400
&ZLV                  SETC  '&ZLV'.' '                                  00296500
.ZL51                 ANOP  ,                                           00296600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00296700
.*                                                                      00296800
&ZLL     &ZLOP &ZLV                                                     00296900
.*                                                                      00297000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00297100
                      AGO   .ZL21          CONTINUE LOOPING             00297200
.*                                                                      00297300
.ZLX1                 ANOP  ,                                           00297400
.*******************************************************************    00297500
.***AP.X02  END OF IWMSRSRS MACRO                                       00297600
&ZIWMSRSRS            SETC  'YES'          SET IWMSRSRS USED            00297700
         POP   PRINT                                                    00297800
*                                            IWMSRSRS-2                 00297900
         SPACE 1                                                        00298000
.ZLX2                 ANOP  ,                                           00298100
         MEND                                                           00298200
**********************************************************************/ 00298300
*/**** START OF SPECIFICATIONS **************************************** 00298400
*                                                                     * 00298500
*                                                                     * 00298600
*01* MACRO NAME:  IWMSRSRS                              -22/03/14-<2> * 00298700
*                                                                     * 00298800
*                                                                     * 00298900
*01* DESCRIPTIVE NAME:  Sysplex Routing Information                   * 00299000
*                                                                     * 00299100
*01* PROPRIETARY STATEMENT:                                           * 00299200
*                                                                     * 00299300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00299400
*     5650-ZOS COPYRIGHT IBM CORP. 1997, 2021                         * 00299500
*                                                                     * 00299600
* STATUS= HBB77D0                                                     * 00299700
*                                                                     * 00299800
*                                                                     * 00299900
*                                                                     * 00300000
*01* FUNCTION:                                                        * 00300100
*       See the IWMSRSRS macro prologue for details.                  * 00300200
*                                                                     * 00300300
*01* INPUT:                                                           * 00300400
*                                                                     * 00300500
*            ?IWMSRSRS     SYSINFO_BLOCK                              * 00300600
*                                        (xsysinfo_block)             * 00300700
*                        ÐÝEXTENDED_DATA(NO)¨                         * 00300800
*                        ¿ÝEXTENDED_DATA(YES)¨                        * 00300900
*                          ANSLEN(xanslen)                            * 00301000
*                         ÝENTRY_COUNT(xentry_count)¨                 * 00301100
*                          QUERYLEN(xquerylen)                        * 00301200
*                          LOCATION(xlocation)                        * 00301300
*                        ÐÝFUNCTION(SELECT)¨                          * 00301400
*                        ÔÝFUNCTION(QUERY)¨                           * 00301500
*                        ÔÝFUNCTION(SPECIFIC)¨                        * 00301600
*                        ¿ÝFUNCTION(SPECIFICIMP)¨                     * 00301700
*                         ÝMETHOD(»PROPORTIONAL!EQUICPUº)¨            * 00301800
*                         ÝCOST_ZAAP_ON_CP(»xcost_zaap_on_cp!1º)¨     * 00301900
*                         ÝCOST_ZIIP_ON_CP(»xcost_ziip_on_cp!1º)¨     * 00302000
*                         ÝIL_WEIGHTING(»xil_weighting!0º)¨           * 00302100
*                         ÝRETCODE(xretcode)¨                         * 00302200
*                         ÝRSNCODE(xrsncode)¨                         * 00302300
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00302400
*                        ÐÝMF(S)¨                                     * 00302500
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00302600
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00302700
*                                                                     * 00302800
****** END OF SPECIFICATIONS *****************************************/ 00302900
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00303000
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00303100
*  ANS('/* ? IWMSRSRS '!!MACLIST!!' ')                                  00303200
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00303300
*                                                                       00303400
*  DCL ZELO  FIXED;                                                     00303500
*  DCL ZECOL FIXED;                                                     00303600
*                                                                       00303700
*  ZELO=1;     /* STARTING COLUMN */                                    00303800
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00303900
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00304000
*    IF ZECOL>0                                                         00304100
*      THEN                                                             00304200
*        DO;   /* PARENTHESIS FOUND */                                  00304300
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00304400
*             NORESCAN COL(MACLMAR+5);                                  00304500
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00304600
*        END;                                                           00304700
*      ELSE                                                             00304800
*        DO;   /* REMAINING KEYS */                                     00304900
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00305000
*             NORESCAN COL(MACLMAR+5);                                  00305100
*          ZELO=LENGTH(MACKEYS)+1;                                      00305200
*        END;                                                           00305300
*  END;                                                                 00305400
*  ANS(' -22/03/14-2- */')                                              00305500
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00305600
*/********************************************************************/ 00305700
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00305800
*/********************************************************************/ 00305900
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00306000
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00306100
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00306200
*                                                                       00306300
*  DCL   ZIWMSRSRS CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00306400
*  DEACT ZIWMSRSRS;                                                     00306500
*                                                                       00306600
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00306700
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00306800
*                                                                       00306900
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00307000
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00307100
*                                                                       00307200
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00307300
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00307400
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00307500
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00307600
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00307700
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00307800
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00307900
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00308000
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00308100
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00308200
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00308300
*                                                                       00308400
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00308500
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00308600
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00308700
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00308800
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00308900
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00309000
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00309100
*/*******************************************************************/  00309200
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00309300
*/*******************************************************************/  00309400
*  DCL   XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00309500
*  DEACT XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00309600
*  DCL   ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00309700
*  DEACT ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00309800
*  DCL   XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00309900
*  DEACT XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00310000
*  DCL   ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00310100
*  DEACT ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00310200
*  DCL XANSLEN;  DEACT XANSLEN;    /***PV.XVAR02 INPUT NAME */          00310300
*  DCL ZXANSLEN; DEACT ZXANSLEN;   /***INPUT/OUTPUT CONTROL */          00310400
*  DCL   XENTRY_COUNT;             /***PV.XVAR03 OUTPUT NAME */         00310500
*  DEACT XENTRY_COUNT;             /***PV.XVAR03 OUTPUT NAME */         00310600
*  DCL   ZXENTRY_COUNT;            /***INPUT/OUTPUT CONTROL */          00310700
*  DEACT ZXENTRY_COUNT;            /***INPUT/OUTPUT CONTROL */          00310800
*  DCL XQUERYLEN;  DEACT XQUERYLEN;  /***PV.XVAR02 OUTPUT NAME */       00310900
*  DCL ZXQUERYLEN; DEACT ZXQUERYLEN;  /***INPUT/OUTPUT CONTROL */       00311000
*  DCL XLOCATION;  DEACT XLOCATION;  /***PV.XVAR02 INPUT NAME */        00311100
*  DCL ZXLOCATION; DEACT ZXLOCATION;  /***INPUT/OUTPUT CONTROL */       00311200
*  DCL XFUNCTION;  DEACT XFUNCTION;  /***PV.XVAR02 INPUT VALUE */       00311300
*  DCL ZXFUNCTION; DEACT ZXFUNCTION;  /***INPUT/OUTPUT CONTROL */       00311400
*  DCL XMETHOD;  DEACT XMETHOD;    /***PV.XVAR02 INPUT VALUE */         00311500
*  DCL ZXMETHOD; DEACT ZXMETHOD;   /***INPUT/OUTPUT CONTROL */          00311600
*  DCL   XCOST_ZAAP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00311700
*  DEACT XCOST_ZAAP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00311800
*  DCL   ZXCOST_ZAAP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00311900
*  DEACT ZXCOST_ZAAP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00312000
*  DCL   XCOST_ZIIP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00312100
*  DEACT XCOST_ZIIP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00312200
*  DCL   ZXCOST_ZIIP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00312300
*  DEACT ZXCOST_ZIIP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00312400
*  DCL   XIL_WEIGHTING;            /***PV.XVAR03 INPUT NAME */          00312500
*  DEACT XIL_WEIGHTING;            /***PV.XVAR03 INPUT NAME */          00312600
*  DCL   ZXIL_WEIGHTING;           /***INPUT/OUTPUT CONTROL */          00312700
*  DEACT ZXIL_WEIGHTING;           /***INPUT/OUTPUT CONTROL */          00312800
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00312900
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00313000
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00313100
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00313200
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00313300
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00313400
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00313500
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00313600
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00313700
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00313800
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00313900
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00314000
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00314100
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00314200
*/********************************************************************/ 00314300
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00314400
*/********************************************************************/ 00314500
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00314600
*    XPLISTVER=2;                                                       00314700
*  ELSE                                                                 00314800
*    XPLISTVER=0;                                                       00314900
*  IF EXTENDED_DATA^='' & XPLISTVER<1                                   00315000
*    THEN                                                               00315100
*      XPLISTVER=1;                                                     00315200
*  IF ENTRY_COUNT^='' & XPLISTVER<1                                     00315300
*    THEN                                                               00315400
*      XPLISTVER=1;                                                     00315500
*  IF FUNCTION^='' & XPLISTVER<1                                        00315600
*    THEN                                                               00315700
*      XPLISTVER=1;                                                     00315800
*  IF METHOD^='' & XPLISTVER<2                                          00315900
*    THEN                                                               00316000
*      XPLISTVER=2;                                                     00316100
*  IF COST_ZAAP_ON_CP^='' & XPLISTVER<2                                 00316200
*    THEN                                                               00316300
*      XPLISTVER=2;                                                     00316400
*  IF COST_ZIIP_ON_CP^='' & XPLISTVER<2                                 00316500
*    THEN                                                               00316600
*      XPLISTVER=2;                                                     00316700
*  IF IL_WEIGHTING^='' & XPLISTVER<2                                    00316800
*    THEN                                                               00316900
*      XPLISTVER=2;                                                     00317000
*  IF PLISTVER^=''                                                      00317100
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00317200
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00317300
*    THEN                                                               00317400
*      DO;                                                              00317500
*                                                                       00317600
*        ZCVAL='';                           /* ERROR FLAG */           00317700
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00317800
*          THEN                                                         00317900
*            DO;                                                        00318000
*              ZMS=' 8, THE "PLISTVER" KEY'!!                           00318100
*                  ' MUST CONTAIN ONE'!!                                00318200
*                  ' (OR MORE) ARGUMENT(S).';                           00318300
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00318400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00318500
*              ZMACRET=8;                    /* MACRO ERROR */          00318600
*              ZCVAL='NO_ARGUMENT';                                     00318700
*            END;                                                       00318800
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00318900
*          THEN                                                         00319000
*            DO;                                                        00319100
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00319200
*                  PLISTVER!!                                           00319300
*                  '" "PLISTVER"'!!                                     00319400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00319500
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00319600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00319700
*              ZMACRET=8;                    /* MACRO ERROR */          00319800
*            END;                                                       00319900
*                                                                       00320000
*        ZC=PLISTVER(1);                                                00320100
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00320200
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00320300
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00320400
*            THEN                                                       00320500
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00320600
*        END;                                                           00320700
*        IF ZCVAL=''                                                    00320800
*          THEN                                                         00320900
*            DO;                             /* CHECK RANGE LIMITS */   00321000
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00321100
*              THEN                                                     00321200
*                XPLISTVER=FIXED(PLISTVER(1));                          00321300
*              ELSE                                                     00321400
*                DO;                                                    00321500
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00321600
*                    PLISTVER(1)!!                                      00321700
*                  ', BUT PLISTVER OF '!!                               00321800
*                    CHAR(XPLISTVER)!!                                  00321900
*                  ' IS REQUIRED.';                                     00322000
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00322100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00322200
*              ZMACRET=8;                    /* MACRO ERROR */          00322300
*                END;                                                   00322400
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00322500
*                 XPLISTVER>2                /* HIGH LIMIT */           00322600
*                THEN                                                   00322700
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00322800
*            END;                                                       00322900
*        IF ZCVAL^=''                                                   00323000
*          THEN                                                         00323100
*            DO;                             /* RANGE ERROR */          00323200
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00323300
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00323400
*                  PLISTVER!!                                           00323500
*                  '" THE RANGE IS "0-2"'!!                             00323600
*                  ' FOR ARGUMENT 1.';                                  00323700
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00323800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00323900
*              ZMACRET=8;                    /* MACRO ERROR */          00324000
*            END;                                                       00324100
*      END;                                                             00324200
*                                                                       00324300
*/********************************************************************/ 00324400
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00324500
*/********************************************************************/ 00324600
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00324700
*  XMF='';                                                              00324800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00324900
*  IF TRANSLATE(MF(1))                                                  00325000
*              = 'S'                         /* CHECK FOR KEYWORD */    00325100
*    THEN                                                               00325200
*      DO;                                                              00325300
*        XMF='S';                            /* SET XVARIABLE */        00325400
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00325500
*          THEN                                                         00325600
*            DO;                                                        00325700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00325800
*                  MF!!                                                 00325900
*                  '" "MF"'!!                                           00326000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00326100
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00326200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00326300
*              ZMACRET=8;                    /* MACRO ERROR */          00326400
*            END;                                                       00326500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00326600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00326700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00326800
*  IF TRANSLATE(MF(1))                                                  00326900
*              = 'L'                         /* CHECK FOR KEYWORD */    00327000
*    THEN                                                               00327100
*      DO;                                                              00327200
*        XMF='L';                            /* SET XVARIABLE */        00327300
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00327400
*          THEN                                                         00327500
*            DO;                                                        00327600
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00327700
*                  MF!!                                                 00327800
*                  '" "MF"'!!                                           00327900
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00328000
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00328100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00328200
*              ZMACRET=8;                    /* MACRO ERROR */          00328300
*            END;                                                       00328400
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00328500
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00328600
*        IF PLISTVER ^= ''                                              00328700
*          THEN                                                         00328800
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00328900
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00329000
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00329100
*          THEN                                                         00329200
*            DO;                                                        00329300
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00329400
*                  ' CAN ONLY HAVE'!!                                   00329500
*                  ' THE "PLISTVER" KEY'!!                              00329600
*                  ' SPECIFIED ON THE INVOCATION.';                     00329700
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00329800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00329900
*              ZMACRET=8;                    /* MACRO ERROR */          00330000
*            END;                                                       00330100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00330200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00330300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00330400
*   THEN                                                                00330500
*    DO;                                     /* KEY IS REQUIRED */      00330600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00330700
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00330800
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00330900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00331000
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00331100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00331200
*        ZMACRET=8;                          /* MACRO ERROR */          00331300
*    END;                                                               00331400
*  ELSE                                                                 00331500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00331600
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00331700
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00331800
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00331900
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00332000
*    THEN                                                               00332100
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00332200
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00332300
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00332400
*     LENGTH(XMFATTR)>60                                                00332500
*    THEN                                                               00332600
*      DO;                                                              00332700
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00332800
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00332900
*            MF!!                                                       00333000
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00333100
*            ' LENGTH OF 60 CHARACTERS. ';                              00333200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00333300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00333400
*        ZMACRET=8;                          /* MACRO ERROR */          00333500
*      END;                                                             00333600
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00333700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00333800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00333900
*  IF TRANSLATE(MF(1))                                                  00334000
*              = 'E'                         /* CHECK FOR KEYWORD */    00334100
*    THEN                                                               00334200
*      DO;                                                              00334300
*        XMF='E';                            /* SET XVARIABLE */        00334400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00334500
*          THEN                                                         00334600
*            DO;                                                        00334700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00334800
*                  MF!!                                                 00334900
*                  '" "MF"'!!                                           00335000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00335100
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00335200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00335300
*              ZMACRET=8;                    /* MACRO ERROR */          00335400
*            END;                                                       00335500
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00335600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00335700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00335800
*   THEN                                                                00335900
*    DO;                                     /* KEY IS REQUIRED */      00336000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00336100
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00336200
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00336300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00336400
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00336500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00336600
*        ZMACRET=8;                          /* MACRO ERROR */          00336700
*    END;                                                               00336800
*  ELSE                                                                 00336900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00337000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00337100
*  XMFSCK='';                                /* RESET XVARIABLE */      00337200
*  IF TRANSLATE(MF(3))                                                  00337300
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00337400
*    THEN                                                               00337500
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00337600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00337700
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00337800
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00337900
*    THEN                                                               00338000
*      DO;                                   /* KEYWORD NOT ENTERED */  00338100
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00338200
*        IF MF(3)^=''                                                   00338300
*          THEN                                                         00338400
*            DO;                                                        00338500
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00338600
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00338700
*                  MF!!'"'!!                                            00338800
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00338900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00339000
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00339100
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00339200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00339300
*              ZMACRET=8;                    /* MACRO ERROR */          00339400
*            END;                                                       00339500
*      END;                                                             00339600
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00339700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00339800
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00339900
*  IF MF='MF'                                                           00340000
*    ! MF='()'                               /*CHECK ENTRY*/            00340100
*     THEN                                                              00340200
*       DO;                                                             00340300
*              ZMS=' 8, THE "MF" KEY'!!                                 00340400
*                  ' MUST CONTAIN ONE'!!                                00340500
*                  ' (OR MORE) ARGUMENT(S).';                           00340600
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00340700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00340800
*              ZMACRET=8;                    /* MACRO ERROR */          00340900
*       END;                                                            00341000
*  ELSE                                                                 00341100
*    DO;                                                                00341200
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00341300
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00341400
*        THEN                                                           00341500
*          DO;                               /* KEYWORD NOT ENTERED */  00341600
*            XMF='S';                        /* SET DEFAULT */          00341700
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00341800
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00341900
*              THEN                                                     00342000
*                DO;                                                    00342100
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00342200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00342300
*                  MF!!'"'!!                                            00342400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00342500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00342600
*                  ' "S",'!!                 /* VALID KEYWORD */        00342700
*                  ' "L",'!!                 /* VALID KEYWORD */        00342800
*                  ' OR "E".';               /* VALID KEYWORD */        00342900
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00343000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00343100
*              ZMACRET=8;                    /* MACRO ERROR */          00343200
*                END;                                                   00343300
*          END;                                                         00343400
*    END;                                                               00343500
*/********************************************************************/ 00343600
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00343700
*/********************************************************************/ 00343800
*  IF PLISTVER=''                                                       00343900
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00344000
*    THEN                                                               00344100
*      ZC='ON';                              /* DEFAULT FLAG ON */      00344200
*    ELSE                                                               00344300
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00344400
*/********************************************************************/ 00344500
*/***PD.P02 DEFAULT ECHO                                             */ 00344600
*/********************************************************************/ 00344700
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00344800
*  IF XMF^='L'                                                          00344900
*    THEN                                                               00345000
*      DO;                                   /* FULL SYNTAX CHECK */    00345100
*        ANS('/*DEFAULT(S): */')                                        00345200
*           NORESCAN COL(MACLMAR+5);                                    00345300
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00345400
*  IF XPLISTVER>=1                                                      00345500
*    THEN                                                               00345600
*      DO;                                                              00345700
*  IF EXTENDED_DATA(1)=''                                               00345800
*    THEN                                                               00345900
*      DO;                                                              00346000
*        ANS('/*EXTENDED_DATA(NO)*/')                                   00346100
*            NORESCAN COL(MACLMAR+5);                                   00346200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00346300
*      END;                                                             00346400
*      END;                                                             00346500
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00346600
*  IF XPLISTVER>=1                                                      00346700
*    THEN                                                               00346800
*      DO;                                                              00346900
*  IF FUNCTION(1)=''                                                    00347000
*    THEN                                                               00347100
*      DO;                                                              00347200
*        ANS('/*FUNCTION(SELECT)*/')                                    00347300
*            NORESCAN COL(MACLMAR+5);                                   00347400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00347500
*      END;                                                             00347600
*      END;                                                             00347700
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00347800
*  IF XPLISTVER>=2                                                      00347900
*    THEN                                                               00348000
*      DO;                                                              00348100
*  XMETHOD='PROPORTIONAL';                   /* RESET XVARIABLE */      00348200
*  IF METHOD(1)=''                                                      00348300
*    THEN                                                               00348400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00348500
*  IF TRANSLATE(METHOD(1))                                              00348600
*              = 'PROPORTIONAL'                                         00348700
*    THEN                                                               00348800
*        XMETHOD='';                         /* SET XVARIABLE */        00348900
*      END;                                                             00349000
*  IF XPLISTVER>=2                                                      00349100
*    THEN                                                               00349200
*      DO;                                                              00349300
*  IF TRANSLATE(METHOD(1))                                              00349400
*              = 'EQUICPU'                                              00349500
*    THEN                                                               00349600
*        XMETHOD='';                         /* SET XVARIABLE */        00349700
*      END;                                                             00349800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00349900
*  IF XPLISTVER>=2                                                      00350000
*    THEN                                                               00350100
*      DO;                                                              00350200
*  IF XMETHOD^=''                                                       00350300
*    THEN DO;                                                           00350400
*      ANS('/* METHOD('!!                                               00350500
*          XMETHOD!!                                                    00350600
*          ')*/')                                                       00350700
*          NORESCAN COL(MACLMAR+5);                                     00350800
*      XMETHOD = '';                                                    00350900
*    END;                                                               00351000
*      END;                                                             00351100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00351200
*  XCOST_ZAAP_ON_CP='';                                                 00351300
*  IF COST_ZAAP_ON_CP(1)=''                                             00351400
*    THEN                                                               00351500
*      DO;                                                              00351600
*        XCOST_ZAAP_ON_CP='1';               /* SET DEFAULT */          00351700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00351800
*      END;                                                             00351900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00352000
*  IF XPLISTVER>=2                                                      00352100
*    THEN                                                               00352200
*      DO;                                                              00352300
*  IF XCOST_ZAAP_ON_CP^=''                                              00352400
*    THEN DO;                                                           00352500
*      ANS('/* COST_ZAAP_ON_CP('!!                                      00352600
*          XCOST_ZAAP_ON_CP!!                                           00352700
*          ')*/')                                                       00352800
*          NORESCAN COL(MACLMAR+5);                                     00352900
*      XCOST_ZAAP_ON_CP = '';                                           00353000
*    END;                                                               00353100
*      END;                                                             00353200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00353300
*  XCOST_ZIIP_ON_CP='';                                                 00353400
*  IF COST_ZIIP_ON_CP(1)=''                                             00353500
*    THEN                                                               00353600
*      DO;                                                              00353700
*        XCOST_ZIIP_ON_CP='1';               /* SET DEFAULT */          00353800
*        ZC='ON';                            /* DEFAULT FLAG ON */      00353900
*      END;                                                             00354000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00354100
*  IF XPLISTVER>=2                                                      00354200
*    THEN                                                               00354300
*      DO;                                                              00354400
*  IF XCOST_ZIIP_ON_CP^=''                                              00354500
*    THEN DO;                                                           00354600
*      ANS('/* COST_ZIIP_ON_CP('!!                                      00354700
*          XCOST_ZIIP_ON_CP!!                                           00354800
*          ')*/')                                                       00354900
*          NORESCAN COL(MACLMAR+5);                                     00355000
*      XCOST_ZIIP_ON_CP = '';                                           00355100
*    END;                                                               00355200
*      END;                                                             00355300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00355400
*  XIL_WEIGHTING='';                                                    00355500
*  IF IL_WEIGHTING(1)=''                                                00355600
*    THEN                                                               00355700
*      DO;                                                              00355800
*        XIL_WEIGHTING='0';                  /* SET DEFAULT */          00355900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00356000
*      END;                                                             00356100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00356200
*  IF XPLISTVER>=2                                                      00356300
*    THEN                                                               00356400
*      DO;                                                              00356500
*  IF XIL_WEIGHTING^=''                                                 00356600
*    THEN DO;                                                           00356700
*      ANS('/* IL_WEIGHTING('!!                                         00356800
*          XIL_WEIGHTING!!                                              00356900
*          ')*/')                                                       00357000
*          NORESCAN COL(MACLMAR+5);                                     00357100
*      XIL_WEIGHTING = '';                                              00357200
*    END;                                                               00357300
*      END;                                                             00357400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00357500
*  IF PLISTVER=''                                                       00357600
*    THEN DO;                                                           00357700
*      ANS('/* PLISTVER('!!                                             00357800
*          CHAR(XPLISTVER)!!                                            00357900
*          ')*/')                                                       00358000
*          NORESCAN COL(MACLMAR+5);                                     00358100
*    END;                                                               00358200
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00358300
*    THEN                                                               00358400
*      ANS('/* NONE. */')                                               00358500
*         NORESCAN COL(MACLMAR+5);                                      00358600
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00358700
*      END;                                                             00358800
*/********************************************************************/ 00358900
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00359000
*/********************************************************************/ 00359100
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00359200
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00359300
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00359400
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00359500
*                                                                       00359600
*  IF SYSASCE=''                                                        00359700
*    THEN                                                               00359800
*      DO;                                                              00359900
*        IF SYSSPLV=''                                                  00360000
*          THEN                                                         00360100
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00360200
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00360300
*          THEN                                                         00360400
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00360500
*          ELSE                                                         00360600
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00360700
*      END;                                                             00360800
*/********************************************************************/ 00360900
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00361000
*/********************************************************************/ 00361100
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00361200
*  IF XMF^='L'                                                          00361300
*    THEN                                                               00361400
*      DO;                                   /* FULL SYNTAX CHECK */    00361500
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00361600
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00361700
*    THEN                                                               00361800
*      DO;                                                              00361900
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00362000
*            ' "'!!MACLIST!!'"'!!                                       00362100
*            ' CANNOT BE USED.'!!                                       00362200
*            ' NO POSITIONAL ARGUMENTS'!!                               00362300
*            ' ARE ALLOWED.';                                           00362400
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00362500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00362600
*        ZMACRET=8;                          /* MACRO ERROR */          00362700
*      END;                                                             00362800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00362900
*  IF NUMBER(SYSINFO_BLOCK)>1                /* CHECK POSITIONALS */    00363000
*    THEN                                                               00363100
*      DO;                                                              00363200
*        ZMS=' 8, "SYSINFO_BLOCK'!!          /**KPOSP* MSG*/            00363300
*            SYSINFO_BLOCK!!                                            00363400
*            '" "SYSINFO_BLOCK"'!!                                      00363500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00363600
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00363700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00363800
*        ZMACRET=8;                          /* MACRO ERROR */          00363900
*      END;                                                             00364000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00364100
*  XSYSINFO_BLOCK=SYSINFO_BLOCK(1);          /* SET XVARIABLE */        00364200
*  IF SYSINFO_BLOCK(1)=''                    /* CHECK FOR NULL */       00364300
*   THEN                                                                00364400
*    DO;                                     /* KEY IS REQUIRED */      00364500
*        ZXSYSINFO_BLOCK='';                 /* RESET IN/OUTPUT */      00364600
*        ZMS=' 8,  '!!                                                  00364700
*            ' "SYSINFO_BLOCK" KEY AND ITS'!!                           00364800
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00364900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00365000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00365100
*        ZMACRET=8;                          /* MACRO ERROR */          00365200
*    END;                                                               00365300
*  ELSE                                                                 00365400
*    ZXSYSINFO_BLOCK='INPUT';                /* SET IN/OUTPUT */        00365500
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00365600
*  XEXTENDED_DATA='';                                                   00365700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00365800
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00365900
*              = 'NO'                        /* CHECK FOR KEYWORD */    00366000
*     ! EXTENDED_DATA(1)=''                  /* CHECK FOR NULL */       00366100
*    THEN                                                               00366200
*      DO;                                                              00366300
*        XEXTENDED_DATA='NO';                /* SET XVARIABLE */        00366400
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00366500
*          THEN                                                         00366600
*            DO;                                                        00366700
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KPOSP* MSG*/            00366800
*                  EXTENDED_DATA!!                                      00366900
*                  '" "EXTENDED_DATA"'!!                                00367000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00367100
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00367200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00367300
*              ZMACRET=8;                    /* MACRO ERROR */          00367400
*            END;                                                       00367500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00367600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00367700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00367800
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00367900
*              = 'YES'                       /* CHECK FOR KEYWORD */    00368000
*    THEN                                                               00368100
*      DO;                                                              00368200
*        XEXTENDED_DATA='YES';               /* SET XVARIABLE */        00368300
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00368400
*          THEN                                                         00368500
*            DO;                                                        00368600
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KPOSP* MSG*/            00368700
*                  EXTENDED_DATA!!                                      00368800
*                  '" "EXTENDED_DATA"'!!                                00368900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00369000
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00369100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00369200
*              ZMACRET=8;                    /* MACRO ERROR */          00369300
*            END;                                                       00369400
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00369500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00369600
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00369700
*  IF EXTENDED_DATA='EXTENDED_DATA'                                     00369800
*    ! EXTENDED_DATA='()'                    /*CHECK ENTRY*/            00369900
*     THEN                                                              00370000
*       DO;                                                             00370100
*              ZMS=' 8, THE "EXTENDED_DATA" KEY'!!                      00370200
*                  ' MUST CONTAIN ONE'!!                                00370300
*                  ' (OR MORE) ARGUMENT(S).';                           00370400
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00370500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00370600
*              ZMACRET=8;                    /* MACRO ERROR */          00370700
*       END;                                                            00370800
*  ELSE                                                                 00370900
*    DO;                                                                00371000
*      ZXEXTENDED_DATA='INPUT';              /* SET IN/OUTPUT */        00371100
*      IF XEXTENDED_DATA=''                  /* CHECK FOR KEYWORD */    00371200
*        THEN                                                           00371300
*          DO;                               /* KEYWORD NOT ENTERED */  00371400
*            XEXTENDED_DATA='NO';            /* SET DEFAULT */          00371500
*            IF EXTENDED_DATA(1)^=''         /* CHECK FOR KEYWORD */    00371600
*              THEN                                                     00371700
*                DO;                                                    00371800
*                  ZXEXTENDED_DATA='';       /* RESET IN/OUTPUT */      00371900
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KUKWP* MSG*/            00372000
*                  EXTENDED_DATA!!'"'!!                                 00372100
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00372200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00372300
*                  ' "NO"'!!                 /* VALID KEYWORD */        00372400
*                  ' OR "YES".';             /* VALID KEYWORD */        00372500
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00372600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00372700
*              ZMACRET=8;                    /* MACRO ERROR */          00372800
*                END;                                                   00372900
*          END;                                                         00373000
*    END;                                                               00373100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00373200
*  IF NUMBER(ANSLEN)>1                       /* CHECK POSITIONALS */    00373300
*    THEN                                                               00373400
*      DO;                                                              00373500
*        ZMS=' 8, "ANSLEN'!!                 /**KPOSP* MSG*/            00373600
*            ANSLEN!!                                                   00373700
*            '" "ANSLEN"'!!                                             00373800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00373900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00374000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00374100
*        ZMACRET=8;                          /* MACRO ERROR */          00374200
*      END;                                                             00374300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00374400
*  XANSLEN=ANSLEN(1);                        /* SET XVARIABLE */        00374500
*  IF ANSLEN(1)=''                           /* CHECK FOR NULL */       00374600
*   THEN                                                                00374700
*    DO;                                     /* KEY IS REQUIRED */      00374800
*        ZXANSLEN='';                        /* RESET IN/OUTPUT */      00374900
*        ZMS=' 8,  '!!                                                  00375000
*            ' "ANSLEN" KEY AND ITS'!!                                  00375100
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00375200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00375300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00375400
*        ZMACRET=8;                          /* MACRO ERROR */          00375500
*    END;                                                               00375600
*  ELSE                                                                 00375700
*    ZXANSLEN='INPUT';                       /* SET IN/OUTPUT */        00375800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00375900
*  IF ENTRY_COUNT='ENTRY_COUNT' ! ENTRY_COUNT='()'  /*CHECK ENTRY*/     00376000
*    THEN                                                               00376100
*      DO;                                                              00376200
*        ZMS=' 8, THE "ENTRY_COUNT" KEY'!!                              00376300
*            ' MUST CONTAIN ONE'!!                                      00376400
*            ' (OR MORE) ARGUMENT(S).';                                 00376500
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00376600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00376700
*        ZMACRET=8;                          /* MACRO ERROR */          00376800
*      END;                                                             00376900
*  IF NUMBER(ENTRY_COUNT)>1                  /* CHECK POSITIONALS */    00377000
*    THEN                                                               00377100
*      DO;                                                              00377200
*        ZMS=' 8, "ENTRY_COUNT'!!            /**KPOSP* MSG*/            00377300
*            ENTRY_COUNT!!                                              00377400
*            '" "ENTRY_COUNT"'!!                                        00377500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00377600
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00377700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00377800
*        ZMACRET=8;                          /* MACRO ERROR */          00377900
*      END;                                                             00378000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00378100
*  IF ENTRY_COUNT(1)^=''                     /* CHECK FOR NULL */       00378200
*    THEN                                                               00378300
*      DO;                                                              00378400
*        XENTRY_COUNT=ENTRY_COUNT(1);        /* SET XVARIABLE */        00378500
*        ZXENTRY_COUNT='OUTPUT';             /* SET OUTPUT */           00378600
*      END;                                                             00378700
*  ELSE                                                                 00378800
*    IF ZXENTRY_COUNT^=''                                               00378900
*      THEN                                                             00379000
*        ZXENTRY_COUNT='';                   /* RESET OUTPUT */         00379100
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00379200
*  IF NUMBER(QUERYLEN)>1                     /* CHECK POSITIONALS */    00379300
*    THEN                                                               00379400
*      DO;                                                              00379500
*        ZMS=' 8, "QUERYLEN'!!               /**KPOSP* MSG*/            00379600
*            QUERYLEN!!                                                 00379700
*            '" "QUERYLEN"'!!                                           00379800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00379900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00380000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00380100
*        ZMACRET=8;                          /* MACRO ERROR */          00380200
*      END;                                                             00380300
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00380400
*  XQUERYLEN=QUERYLEN(1);                    /* SET XVARIABLE */        00380500
*  IF QUERYLEN(1)=''                         /* CHECK FOR NULL */       00380600
*   THEN                                                                00380700
*    DO;                                     /* KEY IS REQUIRED */      00380800
*        ZXQUERYLEN='';                      /* RESET IN/OUTPUT */      00380900
*        ZMS=' 8,  '!!                                                  00381000
*            ' "QUERYLEN" KEY AND ITS'!!                                00381100
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00381200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00381300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00381400
*        ZMACRET=8;                          /* MACRO ERROR */          00381500
*    END;                                                               00381600
*  ELSE                                                                 00381700
*    ZXQUERYLEN='OUTPUT';                    /* SET IN/OUTPUT */        00381800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00381900
*  IF NUMBER(LOCATION)>1                     /* CHECK POSITIONALS */    00382000
*    THEN                                                               00382100
*      DO;                                                              00382200
*        ZMS=' 8, "LOCATION'!!               /**KPOSP* MSG*/            00382300
*            LOCATION!!                                                 00382400
*            '" "LOCATION"'!!                                           00382500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00382600
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00382700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00382800
*        ZMACRET=8;                          /* MACRO ERROR */          00382900
*      END;                                                             00383000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00383100
*  XLOCATION=LOCATION(1);                    /* SET XVARIABLE */        00383200
*  IF LOCATION(1)=''                         /* CHECK FOR NULL */       00383300
*   THEN                                                                00383400
*    DO;                                     /* KEY IS REQUIRED */      00383500
*        ZXLOCATION='';                      /* RESET IN/OUTPUT */      00383600
*        ZMS=' 8,  '!!                                                  00383700
*            ' "LOCATION" KEY AND ITS'!!                                00383800
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00383900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00384000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00384100
*        ZMACRET=8;                          /* MACRO ERROR */          00384200
*    END;                                                               00384300
*  ELSE                                                                 00384400
*    ZXLOCATION='INPUT';                     /* SET IN/OUTPUT */        00384500
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00384600
*  XFUNCTION='';                                                        00384700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00384800
*  IF TRANSLATE(FUNCTION(1))                                            00384900
*              = 'SELECT'                    /* CHECK FOR KEYWORD */    00385000
*     ! FUNCTION(1)=''                       /* CHECK FOR NULL */       00385100
*    THEN                                                               00385200
*      DO;                                                              00385300
*        XFUNCTION='SELECT';                 /* SET XVARIABLE */        00385400
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00385500
*          THEN                                                         00385600
*            DO;                                                        00385700
*              ZMS=' 8, "FUNCTION'!!         /**KPOSP* MSG*/            00385800
*                  FUNCTION!!                                           00385900
*                  '" "FUNCTION"'!!                                     00386000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00386100
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00386200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00386300
*              ZMACRET=8;                    /* MACRO ERROR */          00386400
*            END;                                                       00386500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00386600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00386700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00386800
*  IF TRANSLATE(FUNCTION(1))                                            00386900
*              = 'QUERY'                     /* CHECK FOR KEYWORD */    00387000
*    THEN                                                               00387100
*      DO;                                                              00387200
*        XFUNCTION='QUERY';                  /* SET XVARIABLE */        00387300
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00387400
*          THEN                                                         00387500
*            DO;                                                        00387600
*              ZMS=' 8, "FUNCTION'!!         /**KPOSP* MSG*/            00387700
*                  FUNCTION!!                                           00387800
*                  '" "FUNCTION"'!!                                     00387900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00388000
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00388100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00388200
*              ZMACRET=8;                    /* MACRO ERROR */          00388300
*            END;                                                       00388400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00388500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00388600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00388700
*  IF TRANSLATE(FUNCTION(1))                                            00388800
*              = 'SPECIFIC'                  /* CHECK FOR KEYWORD */    00388900
*    THEN                                                               00389000
*      DO;                                                              00389100
*        XFUNCTION='SPECIFIC';               /* SET XVARIABLE */        00389200
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00389300
*          THEN                                                         00389400
*            DO;                                                        00389500
*              ZMS=' 8, "FUNCTION'!!         /**KPOSP* MSG*/            00389600
*                  FUNCTION!!                                           00389700
*                  '" "FUNCTION"'!!                                     00389800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00389900
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00390000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00390100
*              ZMACRET=8;                    /* MACRO ERROR */          00390200
*            END;                                                       00390300
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00390400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00390500
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00390600
*  IF TRANSLATE(FUNCTION(1))                                            00390700
*              = 'SPECIFICIMP'               /* CHECK FOR KEYWORD */    00390800
*    THEN                                                               00390900
*      DO;                                                              00391000
*        XFUNCTION='SPECIFICIMP';            /* SET XVARIABLE */        00391100
*        IF NUMBER(FUNCTION)>1               /* CHECK POSITIONALS */    00391200
*          THEN                                                         00391300
*            DO;                                                        00391400
*              ZMS=' 8, "FUNCTION'!!         /**KPOSP* MSG*/            00391500
*                  FUNCTION!!                                           00391600
*                  '" "FUNCTION"'!!                                     00391700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00391800
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00391900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00392000
*              ZMACRET=8;                    /* MACRO ERROR */          00392100
*            END;                                                       00392200
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00392300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00392400
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00392500
*  IF FUNCTION='FUNCTION'                                               00392600
*    ! FUNCTION='()'                         /*CHECK ENTRY*/            00392700
*     THEN                                                              00392800
*       DO;                                                             00392900
*              ZMS=' 8, THE "FUNCTION" KEY'!!                           00393000
*                  ' MUST CONTAIN ONE'!!                                00393100
*                  ' (OR MORE) ARGUMENT(S).';                           00393200
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00393300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00393400
*              ZMACRET=8;                    /* MACRO ERROR */          00393500
*       END;                                                            00393600
*  ELSE                                                                 00393700
*    DO;                                                                00393800
*      ZXFUNCTION='INPUT';                   /* SET IN/OUTPUT */        00393900
*      IF XFUNCTION=''                       /* CHECK FOR KEYWORD */    00394000
*        THEN                                                           00394100
*          DO;                               /* KEYWORD NOT ENTERED */  00394200
*            XFUNCTION='SELECT';             /* SET DEFAULT */          00394300
*            IF FUNCTION(1)^=''              /* CHECK FOR KEYWORD */    00394400
*              THEN                                                     00394500
*                DO;                                                    00394600
*                  ZXFUNCTION='';            /* RESET IN/OUTPUT */      00394700
*              ZMS=' 8, "FUNCTION'!!         /**KUKWP* MSG*/            00394800
*                  FUNCTION!!'"'!!                                      00394900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00395000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00395100
*                  ' "SELECT",'!!            /* VALID KEYWORD */        00395200
*                  ' "QUERY",'!!             /* VALID KEYWORD */        00395300
*                  ' "SPECIFIC",'!!          /* VALID KEYWORD */        00395400
*                  ' OR "SPECIFICIMP".';     /* VALID KEYWORD */        00395500
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00395600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00395700
*              ZMACRET=8;                    /* MACRO ERROR */          00395800
*                END;                                                   00395900
*          END;                                                         00396000
*    END;                                                               00396100
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00396200
*  IF METHOD='METHOD'                        /* CHECK ENTRY */          00396300
*    THEN                                                               00396400
*      DO;                                                              00396500
*        ZMS=' 8, THE "METHOD" KEY'!!                                   00396600
*            ' MUST CONTAIN ONE'!!                                      00396700
*            ' (OR MORE) ARGUMENT(S).';                                 00396800
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00396900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00397000
*        ZMACRET=8;                          /* MACRO ERROR */          00397100
*      END;                                                             00397200
*  IF NUMBER(METHOD)>1                       /* CHECK POSITIONALS */    00397300
*    THEN                                                               00397400
*      DO;                                                              00397500
*        ZMS=' 8, "METHOD'!!                 /**KPOSP* MSG*/            00397600
*            METHOD!!                                                   00397700
*            '" "METHOD"'!!                                             00397800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00397900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00398000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00398100
*        ZMACRET=8;                          /* MACRO ERROR */          00398200
*      END;                                                             00398300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00398400
*  XMETHOD='';                               /* RESET XVARIABLE */      00398500
*  IF TRANSLATE(METHOD(1))                                              00398600
*              = 'PROPORTIONAL'              /* CHECK FOR KEYWORD */    00398700
*    THEN                                                               00398800
*      XMETHOD = 'PROPORTIONAL';             /* SET XVARIABLE */        00398900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00399000
*  IF TRANSLATE(METHOD(1))                                              00399100
*              = 'EQUICPU'                   /* CHECK FOR KEYWORD */    00399200
*    THEN                                                               00399300
*      XMETHOD = 'EQUICPU';                  /* SET XVARIABLE */        00399400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00399500
*  ZXMETHOD='INPUT';                         /* SET IN/OUTPUT */        00399600
*  IF XMETHOD=''                             /* CHECK FOR KEYWORD */    00399700
*    THEN                                                               00399800
*      DO;                                   /* KEYWORD NOT ENTERED */  00399900
*        XMETHOD='PROPORTIONAL';             /* SET DEFAULT */          00400000
*        IF METHOD(1)^=''                                               00400100
*          THEN                                                         00400200
*            DO;                                                        00400300
*              ZXMETHOD='';                  /* RESET IN/OUTPUT */      00400400
*              ZMS=' 8, "METHOD'!!           /**KUKWP* MSG*/            00400500
*                  METHOD!!'"'!!                                        00400600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00400700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00400800
*                  ' "PROPORTIONAL"'!!       /* VALID KEYWORD */        00400900
*                  ' OR "EQUICPU".';         /* VALID KEYWORD */        00401000
*              ANS MSG('?IWMSRSRS ---> '!!ZMS);                         00401100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00401200
*              ZMACRET=8;                    /* MACRO ERROR */          00401300
*            END;                                                       00401400
*      END;                                                             00401500
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00401600
*  IF COST_ZAAP_ON_CP='COST_ZAAP_ON_CP' !                               00401700
*     COST_ZAAP_ON_CP='()'                   /*CHECK ENTRY*/            00401800
*    THEN                                                               00401900
*      DO;                                                              00402000
*        ZMS=' 8, THE "COST_ZAAP_ON_CP" KEY'!!                          00402100
*            ' MUST CONTAIN ONE'!!                                      00402200
*            ' (OR MORE) ARGUMENT(S).';                                 00402300
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00402400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00402500
*        ZMACRET=8;                          /* MACRO ERROR */          00402600
*      END;                                                             00402700
*  IF NUMBER(COST_ZAAP_ON_CP)>1              /* CHECK POSITIONALS */    00402800
*    THEN                                                               00402900
*      DO;                                                              00403000
*        ZMS=' 8, "COST_ZAAP_ON_CP'!!        /**KPOSP* MSG*/            00403100
*            COST_ZAAP_ON_CP!!                                          00403200
*            '" "COST_ZAAP_ON_CP"'!!                                    00403300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00403400
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00403500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00403600
*        ZMACRET=8;                          /* MACRO ERROR */          00403700
*      END;                                                             00403800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00403900
*  ZXCOST_ZAAP_ON_CP='INPUT';                /* SET IN/OUTPUT */        00404000
*  XCOST_ZAAP_ON_CP='1';                     /* SET DEFAULT */          00404100
*  IF COST_ZAAP_ON_CP(1)^=''                 /* CHECK FOR NULL */       00404200
*    THEN                                                               00404300
*      XCOST_ZAAP_ON_CP=COST_ZAAP_ON_CP(1);  /* SET XVARIABLE */        00404400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00404500
*  IF COST_ZIIP_ON_CP='COST_ZIIP_ON_CP' !                               00404600
*     COST_ZIIP_ON_CP='()'                   /*CHECK ENTRY*/            00404700
*    THEN                                                               00404800
*      DO;                                                              00404900
*        ZMS=' 8, THE "COST_ZIIP_ON_CP" KEY'!!                          00405000
*            ' MUST CONTAIN ONE'!!                                      00405100
*            ' (OR MORE) ARGUMENT(S).';                                 00405200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00405300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00405400
*        ZMACRET=8;                          /* MACRO ERROR */          00405500
*      END;                                                             00405600
*  IF NUMBER(COST_ZIIP_ON_CP)>1              /* CHECK POSITIONALS */    00405700
*    THEN                                                               00405800
*      DO;                                                              00405900
*        ZMS=' 8, "COST_ZIIP_ON_CP'!!        /**KPOSP* MSG*/            00406000
*            COST_ZIIP_ON_CP!!                                          00406100
*            '" "COST_ZIIP_ON_CP"'!!                                    00406200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00406300
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00406400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00406500
*        ZMACRET=8;                          /* MACRO ERROR */          00406600
*      END;                                                             00406700
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00406800
*  ZXCOST_ZIIP_ON_CP='INPUT';                /* SET IN/OUTPUT */        00406900
*  XCOST_ZIIP_ON_CP='1';                     /* SET DEFAULT */          00407000
*  IF COST_ZIIP_ON_CP(1)^=''                 /* CHECK FOR NULL */       00407100
*    THEN                                                               00407200
*      XCOST_ZIIP_ON_CP=COST_ZIIP_ON_CP(1);  /* SET XVARIABLE */        00407300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00407400
*  IF IL_WEIGHTING='IL_WEIGHTING' !                                     00407500
*     IL_WEIGHTING='()'                      /*CHECK ENTRY*/            00407600
*    THEN                                                               00407700
*      DO;                                                              00407800
*        ZMS=' 8, THE "IL_WEIGHTING" KEY'!!                             00407900
*            ' MUST CONTAIN ONE'!!                                      00408000
*            ' (OR MORE) ARGUMENT(S).';                                 00408100
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00408200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00408300
*        ZMACRET=8;                          /* MACRO ERROR */          00408400
*      END;                                                             00408500
*  IF NUMBER(IL_WEIGHTING)>1                 /* CHECK POSITIONALS */    00408600
*    THEN                                                               00408700
*      DO;                                                              00408800
*        ZMS=' 8, "IL_WEIGHTING'!!           /**KPOSP* MSG*/            00408900
*            IL_WEIGHTING!!                                             00409000
*            '" "IL_WEIGHTING"'!!                                       00409100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00409200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00409300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00409400
*        ZMACRET=8;                          /* MACRO ERROR */          00409500
*      END;                                                             00409600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00409700
*  ZXIL_WEIGHTING='INPUT';                   /* SET IN/OUTPUT */        00409800
*  XIL_WEIGHTING='0';                        /* SET DEFAULT */          00409900
*  IF IL_WEIGHTING(1)^=''                    /* CHECK FOR NULL */       00410000
*    THEN                                                               00410100
*      XIL_WEIGHTING=IL_WEIGHTING(1);        /* SET XVARIABLE */        00410200
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00410300
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00410400
*    THEN                                                               00410500
*      DO;                                                              00410600
*        ZMS=' 8, THE "RETCODE" KEY'!!                                  00410700
*            ' MUST CONTAIN ONE'!!                                      00410800
*            ' (OR MORE) ARGUMENT(S).';                                 00410900
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00411000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00411100
*        ZMACRET=8;                          /* MACRO ERROR */          00411200
*      END;                                                             00411300
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00411400
*    THEN                                                               00411500
*      DO;                                                              00411600
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00411700
*            RETCODE!!                                                  00411800
*            '" "RETCODE"'!!                                            00411900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00412000
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00412100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00412200
*        ZMACRET=8;                          /* MACRO ERROR */          00412300
*      END;                                                             00412400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00412500
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00412600
*    THEN                                                               00412700
*      DO;                                                              00412800
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00412900
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00413000
*      END;                                                             00413100
*  ELSE                                                                 00413200
*    IF ZXRETCODE^=''                                                   00413300
*      THEN                                                             00413400
*        ZXRETCODE='';                       /* RESET OUTPUT */         00413500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00413600
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00413700
*    THEN                                                               00413800
*      DO;                                                              00413900
*        ZMS=' 8, THE "RSNCODE" KEY'!!                                  00414000
*            ' MUST CONTAIN ONE'!!                                      00414100
*            ' (OR MORE) ARGUMENT(S).';                                 00414200
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00414300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00414400
*        ZMACRET=8;                          /* MACRO ERROR */          00414500
*      END;                                                             00414600
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00414700
*    THEN                                                               00414800
*      DO;                                                              00414900
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00415000
*            RSNCODE!!                                                  00415100
*            '" "RSNCODE"'!!                                            00415200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00415300
*        ANS MSG('?IWMSRSRS ---> '!!ZMS);                               00415400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00415500
*        ZMACRET=8;                          /* MACRO ERROR */          00415600
*      END;                                                             00415700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00415800
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00415900
*    THEN                                                               00416000
*      DO;                                                              00416100
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00416200
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00416300
*      END;                                                             00416400
*  ELSE                                                                 00416500
*    IF ZXRSNCODE^=''                                                   00416600
*      THEN                                                             00416700
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00416800
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00416900
*      END;                                  /* END COMPLETE CHECKING*/ 00417000
*/********************************************************************/ 00417100
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00417200
*/********************************************************************/ 00417300
*  IF ZMACRET = 0                                                       00417400
*    THEN                                                               00417500
*      DO;                                                              00417600
*/********************************************************************/ 00417700
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00417800
*/********************************************************************/ 00417900
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00418000
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00418100
*    THEN                                                               00418200
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00418300
*    ELSE                                                               00418400
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00418500
*/********************************************************************/ 00418600
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00418700
*  IF XMF^='L'                                                          00418800
*    THEN                                                               00418900
*      ANS('DO; /* IWMSRSRS-PLISTVER */')                               00419000
*          NORESCAN COL(MACLMAR);                                       00419100
*/*MCMPLS01 RFY 15*/                                                    00419200
*  IF XMF^='L' & ZMACRET = 0                                            00419300
*    THEN                                                               00419400
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   00419500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00419600
       DCL EHAMAPS CHAR EXTERNAL;                                       00419700
       IF INDEX(EHAMAPS,'XM@')=0 THEN                                   00419800
         EHAMAPS=EHAMAPS!!'XM@,';                                       00419900
       IF INDEX(EHAREGS,'00F')=0                                        00420000
         THEN                                                           00420100
           EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */    00420200
       IF INDEX(EHAREGS,'15F')=0                                        00420300
         THEN                                                           00420400
           EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */    00420500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00420600
*/*PL.LL01 ?IWMSRSRS MF=L PARAMETER LIST-----------------------------*/ 00420700
*  IF XMF='L'                                                           00420800
*    THEN                                                               00420900
*      DO;                                                              00421000
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00421100
*            '/* ?IWMSRSRS PARM LIST*/')                                00421200
*            NORESCAN COL(MACLMAR);                                     00421300
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00421400
*        ANS('2 '!!XMFCTRL!!                                            00421500
*            '_XVERSION FIXED(8), '!!                                   00421600
*            '/* INPUT XVERSION*/')                                     00421700
*            NORESCAN COL(MACLMAR+2);                                   00421800
*/*PL.LL13  XRSV002 CHAR(3) RESERVED---------------------------------*/ 00421900
*        ANS('2 '!!XMFCTRL                                              00422000
*         !! '_XRSV002 CHAR(3), '                                       00422100
*         !! '/* RESERVED */'                                           00422200
*            ) NORESCAN COL(MACLMAR+2);                                 00422300
*/*PL.LL13  XSYSINFO_BLOCK PTR(31) INPUT NAME------------------------*/ 00422400
*        ANS('2 '!!XMFCTRL                                              00422500
*         !! '_XSYSINFO_BLOCK PTR(31), '                                00422600
*         !! '/* '!!ZXSYSINFO_BLOCK                                     00422700
*         !! ' XSYSINFO_BLOCK */'                                       00422800
*            ) NORESCAN COL(MACLMAR+2);                                 00422900
*/*PL.LL13  XANSLEN FIXED(31) INPUT----------------------------------*/ 00423000
*        ANS('2 '!!XMFCTRL                                              00423100
*         !! '_XANSLEN FIXED(31), '                                     00423200
*         !! '/* '!!ZXANSLEN                                            00423300
*         !! ' XANSLEN */'                                              00423400
*            ) NORESCAN COL(MACLMAR+2);                                 00423500
*/*PL.LL13  XQUERYLEN FIXED(31) OUTPUT-------------------------------*/ 00423600
*        ANS('2 '!!XMFCTRL                                              00423700
*         !! '_XQUERYLEN FIXED(31), '                                   00423800
*         !! '/* '!!ZXQUERYLEN                                          00423900
*         !! ' XQUERYLEN */'                                            00424000
*            ) NORESCAN COL(MACLMAR+2);                                 00424100
*/*PL.LL13  XLOCATION CHAR(18) INPUT---------------------------------*/ 00424200
*        ANS('2 '!!XMFCTRL                                              00424300
*         !! '_XLOCATION CHAR(18), '                                    00424400
*         !! '/* '!!ZXLOCATION                                          00424500
*         !! ' XLOCATION */'                                            00424600
*            ) NORESCAN COL(MACLMAR+2);                                 00424700
*/*PL.LL13  XRSV0022 CHAR(2) RESERVED--------------------------------*/ 00424800
*        ANS('2 '!!XMFCTRL                                              00424900
*         !! '_XRSV0022 CHAR(2), '                                      00425000
*         !! '/* RESERVED */'                                           00425100
*            ) NORESCAN COL(MACLMAR+2);                                 00425200
*/*PL.LPVER01 -------------------------------------------------------*/ 00425300
*  IF XPLISTVER>=1                                                      00425400
*    THEN                                                               00425500
*      DO;                                                              00425600
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00425700
*        ANS('2 '!!XMFCTRL!!                                            00425800
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00425900
*            '/* INPUT XPLISTLEN*/')                                    00426000
*            NORESCAN COL(MACLMAR+2);                                   00426100
*/*PL.LPVER02 -------------------------------------------------------*/ 00426200
*      END;                                                             00426300
*/*PL.LPVER01 -------------------------------------------------------*/ 00426400
*  IF XPLISTVER>=1                                                      00426500
*    THEN                                                               00426600
*      DO;                                                              00426700
*/*PL.LL04  XSRS_OPTIONS BIT(8) FIELD_LABEL--------------------------*/ 00426800
*        ANS('2 '!!XMFCTRL!!                                            00426900
*            '_XSRS_OPTIONS BIT(8), '!!                                 00427000
*            '/* FIELD_LABEL */')                                       00427100
*            NORESCAN COL(MACLMAR+2);                                   00427200
*/*PL.LPVER02 -------------------------------------------------------*/ 00427300
*      END;                                                             00427400
*/*PL.LPVER01 -------------------------------------------------------*/ 00427500
*  IF XPLISTVER>=1                                                      00427600
*    THEN                                                               00427700
*      DO;                                                              00427800
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00427900
*          ANS('3 '!!XMFCTRL!!                                          00428000
*              '_XEXTENDED_DATA_YES BIT(1), '!!                         00428100
*              '/* BIT */')                                             00428200
*              NORESCAN COL(MACLMAR+2);                                 00428300
*/*PL.LPVER02 -------------------------------------------------------*/ 00428400
*      END;                                                             00428500
*/*PL.LPVER01 -------------------------------------------------------*/ 00428600
*  IF XPLISTVER>=1                                                      00428700
*    THEN                                                               00428800
*      DO;                                                              00428900
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00429000
*          ANS('3 '!!XMFCTRL!!                                          00429100
*              '_XFUNCTION_QUERY BIT(1), '!!                            00429200
*              '/* BIT */')                                             00429300
*              NORESCAN COL(MACLMAR+2);                                 00429400
*/*PL.LPVER02 -------------------------------------------------------*/ 00429500
*      END;                                                             00429600
*/*PL.LPVER01 -------------------------------------------------------*/ 00429700
*  IF XPLISTVER>=1                                                      00429800
*    THEN                                                               00429900
*      DO;                                                              00430000
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00430100
*          ANS('3 '!!XMFCTRL!!                                          00430200
*              '_XFUNCTION_SPECIFIC BIT(1), '!!                         00430300
*              '/* BIT */')                                             00430400
*              NORESCAN COL(MACLMAR+2);                                 00430500
*/*PL.LPVER02 -------------------------------------------------------*/ 00430600
*      END;                                                             00430700
*/*PL.LPVER01 -------------------------------------------------------*/ 00430800
*  IF XPLISTVER>=1                                                      00430900
*    THEN                                                               00431000
*      DO;                                                              00431100
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00431200
*          ANS('3 '!!XMFCTRL!!                                          00431300
*              '_XFUNCTION_SPECIFICIMP BIT(1), '!!                      00431400
*              '/* BIT */')                                             00431500
*              NORESCAN COL(MACLMAR+2);                                 00431600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00431700
*          ANS('3 '!!XMFCTRL!!                                          00431800
*              '_XSRS_OPTIONS_RSVD1 BIT(4), '!!                         00431900
*              '/* BIT */')                                             00432000
*              NORESCAN COL(MACLMAR+2);                                 00432100
*/*PL.LPVER02 -------------------------------------------------------*/ 00432200
*      END;                                                             00432300
*/*PL.LPVER01 -------------------------------------------------------*/ 00432400
*  IF XPLISTVER>=1                                                      00432500
*    THEN                                                               00432600
*      DO;                                                              00432700
*/*PL.LL13  XRSV0025 CHAR(1) RESERVED--------------------------------*/ 00432800
*        ANS('2 '!!XMFCTRL                                              00432900
*         !! '_XRSV0025 CHAR(1), '                                      00433000
*         !! '/* RESERVED */'                                           00433100
*            ) NORESCAN COL(MACLMAR+2);                                 00433200
*/*PL.LPVER02 -------------------------------------------------------*/ 00433300
*      END;                                                             00433400
*/*PL.LPVER01 -------------------------------------------------------*/ 00433500
*  IF XPLISTVER>=1                                                      00433600
*    THEN                                                               00433700
*      DO;                                                              00433800
*/*PL.LL13  XENTRY_COUNT FIXED(32) OUTPUT----------------------------*/ 00433900
*        ANS('2 '!!XMFCTRL                                              00434000
*         !! '_XENTRY_COUNT FIXED(32), '                                00434100
*         !! '/* '!!ZXENTRY_COUNT                                       00434200
*         !! ' XENTRY_COUNT */'                                         00434300
*            ) NORESCAN COL(MACLMAR+2);                                 00434400
*/*PL.LPVER02 -------------------------------------------------------*/ 00434500
*      END;                                                             00434600
*/*PL.LPVER01 -------------------------------------------------------*/ 00434700
*  IF XPLISTVER>=2                                                      00434800
*    THEN                                                               00434900
*      DO;                                                              00435000
*/*PL.LL13  XCOST_ZAAP_ON_CP FIXED(31) INPUT-------------------------*/ 00435100
*        ANS('2 '!!XMFCTRL                                              00435200
*         !! '_XCOST_ZAAP_ON_CP FIXED(31), '                            00435300
*         !! '/* '!!ZXCOST_ZAAP_ON_CP                                   00435400
*         !! ' XCOST_ZAAP_ON_CP */'                                     00435500
*            ) NORESCAN COL(MACLMAR+2);                                 00435600
*/*PL.LPVER02 -------------------------------------------------------*/ 00435700
*      END;                                                             00435800
*/*PL.LPVER01 -------------------------------------------------------*/ 00435900
*  IF XPLISTVER>=2                                                      00436000
*    THEN                                                               00436100
*      DO;                                                              00436200
*/*PL.LL13  XCOST_ZIIP_ON_CP FIXED(31) INPUT-------------------------*/ 00436300
*        ANS('2 '!!XMFCTRL                                              00436400
*         !! '_XCOST_ZIIP_ON_CP FIXED(31), '                            00436500
*         !! '/* '!!ZXCOST_ZIIP_ON_CP                                   00436600
*         !! ' XCOST_ZIIP_ON_CP */'                                     00436700
*            ) NORESCAN COL(MACLMAR+2);                                 00436800
*/*PL.LPVER02 -------------------------------------------------------*/ 00436900
*      END;                                                             00437000
*/*PL.LPVER01 -------------------------------------------------------*/ 00437100
*  IF XPLISTVER>=2                                                      00437200
*    THEN                                                               00437300
*      DO;                                                              00437400
*/*PL.LL13  XIL_WEIGHTING FIXED(31) INPUT----------------------------*/ 00437500
*        ANS('2 '!!XMFCTRL                                              00437600
*         !! '_XIL_WEIGHTING FIXED(31), '                               00437700
*         !! '/* '!!ZXIL_WEIGHTING                                      00437800
*         !! ' XIL_WEIGHTING */'                                        00437900
*            ) NORESCAN COL(MACLMAR+2);                                 00438000
*/*PL.LPVER02 -------------------------------------------------------*/ 00438100
*      END;                                                             00438200
*/*PL.LPVER01 -------------------------------------------------------*/ 00438300
*  IF XPLISTVER>=2                                                      00438400
*    THEN                                                               00438500
*      DO;                                                              00438600
*/*PL.LL04  XEQUICPU_OPTIONS BIT(8) FIELD_LABEL----------------------*/ 00438700
*        ANS('2 '!!XMFCTRL!!                                            00438800
*            '_XEQUICPU_OPTIONS BIT(8), '!!                             00438900
*            '/* FIELD_LABEL */')                                       00439000
*            NORESCAN COL(MACLMAR+2);                                   00439100
*/*PL.LPVER02 -------------------------------------------------------*/ 00439200
*      END;                                                             00439300
*/*PL.LPVER01 -------------------------------------------------------*/ 00439400
*  IF XPLISTVER>=2                                                      00439500
*    THEN                                                               00439600
*      DO;                                                              00439700
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00439800
*          ANS('3 '!!XMFCTRL!!                                          00439900
*              '_XMETHOD_PROPORTIONAL BIT(1), '!!                       00440000
*              '/* BIT */')                                             00440100
*              NORESCAN COL(MACLMAR+2);                                 00440200
*/*PL.LPVER02 -------------------------------------------------------*/ 00440300
*      END;                                                             00440400
*/*PL.LPVER01 -------------------------------------------------------*/ 00440500
*  IF XPLISTVER>=2                                                      00440600
*    THEN                                                               00440700
*      DO;                                                              00440800
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00440900
*          ANS('3 '!!XMFCTRL!!                                          00441000
*              '_XMETHOD_EQUICPU BIT(1), '!!                            00441100
*              '/* BIT */')                                             00441200
*              NORESCAN COL(MACLMAR+2);                                 00441300
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00441400
*          ANS('3 '!!XMFCTRL!!                                          00441500
*              '_XEQUICPU_OPTIONS_RSVD1 BIT(6), '!!                     00441600
*              '/* BIT */')                                             00441700
*              NORESCAN COL(MACLMAR+2);                                 00441800
*/*PL.LPVER02 -------------------------------------------------------*/ 00441900
*      END;                                                             00442000
*/*PL.LL18 ----------------------------------------------------------*/ 00442100
*        ANS('2 * CHAR(0);')                                            00442200
*            NORESCAN COL(MACLMAR+2);                                   00442300
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00442400
*      END;                                                             00442500
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00442600
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00442700
*  DEACT ZPRMLINE;                                                      00442800
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00442900
*  DEACT ZNDX;                                                          00443000
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00443100
*  DCL XVERSION CHAR;                                                   00443200
*  DEACT XVERSION;                                                      00443300
*/*PL.L02 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00443400
*  IF XMF^='L'                                                          00443500
*    THEN                                                               00443600
*      DO;                                                              00443700
*/*PL.L03 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00443800
*        IF XMF='S'                                                     00443900
*          THEN                                                         00444000
*            XMFCTRL='#ZPLIST';                                         00444100
*/*PL.L04 ?IWMSRSRS PARAMETER LIST-----------------------------------*/ 00444200
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00444300
*                 XMFCTRL!!'),'!!                                       00444400
*                 ' /* ?IWMSRSRS PARM LIST*/';                          00444500
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00444600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00444700
*                 '_XVERSION FIXED(8), '!!                              00444800
*                 '/* INPUT XVERSION*/';                                00444900
*/*PL.L08  XRSV002 CHAR(3) RESERVED----------------------------------*/ 00445000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00445100
*                 '_XRSV002 CHAR(3), '!!                                00445200
*                 '/* RESERVED */';                                     00445300
*/*PL.L08  XSYSINFO_BLOCK PTR(31) INPUT NAME-------------------------*/ 00445400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00445500
*                 '_XSYSINFO_BLOCK PTR(31), '!!                         00445600
*                 '/* '!!ZXSYSINFO_BLOCK!!                              00445700
*                 ' XSYSINFO_BLOCK */';                                 00445800
*/*PL.L08  XANSLEN FIXED(31) INPUT-----------------------------------*/ 00445900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00446000
*                 '_XANSLEN FIXED(31), '!!                              00446100
*                 '/* '!!ZXANSLEN!!                                     00446200
*                 ' XANSLEN */';                                        00446300
*/*PL.L08  XQUERYLEN FIXED(31) OUTPUT--------------------------------*/ 00446400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00446500
*                 '_XQUERYLEN FIXED(31), '!!                            00446600
*                 '/* '!!ZXQUERYLEN!!                                   00446700
*                 ' XQUERYLEN */';                                      00446800
*/*PL.L08  XLOCATION CHAR(18) INPUT----------------------------------*/ 00446900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00447000
*                 '_XLOCATION CHAR(18), '!!                             00447100
*                 '/* '!!ZXLOCATION!!                                   00447200
*                 ' XLOCATION */';                                      00447300
*/*PL.L08  XRSV0022 CHAR(2) RESERVED---------------------------------*/ 00447400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00447500
*                 '_XRSV0022 CHAR(2), '!!                               00447600
*                 '/* RESERVED */';                                     00447700
*/*PL.LPVER03 -------------------------------------------------------*/ 00447800
*  IF XPLISTVER>=1                                                      00447900
*    THEN                                                               00448000
*      DO;                                                              00448100
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00448200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00448300
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00448400
*                 '/* INPUT XPLISTLEN*/';                               00448500
*/*PL.LPVER04 -------------------------------------------------------*/ 00448600
*      END;                                                             00448700
*/*PL.LPVER03 -------------------------------------------------------*/ 00448800
*  IF XPLISTVER>=1                                                      00448900
*    THEN                                                               00449000
*      DO;                                                              00449100
*/*PL.L08  XSRS_OPTIONS BIT(8) FIELD_LABEL---------------------------*/ 00449200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00449300
*                 '_XSRS_OPTIONS BIT(8), '!!                            00449400
*                 '/* FIELD_LABEL */';                                  00449500
*/*PL.LPVER04 -------------------------------------------------------*/ 00449600
*      END;                                                             00449700
*/*PL.LPVER03 -------------------------------------------------------*/ 00449800
*  IF XPLISTVER>=1                                                      00449900
*    THEN                                                               00450000
*      DO;                                                              00450100
*/*PL.L08  XRSV0025 CHAR(1) RESERVED---------------------------------*/ 00450200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00450300
*                 '_XRSV0025 CHAR(1), '!!                               00450400
*                 '/* RESERVED */';                                     00450500
*/*PL.LPVER04 -------------------------------------------------------*/ 00450600
*      END;                                                             00450700
*/*PL.LPVER03 -------------------------------------------------------*/ 00450800
*  IF XPLISTVER>=1                                                      00450900
*    THEN                                                               00451000
*      DO;                                                              00451100
*/*PL.L08  XENTRY_COUNT FIXED(32) OUTPUT-----------------------------*/ 00451200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00451300
*                 '_XENTRY_COUNT FIXED(32), '!!                         00451400
*                 '/* '!!ZXENTRY_COUNT!!                                00451500
*                 ' XENTRY_COUNT */';                                   00451600
*/*PL.LPVER04 -------------------------------------------------------*/ 00451700
*      END;                                                             00451800
*/*PL.LPVER03 -------------------------------------------------------*/ 00451900
*  IF XPLISTVER>=2                                                      00452000
*    THEN                                                               00452100
*      DO;                                                              00452200
*/*PL.L08  XCOST_ZAAP_ON_CP FIXED(31) INPUT--------------------------*/ 00452300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00452400
*                 '_XCOST_ZAAP_ON_CP FIXED(31), '!!                     00452500
*                 '/* '!!ZXCOST_ZAAP_ON_CP!!                            00452600
*                 ' XCOST_ZAAP_ON_CP */';                               00452700
*/*PL.LPVER04 -------------------------------------------------------*/ 00452800
*      END;                                                             00452900
*/*PL.LPVER03 -------------------------------------------------------*/ 00453000
*  IF XPLISTVER>=2                                                      00453100
*    THEN                                                               00453200
*      DO;                                                              00453300
*/*PL.L08  XCOST_ZIIP_ON_CP FIXED(31) INPUT--------------------------*/ 00453400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00453500
*                 '_XCOST_ZIIP_ON_CP FIXED(31), '!!                     00453600
*                 '/* '!!ZXCOST_ZIIP_ON_CP!!                            00453700
*                 ' XCOST_ZIIP_ON_CP */';                               00453800
*/*PL.LPVER04 -------------------------------------------------------*/ 00453900
*      END;                                                             00454000
*/*PL.LPVER03 -------------------------------------------------------*/ 00454100
*  IF XPLISTVER>=2                                                      00454200
*    THEN                                                               00454300
*      DO;                                                              00454400
*/*PL.L08  XIL_WEIGHTING FIXED(31) INPUT-----------------------------*/ 00454500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00454600
*                 '_XIL_WEIGHTING FIXED(31), '!!                        00454700
*                 '/* '!!ZXIL_WEIGHTING!!                               00454800
*                 ' XIL_WEIGHTING */';                                  00454900
*/*PL.LPVER04 -------------------------------------------------------*/ 00455000
*      END;                                                             00455100
*/*PL.LPVER03 -------------------------------------------------------*/ 00455200
*  IF XPLISTVER>=2                                                      00455300
*    THEN                                                               00455400
*      DO;                                                              00455500
*/*PL.L08  XEQUICPU_OPTIONS BIT(8) FIELD_LABEL-----------------------*/ 00455600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00455700
*                 '_XEQUICPU_OPTIONS BIT(8), '!!                        00455800
*                 '/* FIELD_LABEL */';                                  00455900
*/*PL.LPVER04 -------------------------------------------------------*/ 00456000
*      END;                                                             00456100
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00456200
*        ZPRMNUM=ZPRMNUM+1;                                             00456300
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00456400
*        IF XPLISTVER^=0                                                00456500
*           & XMF^='S'                                                  00456600
*          THEN                                                         00456700
*            DO;                                                        00456800
*              ZPRMNUM=ZPRMNUM+1;                                       00456900
*              ZPRM(ZPRMNUM)=                                           00457000
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00457100
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00457200
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00457300
*               ' IS LONG ENOUGH */';                                   00457400
*            END;                                                       00457500
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00457600
*        ZPLLEN=36;                                                     00457700
*        IF XPLISTVER>=1                                                00457800
*          THEN                                                         00457900
*            ZPLLEN=44;                                                 00458000
*        IF XPLISTVER>=2                                                00458100
*          THEN                                                         00458200
*            ZPLLEN=57;                                                 00458300
*        IF ZPRMMAX<ZPLLEN                                              00458400
*           & XMF^='E'                                                  00458500
*          THEN                                                         00458600
*            ZPRMMAX=ZPLLEN;                                            00458700
*/*PL.L13 -----------------------------------------------------------*/ 00458800
*      END;                                                             00458900
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00459000
*  IF XMF^='L'                                                          00459100
*    THEN                                                               00459200
*      DO;                                                              00459300
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00459400
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00459500
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00459600
*                '/* CLEAR PARAMETER AREA */')                          00459700
*                NORESCAN COL(MACLMAR);                                 00459800
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00459900
*        IF XPLISTVER^=0                                                00460000
*          THEN                                                         00460100
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00460200
*                '/* XVERSION FIXED(8) */')                             00460300
*                NORESCAN COL(MACLMAR);                                 00460400
*/*PI.L23 XSYSINFO_BLOCK NAME----------------------------------------*/ 00460500
*        IF ZXSYSINFO_BLOCK^=''                                         00460600
*          THEN                                                         00460700
*            ANS('#Z'!!ZNDX!!'_XSYSINFO_BLOCK='!!                       00460800
*                'ADDR('!!XSYSINFO_BLOCK!!');'!!                        00460900
*                '/* XSYSINFO_BLOCK NAME */')                           00461000
*                NORESCAN COL(MACLMAR);                                 00461100
*/*PI.L17 XANSLEN FIXED(31)------------------------------------------*/ 00461200
*        IF ZXANSLEN='INPUT' !                                          00461300
*           ZXANSLEN='INOUT'                                            00461400
*          THEN                                                         00461500
*            ANS('#Z'!!ZNDX!!'_XANSLEN='!!                              00461600
*                XANSLEN!!';'!!                                         00461700
*                '/* XANSLEN FIXED(31) */')                             00461800
*                NORESCAN COL(MACLMAR);                                 00461900
*/*PI.L21 XLOCATION NAME CHAR(18)------------------------------------*/ 00462000
*        IF ZXLOCATION='INPUT' !                                        00462100
*           ZXLOCATION='INOUT'                                          00462200
*          THEN                                                         00462300
*            ANS('#Z'!!ZNDX!!'_XLOCATION='!!                            00462400
*                XLOCATION!!';'!!                                       00462500
*                '/* XLOCATION CHAR(18) */')                            00462600
*                NORESCAN COL(MACLMAR);                                 00462700
*/*PI.LPVER01 -------------------------------------------------------*/ 00462800
*  IF XPLISTVER>=1                                                      00462900
*    THEN                                                               00463000
*      DO;                                                              00463100
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00463200
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00463300
*            '/* XPLISTLEN FIXED(16) */')                               00463400
*            NORESCAN COL(MACLMAR);                                     00463500
*/*PI.LPVER02 -------------------------------------------------------*/ 00463600
*      END;                                                             00463700
*/*PI.LPVER01 -------------------------------------------------------*/ 00463800
*  IF XPLISTVER>=1                                                      00463900
*    THEN                                                               00464000
*      DO;                                                              00464100
*/*PI.L06 XSRS_OPTIONS BIT(8)----------------------------------------*/ 00464200
*        ZW='';                                                         00464300
*        ZMS='';                                                        00464400
*/*PI.LPVER02 -------------------------------------------------------*/ 00464500
*      END;                                                             00464600
*/*PI.LPVER01 -------------------------------------------------------*/ 00464700
*  IF XPLISTVER>=1                                                      00464800
*    THEN                                                               00464900
*      DO;                                                              00465000
*/*PI.L07 XSRS_OPTIONS BIT(8) 1XXXXXXX-------------------------------*/ 00465100
*        IF XEXTENDED_DATA='YES'                                        00465200
*          THEN                                                         00465300
*            ZW=ZW!!'1';                                                00465400
*          ELSE                                                         00465500
*            ZW=ZW!!'0';                                                00465600
*/*PI.LPVER02 -------------------------------------------------------*/ 00465700
*      END;                                                             00465800
*/*PI.LPVER01 -------------------------------------------------------*/ 00465900
*  IF XPLISTVER>=1                                                      00466000
*    THEN                                                               00466100
*      DO;                                                              00466200
*/*PI.L07 XSRS_OPTIONS BIT(8) X1XXXXXX-------------------------------*/ 00466300
*        IF XFUNCTION='QUERY'                                           00466400
*          THEN                                                         00466500
*            ZW=ZW!!'1';                                                00466600
*          ELSE                                                         00466700
*            ZW=ZW!!'0';                                                00466800
*/*PI.LPVER02 -------------------------------------------------------*/ 00466900
*      END;                                                             00467000
*/*PI.LPVER01 -------------------------------------------------------*/ 00467100
*  IF XPLISTVER>=1                                                      00467200
*    THEN                                                               00467300
*      DO;                                                              00467400
*/*PI.L07 XSRS_OPTIONS BIT(8) XX1XXXXX-------------------------------*/ 00467500
*        IF XFUNCTION='SPECIFIC'                                        00467600
*          THEN                                                         00467700
*            ZW=ZW!!'1';                                                00467800
*          ELSE                                                         00467900
*            ZW=ZW!!'0';                                                00468000
*/*PI.LPVER02 -------------------------------------------------------*/ 00468100
*      END;                                                             00468200
*/*PI.LPVER01 -------------------------------------------------------*/ 00468300
*  IF XPLISTVER>=1                                                      00468400
*    THEN                                                               00468500
*      DO;                                                              00468600
*/*PI.L07 XSRS_OPTIONS BIT(8) XXX1XXXX-------------------------------*/ 00468700
*        IF XFUNCTION='SPECIFICIMP'                                     00468800
*          THEN                                                         00468900
*            ZW=ZW!!'10000';                                            00469000
*          ELSE                                                         00469100
*            ZW=ZW!!'00000';                                            00469200
*/*PI.L09 XSRS_OPTIONS BIT(8)----------------------------------------*/ 00469300
*        IF INDEX(ZW,'1')^=0                                            00469400
*          THEN                                                         00469500
*            ANS('#Z'!!ZNDX!!'_XSRS_OPTIONS='!!                         00469600
*                '#Z'!!ZNDX!!'_XSRS_OPTIONS ! '!!                       00469700
*                ''''!!ZW!!'''B; '!!                                    00469800
*                '/* BIT(8) */')                                        00469900
*                NORESCAN COL(MACLMAR);                                 00470000
*/*PI.LPVER02 -------------------------------------------------------*/ 00470100
*      END;                                                             00470200
*/*PI.LPVER01 -------------------------------------------------------*/ 00470300
*  IF XPLISTVER>=2                                                      00470400
*    THEN                                                               00470500
*      DO;                                                              00470600
*/*PI.L17 XCOST_ZAAP_ON_CP FIXED(31)---------------------------------*/ 00470700
*        IF ZXCOST_ZAAP_ON_CP='INPUT' !                                 00470800
*           ZXCOST_ZAAP_ON_CP='INOUT'                                   00470900
*          THEN                                                         00471000
*            ANS('#Z'!!ZNDX!!'_XCOST_ZAAP_ON_CP='!!                     00471100
*                XCOST_ZAAP_ON_CP!!';'!!                                00471200
*                '/* XCOST_ZAAP_ON_CP FIXED(31) */')                    00471300
*                NORESCAN COL(MACLMAR);                                 00471400
*/*PI.LPVER02 -------------------------------------------------------*/ 00471500
*      END;                                                             00471600
*/*PI.LPVER01 -------------------------------------------------------*/ 00471700
*  IF XPLISTVER>=2                                                      00471800
*    THEN                                                               00471900
*      DO;                                                              00472000
*/*PI.L17 XCOST_ZIIP_ON_CP FIXED(31)---------------------------------*/ 00472100
*        IF ZXCOST_ZIIP_ON_CP='INPUT' !                                 00472200
*           ZXCOST_ZIIP_ON_CP='INOUT'                                   00472300
*          THEN                                                         00472400
*            ANS('#Z'!!ZNDX!!'_XCOST_ZIIP_ON_CP='!!                     00472500
*                XCOST_ZIIP_ON_CP!!';'!!                                00472600
*                '/* XCOST_ZIIP_ON_CP FIXED(31) */')                    00472700
*                NORESCAN COL(MACLMAR);                                 00472800
*/*PI.LPVER02 -------------------------------------------------------*/ 00472900
*      END;                                                             00473000
*/*PI.LPVER01 -------------------------------------------------------*/ 00473100
*  IF XPLISTVER>=2                                                      00473200
*    THEN                                                               00473300
*      DO;                                                              00473400
*/*PI.L17 XIL_WEIGHTING FIXED(31)------------------------------------*/ 00473500
*        IF ZXIL_WEIGHTING='INPUT' !                                    00473600
*           ZXIL_WEIGHTING='INOUT'                                      00473700
*          THEN                                                         00473800
*            IF TRANSLATE(XIL_WEIGHTING)                                00473900
*                    ^='0'                                              00474000
*              THEN                                                     00474100
*                ANS('#Z'!!ZNDX!!'_XIL_WEIGHTING='!!                    00474200
*                    XIL_WEIGHTING!!';'!!                               00474300
*                    '/* XIL_WEIGHTING FIXED(31) */')                   00474400
*                    NORESCAN COL(MACLMAR);                             00474500
*/*PI.LPVER02 -------------------------------------------------------*/ 00474600
*      END;                                                             00474700
*/*PI.LPVER01 -------------------------------------------------------*/ 00474800
*  IF XPLISTVER>=2                                                      00474900
*    THEN                                                               00475000
*      DO;                                                              00475100
*/*PI.L06 XEQUICPU_OPTIONS BIT(8)------------------------------------*/ 00475200
*        ZW='';                                                         00475300
*        ZMS='';                                                        00475400
*/*PI.LPVER02 -------------------------------------------------------*/ 00475500
*      END;                                                             00475600
*/*PI.LPVER01 -------------------------------------------------------*/ 00475700
*  IF XPLISTVER>=2                                                      00475800
*    THEN                                                               00475900
*      DO;                                                              00476000
*/*PI.L07 XEQUICPU_OPTIONS BIT(8) 1XXXXXXX---------------------------*/ 00476100
*        IF XMETHOD='PROPORTIONAL'                                      00476200
*          THEN                                                         00476300
*            ZW=ZW!!'1';                                                00476400
*          ELSE                                                         00476500
*            ZW=ZW!!'0';                                                00476600
*/*PI.LPVER02 -------------------------------------------------------*/ 00476700
*      END;                                                             00476800
*/*PI.LPVER01 -------------------------------------------------------*/ 00476900
*  IF XPLISTVER>=2                                                      00477000
*    THEN                                                               00477100
*      DO;                                                              00477200
*/*PI.L07 XEQUICPU_OPTIONS BIT(8) X1XXXXXX---------------------------*/ 00477300
*        IF XMETHOD='EQUICPU'                                           00477400
*          THEN                                                         00477500
*            ZW=ZW!!'1000000';                                          00477600
*          ELSE                                                         00477700
*            ZW=ZW!!'0000000';                                          00477800
*/*PI.L09 XEQUICPU_OPTIONS BIT(8)------------------------------------*/ 00477900
*        IF INDEX(ZW,'1')^=0                                            00478000
*          THEN                                                         00478100
*            ANS('#Z'!!ZNDX!!'_XEQUICPU_OPTIONS='!!                     00478200
*                '#Z'!!ZNDX!!'_XEQUICPU_OPTIONS ! '!!                   00478300
*                ''''!!ZW!!'''B; '!!                                    00478400
*                '/* BIT(8) */')                                        00478500
*                NORESCAN COL(MACLMAR);                                 00478600
*/*PI.LPVER02 -------------------------------------------------------*/ 00478700
*      END;                                                             00478800
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00478900
*              IF NUMBER(RSNCODE)>0                                     00479000
*                THEN                                                   00479100
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00479200
*              IF NUMBER(RETCODE)>0                                     00479300
*                THEN                                                   00479400
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00479500
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00479600
*                    IF SYSAM64 = 'YES' THEN                            00479700
*              ANS('G64R01P=ADDR(#Z'!!ZNDX!!');'!!                      00479800
*                  '/* PARAMETER LIST */')                              00479900
*                  NORESCAN COL(MACLMAR);                               00480000
*                    ELSE                                               00480100
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00480200
*                  '/* PARAMETER LIST */')                              00480300
*                  NORESCAN COL(MACLMAR);                               00480400
*              IF SYSASCE^='P'                                          00480500
*                THEN                                                   00480600
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00480700
*                      '/* PARAMETER LIST AR */')                       00480800
*                      NORESCAN COL(MACLMAR);                           00480900
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00481000
         ANS('PC(XM@(96)!30);') SKIP COL(5);                            00481100
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00481200
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00481300
*/*PO.L03 XQUERYLEN FIXED(31)----------------------------------------*/ 00481400
*              IF ZXQUERYLEN='OUTPUT' !                                 00481500
*                 ZXQUERYLEN='INOUT'                                    00481600
*                THEN                                                   00481700
*                  ANS(XQUERYLEN!!                                      00481800
*                      '=#Z'!!ZNDX!!'_XQUERYLEN;'!!                     00481900
*                      '/* XQUERYLEN FIXED(31) */')                     00482000
*                      NORESCAN COL(MACLMAR);                           00482100
*/*PO.LPVER01 -------------------------------------------------------*/ 00482200
*  IF XPLISTVER >= 1                                                    00482300
*    THEN                                                               00482400
*      DO;                                                              00482500
*/*PO.L03 XENTRY_COUNT FIXED(32)-------------------------------------*/ 00482600
*              IF ZXENTRY_COUNT='OUTPUT' !                              00482700
*                 ZXENTRY_COUNT='INOUT'                                 00482800
*                THEN                                                   00482900
*                  ANS(XENTRY_COUNT!!                                   00483000
*                      '=#Z'!!ZNDX!!'_XENTRY_COUNT;'!!                  00483100
*                      '/* XENTRY_COUNT FIXED(32) */')                  00483200
*                      NORESCAN COL(MACLMAR);                           00483300
*/*PO.LPVER02 -------------------------------------------------------*/ 00483400
*      END;                                                             00483500
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00483600
*              IF NUMBER(RETCODE)>0                                     00483700
*                THEN                                                   00483800
*                    ANS(XRETCODE!!                                     00483900
*                     '=GPR15F; /* SET RETURN CODE */')                 00484000
*                      NORESCAN COL(MACLMAR);                           00484100
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00484200
*              IF NUMBER(RSNCODE)>0                                     00484300
*                THEN                                                   00484400
*                    ANS(XRSNCODE!!                                     00484500
*                     '=GPR00F; /* SET REASON CODE */')                 00484600
*                      NORESCAN COL(MACLMAR);                           00484700
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00484800
*              IF NUMBER(RSNCODE)>0                                     00484900
*                THEN                                                   00485000
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00485100
*              IF NUMBER(RETCODE)>0                                     00485200
*                THEN                                                   00485300
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00485400
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00485500
*      END;                                                             00485600
*/*PO.L13 IWMSRSRS USAGE INDICATOR-----------------------------------*/ 00485700
*  ZIWMSRSRS='YES';                          /* SET IWMSRSRS USED */    00485800
*/*PO.L15 END OF EXECUTABLE IWMSRSRS-PLISTVER MACRO------------------*/ 00485900
*  IF XMF^='L'                                                          00486000
*    THEN                                                               00486100
*      ANS('END; /* IWMSRSRS-PLISTVER */')                              00486200
*          NORESCAN COL(MACLMAR);                                       00486300
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00486400
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00486500
*/*PO.L17 END OF IWMSRSRS MACRO--------------------------------------*/ 00486600
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00486700
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00486800
*/*******************************************************************/  00486900
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00487000
*/*******************************************************************/  00487100
*      END;                                                             00487200
*/*******************************************************************/  00487300
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00487400
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00487500
*/*******************************************************************/  00487600
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00487700
*    THEN                                                               00487800
*      DO;                                                              00487900
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00488000
*                                      DOUBLEWORD MULTIPLES        */   00488100
*/*******************************************************************/  00488200
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00488300
*/*******************************************************************/  00488400
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00488500
*          THEN                                                         00488600
*            DO;                                                        00488700
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00488800
*                THEN                                                   00488900
*                  DO;                                                  00489000
*                    ANS('?EPILOG                                       00489100
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00489200
*                    EHALIST=EHALIST!!',AMG,';                          00489300
*                  END;                                                 00489400
*            END;                                                       00489500
*/*******************************************************************/  00489600
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00489700
*/*******************************************************************/  00489800
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00489900
*          THEN                                                         00490000
*            DO;                                                        00490100
*              IF ZPRMMAX>EHAMAXLEN                                     00490200
*                THEN                                                   00490300
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00490400
*            END;                                                       00490500
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00490600
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00490700
*              COL(MACLMAR);                                            00490800
*        END;                                                           00490900
*      END;                                                             00491000
*/*-----------------------------------------------------------------*/  00491100
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00491200
*/*        BY ?EPILOG                                               */  00491300
*/*-----------------------------------------------------------------*/  00491400
*        IF INDEX(EHAREGS,'01P')=0                                      00491500
*          THEN                                                         00491600
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00491700
*        IF INDEX(EHAREGS,'00F')=0                                      00491800
*          & NUMBER(RSNCODE)>0                                          00491900
*          THEN                                                         00492000
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00492100
*        IF INDEX(EHAREGS,'15F')=0                                      00492200
*          THEN                                                         00492300
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00492400
*        IF SYSALVL > 1 THEN                                            00492500
*        DO;                                                            00492600
*          IF INDEX(EHAREGS64,'00F')=0 THEN                             00492700
*            EHAREGS64 = EHAREGS64 !! '00F';                            00492800
*          IF INDEX(EHAREGS64,'01P')=0 THEN                             00492900
*            EHAREGS64 = EHAREGS64 !! '01P';                            00493000
*          IF INDEX(EHAREGS64,'15F')=0 THEN                             00493100
*            EHAREGS64 = EHAREGS64 !! '15F';                            00493200
*        END;                                                           00493300
*  RETURN CODE(ZMACRET);                                                00493400
*%END IWMSRSRS;                                                         00493500
