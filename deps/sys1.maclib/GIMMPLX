*/****************************** Module Header ***********************/         
*/*                                                                  */         
*/* Module Name: GIMMPLX                                             */         
*/*                                                                  */         
*/* SMP/E API Macro for PL/X                                         */         
*/*                                                                  */         
*/* Licensed Materials - Property of IBM                             */         
*/* 5650-ZOS                                                         */         
*/* Copyright IBM Corp. 1981, 2018                                   */         
*/****************************** Module Header ***********************/         
*   %IF XPND_MAC_SW^='N'                                                        
*     %THEN                                                                     
*     %GOTO PLX_EXPAND;                                                         
*@LIST OFF;                                                                     
*%PLX_EXPAND:;                                                                  
*/*                                                                  */         
*/********************************************************************/         
*/*                                                                  */         
*/* The following PLX macro variables are used to control the        */         
*/*      expansion of the mappings in this macro.                    */         
*/*                                                                  */         
*/*      QPRM_ATTR                                                   */         
*/*        QUERY_PARMS is expanced with an attribute equal to        */         
*/*          it's value plus 'BDY(WORD)'                             */         
*/*        If QPRM_ATTR is blank                                     */         
*/*        QUERY_PARMS is expanded as a simple structure 'BDY(WORD)' */         
*/*                                                                  */         
*/********************************************************************/         
*/*                                                                  */         
*/* ---------------------------------------------------------------- */         
*/* FLAG REASON  RELEASE   DATE   ORG  DESCRIPTION                   */         
*/* ---- ------- ------- -------- ---  ----------------------------- */         
*/* $L0= SV1001A  1A.00  03/28/96 MUD: GIMAPI SUPPORT                */         
*/* $L1= SVV001B  1B.00  10/04/96 DMM: API Version Support           */         
*/* $01= IO26243  36.96  05/08/18 KAP: Allow 3 characters for PTF    */         
*/*                                    value in SMP/E level          */         
*/*                                                                  */         
*/********************************************************************/         
*/*   CHANGE FLAG KEY: M@PNC                                         */         
*/*   WHERE:                                                         */         
*/*                                                                  */         
*/* M= MULTIPLE    P= DCRS = D,E,F,G    N= 0-9,A-Z     C= A = ADD    */         
*/*    FOR DELETE     RMPS = H,I,J,K    (USE '0' ONLY     C = CHANGE */         
*/*    FLAGS ONLY     LINE = L,M,N,O     WHEN ELEMENT     P = COPY   */         
*/*                   PTMS = P,Q,R,S     IS BEING         M = MOVE   */         
*/*                   APARS = 0-9        CREATED)         D = DELETE */         
*/********************************************************************/         
* %IF QPRM_ATTR = ' '                                                           
*   %THEN                                                                       
*     %ATTRIB_CHAR='BDY(WORD)';                                                 
*   %ELSE                                                                       
*     %ATTRIB_CHAR='BDY(WORD)'!!'QPRM_ATTR';                                    
*                                                                               
* DECLARE                                                                       
*  1 QUERY_PARMS ATTRIB_CHAR, /* Parameters for QUERY command        */         
*    3 PCSI         PTR(31),  /* PTR to global CSI dataset           */         
*    3 CSILEN       FIXED(31),/* Length of data set name             */         
*    3 PZONE        PTR(31),  /* PTR to list of zones                */         
*    3 ZONELEN      FIXED(31),/* Length of zone list                 */         
*    3 PENTRY       PTR(31),  /* PTR to list of entries              */         
*    3 ENTRYLEN     FIXED(31),/* Length of entry list                */         
*    3 PSUBENTRY    PTR(31),  /* PTR to list of subentries           */         
*    3 SUBENTRYLEN  FIXED(31),/* Length of subentry list             */         
*    3 PFILTER      PTR(31),  /* PTR to query filter                 */         
*    3 FILTERLEN    FIXED(31);/* Length of filter                    */         
* DECLARE                                                                       
*  1 ENTRY_LIST BASED,        /* List of entry types                 */         
*    3 NEXT      PTR(31),     /* PTR to next item in linked list     */         
*    3 ENTRIES   PTR(31),     /* PTR to head of linked list of                  
*                                CSIENTRY structures listing the                
*                                instances of this entry type        */         
*    3 TYPE      CHAR(12);    /* Entry type                          */         
*                                                                               
* DECLARE                                                                       
*  1 CSIENTRY BASED,          /* Description of a specific entry     */         
*    3 NEXT       PTR(31),    /* PTR to next item in linked list     */         
*    3 SUBENTRIES PTR(31),    /* PTR to head of linked list of                  
*                                 SUBENTRY structures listing the               
                                  subentry values returned for                  
                                  this entry                         */         
*    3 ENTRYNAME  CHAR(8),    /* Name of entry                       */         
*    3 ZONENAME   CHAR(7);    /* Zone where entry was retrieved      */         
*                                                                               
* DECLARE                                                                       
*  1 SUBENTRY BASED,          /* Contains subentry data              */         
*    3 NEXT       PTR(31),    /* PTR to next item in linked list     */         
*    3 SUBENTDATA PTR(31),    /* PTR to head of linked list of data             
*                                values for this subentry            */         
*    3 TYPE      CHAR(12);    /* Subentry type                       */         
*                                                                               
* DECLARE                                                                       
*  1 VER BASED,               /* Placeholder for subentries                     
*                                 associated with ++VER records of a            
*                                 a SYSMOD                           */         
*    3 NEXT       PTR(31),    /* PTR to next item in linked list     */         
*    3 VERDATA    PTR(31),    /* PTR to head of linked list of                  
*                                 subentries associated with a ++VER */         
*    3 VERNUM     CHAR(3);    /* ++VER statement number              */         
*                                                                               
* DECLARE                                                                       
*  1 ITEM_LIST BASED,         /* Holds piece of subentry data        */         
*    3 NEXT       PTR(31),    /* PTR to next item in linked list     */         
*    3 DATALEN    FIXED(31),  /* Number of characters of real data   */         
*    3 DATA       PTR(31);    /* Pointer to storage containing data  */         
*                                                                               
* DECLARE                     /* API VERSION command output          */         
*  1 API_VERSION BASED,       /*   structure                         */         
*    2 APIVER     CHAR(2),    /* current SMP/E level for version     */         
*    2 APIREL     CHAR(2),    /*    "                "   release     */         
*    2 APIMOD     CHAR(2),    /*    "                "   modification*/         
*    2 APIPTF     CHAR(2),    /*    "                "   PTF. Will              
*                                never exceed 99.                @01C*/         
*    2 APIEPTF    CHAR(3);    /*    "                "   extended PTF           
*                                value.  This is the true PTF value             
*                                when the PTF level exceeds 99.  @01A*/         
*                                                                               
* %PLX_END:;                                                                    
*@LIST ON;                                                                      
