*%IWM4HLTH: MACRO KEYS(STOKEN,FUNCTION,HEALTH,SUBSYS,SUBSYSNM,          00000100
*                 HEALTHRSN,RETCODE,RSNCODE,PLISTVER,MF);               00000200
*/**** START OF SPECIFICATIONS **************************************** 00000300
*                                                                     * 00000400
*                                                                     * 00000500
*01* MACRO NAME:  IWM4HLTH                              -12/19/14-<1> * 00000600
*                                                                     * 00000700
*                                                                     * 00000800
*01* DESCRIPTIVE NAME:  Set Server Health Indicator                   * 00000900
*                                                                     * 00001000
*01* PROPRIETARY STATEMENT:                                           * 00001100
*                                                                     * 00001200
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001300
*     5650-ZOS COPYRIGHT IBM CORP. 2006, 2015                         * 00001400
*                                                                     * 00001500
* STATUS= HBB77A0                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*01* FUNCTION:                                                        * 00002000
*                                                                     * 00002100
*      The IWM4HLTH service is used to inform WLM about the health    * 00002200
*      state of a server. The health indicator is a number which      * 00002300
*      shows in percent how well the server is performing. It can be  * 00002400
*      an integer value between 0 and 100.                            * 00002500
*                                                                     * 00002600
*      A value of 100 means that the server is fully capable to do    * 00002700
*      work without any health problems. A value of 0 means that the  * 00002800
*      server is not able to do any work occasionally. Any value      * 00002900
*      between 0 and 100 indicates the level of health of the server. * 00003000
*                                                                     * 00003100
*      IWM4HLTH provides two functions: SET and RESET. With the SET   * 00003200
*      function, which is the main intended use and default function, * 00003300
*      a caller informs WLM about its view of the health state of a   * 00003400
*      server. WLM then sets the server's health indicator to the     * 00003500
*      minimum number of all the current settings from the different  * 00003600
*      callers of the service since the last RESET.                   * 00003700
*                                                                     * 00003800
*      The RESET function primarily refers to reliability,            * 00003900
*      availability, and serviceability (RAS) considerations          * 00004000
*      regarding a server's health state. RESET restarts setting the  * 00004100
*      health indicator by specifying an initial value and discarding * 00004200
*      any values reported by other callers before.                   * 00004300
*                                                                     * 00004400
*      Callers can identify themselves by a subsystem type and        * 00004500
*      subsystem name. The service uses these parameters to recognize * 00004600
*      different callers of the service. If no subsystem type is      * 00004700
*      passed, the job name of the caller address space is used       * 00004800
*      instead. This information will then also be available to       * 00004900
*      callers of the IWM4QHLT (Query Server Health Indicators)       * 00005000
*      service.                                                       * 00005100
*                                                                     * 00005200
*      The health indicator is activated when one of the routing      * 00005300
*      services IWM4SRSC or IWMSRSRS with FUNCTION=SPECIFIC are used  * 00005400
*      to get routing recommendations. The weights are reduced to the * 00005500
*      percentage given by the health indicator of the server address * 00005600
*      space.                                                         * 00005700
*                                                                     * 00005800
*      The health indicator of a server keeps its value until it is   * 00005900
*      modified by with the IWM4HLTH service, or with the IWMSRSRG    * 00006000
*      service.                                                       * 00006100
*                                                                     * 00006200
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00006300
*                                                                     * 00006400
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00006500
*                                                                     * 00006600
*01* ENVIRONMENT:                                                     * 00006700
*                                                                     * 00006800
*                                                                     * 00006900
*      Minimum authorization:                                         * 00007000
*                                                                     * 00007100
*                        With FUNCTION=SET, the minimum authorization * 00007200
*                        is one of the the following:                 * 00007300
*                                                                     * 00007400
*                                                                     * 00007500
*                        o   Problem state with any PSW key if the    * 00007600
*                            address space token specified with       * 00007700
*                            STOKEN=stoken equals the address space   * 00007800
*                            token of the home address space. That    * 00007900
*                            is, the caller provides a health         * 00008000
*                            indicator for itself.                    * 00008100
*                                                                     * 00008200
*                        o   When providing a health indicator for an * 00008300
*                            address space other than the home        * 00008400
*                            address space, the minimum authorization * 00008500
*                            is one of the following:                 * 00008600
*                                                                     * 00008700
*                                                                     * 00008800
*                            -   Supervisor state                     * 00008900
*                                                                     * 00009000
*                            -   Program key mask (PKM) allowing at   * 00009100
*                                least one of the key 0-7             * 00009200
*                                                                     * 00009300
*                            -   The caller has UPDATE authority to   * 00009400
*                                the resource IWM.SERVER.HEALTH in    * 00009500
*                                the FACILITY class.                  * 00009600
*                                                                     * 00009700
*                                                                     * 00009800
*                                                                     * 00009900
*                                                                     * 00010000
*                                                                     * 00010100
*                        With FUNCTION=RESET, the minimum             * 00010200
*                        authorization is one of the the following:   * 00010300
*                                                                     * 00010400
*                                                                     * 00010500
*                        o   Supervisor state                         * 00010600
*                                                                     * 00010700
*                        o   Program key mask (PKM) allowing at least * 00010800
*                            one of the key 0-7                       * 00010900
*                                                                     * 00011000
*                        o   The caller has CONTROL authority to the  * 00011100
*                            resource IWM.SERVER.HEALTH in the        * 00011200
*                            FACILITY class.                          * 00011300
*                                                                     * 00011400
*                                                                     * 00011500
*                                                                     * 00011600
*      Dispatchable unit mode: Task or SRB mode.                      * 00011700
*                                                                     * 00011800
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00011900
*                                                                     * 00012000
*      AMODE:            31- or 64-bit.  If in 64-Bit addressing      * 00012100
*                        mode, code SYSSTATE AMODE64=YES before       * 00012200
*                        invoking this macro.                         * 00012300
*                                                                     * 00012400
*      ASC mode:         Primary.                                     * 00012500
*                                                                     * 00012600
*      Interrupt status: Enabled or disabled for I/O and external     * 00012700
*                        interrupts.                                  * 00012800
*                                                                     * 00012900
*      Locks:            The caller may hold locks, but is not        * 00013000
*                        required to hold any.  FRRs may be           * 00013100
*                        established.                                 * 00013200
*                                                                     * 00013300
*      Control parameters: Control parameters must be in the primary  * 00013400
*                        address space.                               * 00013500
*                                                                     * 00013600
*                                                                     * 00013700
*                                                                     * 00013800
*01* PROGRAMMING REQUIREMENTS:                                        * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*    1.  The macro CVT must be included to use this macro.            * 00014200
*                                                                     * 00014300
*    2.  The macro IWMYCON must be included to use this macro.        * 00014400
*                                                                     * 00014500
*    3.  The macro IWMPB must be in the library concatenation, since  * 00014600
*        it is included by IWMYCON.                                   * 00014700
*                                                                     * 00014800
*    4.  Note that the high order halfword of register 0, and the     * 00014900
*        reason code variable when specified, may be non-zero and     * 00015000
*        represents diagnostic data which is NOT part of the external * 00015100
*        interface. The high order halfword should thus be excluded   * 00015200
*        from comparison with the reason code values described above. * 00015300
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00015400
*        be used for this purpose.                                    * 00015500
*                                                                     * 00015600
*    5.  All character data, unless otherwise specified, is assumed   * 00015700
*        to be left justified and padded with blanks on the right, as * 00015800
*        needed, to occupy the specified number of bytes.             * 00015900
*                                                                     * 00016000
*                                                                     * 00016100
*                                                                     * 00016200
*01* RESTRICTIONS:                                                    * 00016300
*                                                                     * 00016400
*                                                                     * 00016500
*    1.  This macro may not be used prior to the completion of WLM    * 00016600
*        address space initialization                                 * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*                                                                     * 00017000
*01* INPUT REGISTER INFORMATION:                                      * 00017100
*                                                                     * 00017200
*    Before issuing the IWM4HLTH macro, the caller does not have to   * 00017300
*    place any information into any register unless using it in       * 00017400
*    register notation for a particular parameter, or using it as a   * 00017500
*    base register.                                                   * 00017600
*                                                                     * 00017700
*01* OUTPUT REGISTER INFORMATION:                                     * 00017800
*                                                                     * 00017900
*    When control returns to the caller, the GPRs contain:            * 00018000
*                                                                     * 00018100
*                                                                     * 00018200
*    REGISTER  CONTENTS                                               * 00018300
*                                                                     * 00018400
*    0         Reason code if GR15 return code is non-zero            * 00018500
*                                                                     * 00018600
*    1         Used as work register by the system                    * 00018700
*                                                                     * 00018800
*    2-13      Unchanged                                              * 00018900
*                                                                     * 00019000
*    14        Used as work register by the system                    * 00019100
*                                                                     * 00019200
*    15        Return code                                            * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*    When control returns to the caller, the ARs contain:             * 00019700
*                                                                     * 00019800
*                                                                     * 00019900
*    REGISTER  CONTENTS                                               * 00020000
*                                                                     * 00020100
*    0-1       Used as work registers by the system                   * 00020200
*                                                                     * 00020300
*    2-13      Unchanged                                              * 00020400
*                                                                     * 00020500
*    14-15     Used as work registers by the system                   * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*    Some callers depend on register contents remaining the same      * 00021000
*    before and after issuing a service.  If the system changes the   * 00021100
*    contents of registers on which the caller depends, the caller    * 00021200
*    must save them before issuing the service, and restore them      * 00021300
*    after the system returns control.                                * 00021400
*                                                                     * 00021500
*01* PERFORMANCE IMPLICATIONS:                                        * 00021600
*                                                                     * 00021700
*    None                                                             * 00021800
*                                                                     * 00021900
*01* SYNTAX:                                                          * 00022000
*                                                                     * 00022100
*Ýxlabel¨  IWM4HLTH     STOKEN=xstoken                                * 00022200
*                     Ý,FUNCTION=»SET!RESETº¨                         * 00022300
*                      ,HEALTH=xhealth                                * 00022400
*                     Ý,SUBSYS=»xsubsys!NO_SUBSYSº¨                   * 00022500
*                     Ý,SUBSYSNM=»xsubsysnm!NO_SUBSYSNMº¨             * 00022600
*                     Ý,HEALTHRSN=»xhealthrsn!NO_RSNº¨                * 00022700
*                     Ý,RETCODE=xretcode¨                             * 00022800
*                     Ý,RSNCODE=xrsncode¨                             * 00022900
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00023000
*                    ÐÝ,MF=S¨                                         * 00023100
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00023200
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*      Where:                                                         * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*      Ýxlabel¨                                                       * 00023900
*          is an optional symbol, starting in column 1, that is the   * 00024000
*          name on the IWM4HLTH macro invocation.  The name must      * 00024100
*          conform to the rules for an ordinary assembler language    * 00024200
*          symbol.                                                    * 00024300
*          DEFAULT: No name.                                          * 00024400
*                                                                     * 00024500
*                                                                     * 00024600
*                                                                     * 00024700
*                                                                     * 00024800
*      STOKEN(xstoken)                                                * 00024900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00025000
*          only) of a required 64 bit input which contains the space  * 00025100
*          token of the server.                                       * 00025200
*                                                                     * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*                                                                     * 00025600
*      ÝFUNCTION(»SET!RESETº)¨                                        * 00025700
*          is an optional keyword input which indicates the function  * 00025800
*          to perform.                                                * 00025900
*          DEFAULT: SET                                               * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*          FUNCTION(SET)                                              * 00026300
*              informs WLM about the caller's view of the health      * 00026400
*              state of a server. WLM then sets the server's health   * 00026500
*              indicator to the minimum number of the most recent     * 00026600
*              health indicators reported by different callers of     * 00026700
*              this service.                                          * 00026800
*                                                                     * 00026900
*          FUNCTION(RESET)                                            * 00027000
*              restarts setting the health indicator by specifying an * 00027100
*              initial value and discarding any values reported by    * 00027200
*              other callers before. RESET  primarily refers to       * 00027300
*              reliability, availability, and serviceability (RAS)    * 00027400
*              considerations regarding a server's health state.      * 00027500
*                                                                     * 00027600
*                                                                     * 00027700
*                                                                     * 00027800
*                                                                     * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*      HEALTH(xhealth)                                                * 00028200
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00028300
*          only) of a required fullword input which contains the      * 00028400
*          health factor associated with the address space. This      * 00028500
*          value is the percentage up to which this address space is  * 00028600
*          capable to handle requests.                                * 00028700
*                                                                     * 00028800
*                                                                     * 00028900
*                                                                     * 00029000
*                                                                     * 00029100
*      ÝSUBSYS(»xsubsys!NO_SUBSYSº)¨                                  * 00029200
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00029300
*          only) of an optional 8 character input contains the        * 00029400
*          generic name or type of the caller of the service.  It is  * 00029500
*          used by WLM together with the SUBSYSNM parameter to        * 00029600
*          recognize different callers of this service. This data is  * 00029700
*          also available to callers of the IWM4QHLT service.         * 00029800
*          DEFAULT: NO_SUBSYS indicates that no type was passed.      * 00029900
*                                                                     * 00030000
*                                                                     * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*      ÝSUBSYSNM(»xsubsysnm!NO_SUBSYSNMº)¨                            * 00030400
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00030500
*          only) of an optional 8 character input contains the name   * 00030600
*          of a specific instance of the caller of the service. It is * 00030700
*          used by WLM together with the SUBSYS parameter to          * 00030800
*          recognize different callers of this service. This data is  * 00030900
*          also available to callers of the IWM4QHLT service.         * 00031000
*          DEFAULT: NO_SUBSYSNM indicates that no name was passed.    * 00031100
*                                                                     * 00031200
*                                                                     * 00031300
*                                                                     * 00031400
*                                                                     * 00031500
*      ÝHEALTHRSN(»xhealthrsn!NO_RSNº)¨                               * 00031600
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00031700
*          only) of an optional 16 character input that allows the    * 00031800
*          caller to pass additional information, such as the reason  * 00031900
*          for changing the health indicator. This data is available  * 00032000
*          to callers of the IWM4QHLT service. The format is          * 00032100
*          undefined.                                                 * 00032200
*          DEFAULT: NO_RSN indicates that no health reason was        * 00032300
*          passed.                                                    * 00032400
*                                                                     * 00032500
*                                                                     * 00032600
*                                                                     * 00032700
*                                                                     * 00032800
*      ÝRETCODE(xretcode)¨                                            * 00032900
*          is the name (RS-type) of an optional fullword output       * 00033000
*          variable (or register (2)-(12) or (15) ASM only) into      * 00033100
*          which the return code is to be copied from GPR 15.  If you * 00033200
*          specify 15, GPR15, REG15, or R15 (within or without        * 00033300
*          parentheses), the value will be left in GPR 15.            * 00033400
*                                                                     * 00033500
*                                                                     * 00033600
*                                                                     * 00033700
*                                                                     * 00033800
*      ÝRSNCODE(xrsncode)¨                                            * 00033900
*          is the name (RS-type) of an optional fullword output       * 00034000
*          variable into which the reason code is to be copied from   * 00034100
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00034200
*          R0 (within or without parentheses), the value will be left * 00034300
*          in GPR 0.                                                  * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00034900
*          is an optional byte input decimal value in the "0-1" range * 00035000
*          that specifies the macro version.  PLISTVER is the only    * 00035100
*          key allowed on the list form of MF and determines which    * 00035200
*          parameter list is generated.  The macro keys associated    * 00035300
*          with each supported version of the macro are listed in     * 00035400
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00035500
*          instead of a number, and the parameter list will be of the * 00035600
*          largest size currently supported. This size may grow from  * 00035700
*          release to release (thus possibly affecting the amount of  * 00035800
*          storage needed by your program).  If your program can      * 00035900
*          tolerate this, IBM recommends that you always specify MAX  * 00036000
*          when creating the list form parameter list as that will    * 00036100
*          ensure that the list form parameter list is always long    * 00036200
*          enough to hold whatever parameters might be specified on   * 00036300
*          the execute form.                                          * 00036400
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00036500
*          default is the lowest version which allows all of the      * 00036600
*          parameters specified on the invocation to be processed.    * 00036700
*                                                                     * 00036800
*                                                                     * 00036900
*                                                                     * 00037000
*                                                                     * 00037100
*      ÝMF(»S!L!Eº)¨                                                  * 00037200
*          is an optional keyword input which specifies the macro     * 00037300
*          form.                                                      * 00037400
*          DEFAULT: S                                                 * 00037500
*                                                                     * 00037600
*                                                                     * 00037700
*          ÝMF(S)¨                                                    * 00037800
*              specifies the standard form of the macro.  The "S"     * 00037900
*              form generates code to put the parameters into the     * 00038000
*              parameter list and invoke the desired service.  Full   * 00038100
*              checking for required macro keys is done along with    * 00038200
*              supplying defaults for omitted optional parameters.    * 00038300
*              The ?EPILOG macro must be invoked at the end of the    * 00038400
*              module.                                                * 00038500
*                                                                     * 00038600
*              For assembly language code modules, the "S" form       * 00038700
*              generates code to put the parameters into an in-line   * 00038800
*              parameter list and invoke the desired service.  Full   * 00038900
*              checking for required macro keys is done along with    * 00039000
*              supplying defaults for omitted optional parameters.    * 00039100
*                                                                     * 00039200
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00039300
*              specifies the list form of the macro.  The "L" form    * 00039400
*              defines an area to be used for the parameter list.     * 00039500
*              Only the PLISTVER key may be specified on the          * 00039600
*              invocation.  All other macro parameters are flagged as * 00039700
*              errors.  If PLISTVER is not specified, the original    * 00039800
*              parameter list definition is used.                     * 00039900
*                                                                     * 00040000
*            ,xmfctrl                                                 * 00040100
*              is a required input.  It is the name of a storage area * 00040200
*              for the parameter list.                                * 00040300
*                                                                     * 00040400
*            »,xmfattr!BDY(DWORD)º                                    * 00040500
*              is an optional 60 character input string that varies   * 00040600
*              from 1 to 60 characters. Use it to force boundary      * 00040700
*              alignment of the parameter list. Use only 0F or 0D     * 00040800
*              (assembler-only).                                      * 00040900
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00041000
*              forces the parameter list to a doubleword boundary.    * 00041100
*                                                                     * 00041200
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00041300
*              specifies the execute form of the macro.  The "E" form * 00041400
*              generates code to put the parameters into the          * 00041500
*              parameter list specified by xmfctrl and provides full  * 00041600
*              syntax checking with default setting.                  * 00041700
*                                                                     * 00041800
*            ,xmfctrl                                                 * 00041900
*              is a required input.  It is the name (RS-type) (or     * 00042000
*              address in register (1)-(12) ASM only) of a storage    * 00042100
*              area for the parameter list.                           * 00042200
*                                                                     * 00042300
*            »,COMPLETEº                                              * 00042400
*              is an optional keyword input which specifies the       * 00042500
*              degree of macro parameter syntax checking.             * 00042600
*              DEFAULT: COMPLETE                                      * 00042700
*                                                                     * 00042800
*                                                                     * 00042900
*              COMPLETE                                               * 00043000
*                  Checking for required macro keys is done and       * 00043100
*                  defaults are supplied for omitted optional         * 00043200
*                  parameters.                                        * 00043300
*                                                                     * 00043400
*                                                                     * 00043500
*                                                                     * 00043600
*                                                                     * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*01* ABEND CODES:  None.                                              * 00044100
*                                                                     * 00044200
*01* RETURN CODES:                                                    * 00044300
*                                                                     * 00044400
*                                                                     * 00044500
*            0    Name: IwmRetCodeOk                                  * 00044600
*                                                                     * 00044700
*                 Meaning: Successful completion.                     * 00044800
*                                                                     * 00044900
*                 Action: None required.                              * 00045000
*                                                                     * 00045100
*            8    Name: IwmRetCodeInvocError                          * 00045200
*                                                                     * 00045300
*                 Meaning: Invalid invocation environment or          * 00045400
*                 parameters.                                         * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*                 HEX REASON  MEANING/ACTION                          * 00045800
*                 CODE                                                * 00045900
*                                                                     * 00046000
*                 xxxx0807    Name: IwmRsnCodeBadSTOKEN               * 00046100
*                                                                     * 00046200
*                             Meaning:  Bad STOKEN passed.            * 00046300
*                                                                     * 00046400
*                             Action: Check for possible storage      * 00046500
*                             overlay.                                * 00046600
*                                                                     * 00046700
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00046800
*                                                                     * 00046900
*                             Meaning:  Error accessing parameter     * 00047000
*                             list.                                   * 00047100
*                                                                     * 00047200
*                             Action: Check for possible storage      * 00047300
*                             overlay.                                * 00047400
*                                                                     * 00047500
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00047600
*                                                                     * 00047700
*                             Meaning: Caller invoked service while   * 00047800
*                             DATOFF                                  * 00047900
*                                                                     * 00048000
*                             Action: Avoid requesting this function  * 00048100
*                             in this environment.                    * 00048200
*                                                                     * 00048300
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00048400
*                                                                     * 00048500
*                             Meaning: Caller invoked service but was * 00048600
*                             in 24 bit addressing mode.              * 00048700
*                                                                     * 00048800
*                             Action: Request this function only when * 00048900
*                             you are in 31 bit addressing mode.      * 00049000
*                                                                     * 00049100
*                 xxxx0825    Name: IwmRsnCodeAscModeNotPrimary       * 00049200
*                                                                     * 00049300
*                             Meaning: Caller invoked service but was * 00049400
*                             not DAT on Primary ASC mode.            * 00049500
*                                                                     * 00049600
*                             Action: Avoid requesting this function  * 00049700
*                             in this environment.                    * 00049800
*                                                                     * 00049900
*                 xxxx0827    Name: IwmRsnCodeRscdNot0                * 00050000
*                                                                     * 00050100
*                             Meaning: Reserved field in parameter    * 00050200
*                             list was non-zero.                      * 00050300
*                                                                     * 00050400
*                             Action: Check for possible storage      * 00050500
*                             overlay of the parameter list.          * 00050600
*                                                                     * 00050700
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00050800
*                                                                     * 00050900
*                             Meaning: Version number in parameter    * 00051000
*                             list or version length field is not     * 00051100
*                             valid. Or This service was called on a  * 00051200
*                             z/OS release not supported.             * 00051300
*                                                                     * 00051400
*                             Action: Check for possible storage      * 00051500
*                             overlay of the parameter list.          * 00051600
*                                                                     * 00051700
*                 xxxx0829    Name: IwmRsnCodeBadOptions              * 00051800
*                                                                     * 00051900
*                             Meaning: Parameter list omits required  * 00052000
*                             parameters or supplies mutually         * 00052100
*                             exclusive parameters or provides data   * 00052200
*                             associated with options not selected.   * 00052300
*                                                                     * 00052400
*                             Action: Check for possible storage      * 00052500
*                             overlay.                                * 00052600
*                                                                     * 00052700
*                 xxxx08A2    Name: IwmRsnCodeBadHealth               * 00052800
*                                                                     * 00052900
*                             Meaning:  Health Value out of range     * 00053000
*                                                                     * 00053100
*                             Action: Check for possible storage      * 00053200
*                             overlay.                                * 00053300
*                                                                     * 00053400
*                                                                     * 00053500
*                                                                     * 00053600
*            C    Name: IwmRetCodeEnvError                            * 00053700
*                                                                     * 00053800
*                 Meaning: Environmental error.                       * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*                 HEX REASON  MEANING/ACTION                          * 00054200
*                 CODE                                                * 00054300
*                                                                     * 00054400
*                 xxxx0C01    Name: IwmRsnCodeNoStg                   * 00054500
*                                                                     * 00054600
*                             Meaning:  Storage is not available for  * 00054700
*                             the request.                            * 00054800
*                                                                     * 00054900
*                             Action: There is a storage shortage.    * 00055000
*                             The function may work successfully at a * 00055100
*                             later time.                             * 00055200
*                                                                     * 00055300
*                 xxxx0C0E    Name: IwmRsnCodeInsufAccess             * 00055400
*                                                                     * 00055500
*                             Meaning: Minimum authorization          * 00055600
*                             requirements are not fulfilled.         * 00055700
*                                                                     * 00055800
*                             Action: Invoke the function with the    * 00055900
*                             authorization requirements fulfilled.   * 00056000
*                                                                     * 00056100
*                                                                     * 00056200
*                                                                     * 00056300
*            10   Name: IwmRetCodeCompError                           * 00056400
*                                                                     * 00056500
*                 Meaning: Component error.                           * 00056600
*                                                                     * 00056700
*                 Action: No action required.  The function may be    * 00056800
*                 successful if invoked again.                        * 00056900
*                                                                     * 00057000
*                                                                     * 00057100
*                                                                     * 00057200
*01* REASON CODES:                                                    * 00057300
*                                                                     * 00057400
*       A unique reason code will be returned whenever the return     * 00057500
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00057600
*       under their corresponding return code.  Reason code and       * 00057700
*       return code constants are defined within IWMYCON.  Note that  * 00057800
*       the high order halfword of register 0, and the reason code    * 00057900
*       variable when specified, may be non-zero and represents       * 00058000
*       diagnostic data which is NOT part of the external interface.  * 00058100
*       The high order halfword should thus be excluded from          * 00058200
*       comparison with the reason code values described above.  The  * 00058300
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00058400
*       used for this purpose.                                        * 00058500
*                                                                     * 00058600
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00058700
*                                                                     * 00058800
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00058900
*                                                                     * 00059000
*01* COMPONENT:  SCWLM                                                * 00059100
*                                                                     * 00059200
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00059300
*                                                                     * 00059400
*01* EXAMPLES:                                                        * 00059500
*                                                                     * 00059600
*    To set the health indication value for a given server:           * 00059700
*                                                                     * 00059800
*               IWM4HLTH STOKEN=STKN,FUNCTION=SET                     * 00059900
*                        HEALTH=HLTH                                  * 00060000
*                        HEALTHRSN=HRSN                               * 00060100
*                        SUBSYS=HSUB,SUBSYSNM=HSNM                    * 00060200
*                        RETCODE=RC,RSNCODE=RSN                       * 00060300
*      *                                                              * 00060400
*      * Storage areas                                                * 00060500
*      *                                                              * 00060600
*      STKN     DS    CL8             Contains the STOKEN associated  * 00060700
*      *                              with the address space          * 00060800
*      HLTH     DS    F               Contains the health value       * 00060900
*      HRSN     DS    CL16            Contains the health reason      * 00061000
*      HSUB     DS    CL8             Contains caller name            * 00061100
*      HSNM     DS    CL8             Contains caller instance name   * 00061200
*      RC       DS    F               Return code                     * 00061300
*      RSN      DS    F               Reason code                     * 00061400
*                                                                     * 00061500
*                                                                     * 00061600
*01* MACRO USAGE NOTES:                                               * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00062000
*        global macro variable.  Any value other than 'NO' will       * 00062100
*        result in the macro expansion being printed.  The default is * 00062200
*        'YES'.  The following examples illustrate how the ZPRINT     * 00062300
*        variable should be set.                                      * 00062400
*                                                                     * 00062500
*                    GBLC &ZPRINT                                     * 00062600
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00062700
*                                                                     * 00062800
*                                                                     * 00062900
*    2.  The IWM4HLTH macro supports multiple versions. The macro key * 00063000
*        list  below  contains the version level in which the key was * 00063100
*        first  introduced.  Positionals  are  identified by the word * 00063200
*        'Positional'  followed by the numeric value of its position. * 00063300
*        Nested  positionals  are  preceded  by their outer key.  The * 00063400
*        lowest value represents the original version and the highest * 00063500
*        value  represents  the  most  recent version of the IWM4HLTH * 00063600
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00063700
*        least  as high as the highest version number of all the keys * 00063800
*        being used.                                                  * 00063900
*                                                                     * 00064000
*        VERSION   KEY                                                * 00064100
*                                                                     * 00064200
*              0      HEALTH                                          * 00064300
*                     STOKEN                                          * 00064400
*              1      FUNCTION                                        * 00064500
*                     HEALTHRSN                                       * 00064600
*                     SUBSYS                                          * 00064700
*                     SUBSYSNM                                        * 00064800
*                                                                     * 00064900
*                                                                     * 00065000
*                                                                     * 00065100
*01* CHANGE ACTIVITY:                                                 * 00065200
*                                                                     * 00065300
*   Flag LineItem  FMID    Date   ID    Comment                       * 00065400
*                                                                     * 00065500
*    $L0=WLMPSTR  HBB7730 050511 3241PB:  Server Health Indicator     * 00065600
*    $L1=LHEALTH  HBB77A0 140722 3241MG:  Health based routing        * 00065700
****** END OF SPECIFICATIONS *****************************************/ 00065800
*/********************************************************************* 00065900
         MACRO                                                          00066000
&XLABEL  IWM4HLTH &STOKEN=,&FUNCTION=,&HEALTH=,&SUBSYS=,&SUBSYSNM=,    *00066100
               &HEALTHRSN=,&RETCODE=,&RSNCODE=,&PLISTVER=,&MF=          00066200
.*                                                                      00066300
*               MACDATE -12/19/14-<1>                                   00066400
.*                                                                      00066500
.*******************************************************************    00066600
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00066700
.*******************************************************************    00066800
               GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                  00066900
               GBLC  &ZTEST      YES=TEST NO=NO TEST                    00067000
               GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX            00067100
.*                                                                      00067200
               GBLC  &ZIWM4HLTH  YES=MACRO USED AT LEAST ONCE           00067300
.*******************************************************************    00067400
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00067500
.*******************************************************************    00067600
               LCLC  &ZMS        ERROR MESSAGE WORK AREA                00067700
               LCLC  &ZCNDX      SYSNDX CHARACTERS                      00067800
               LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED             00067900
               LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR            00068000
               LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE            00068100
               LCLA  &ZAWRK      USED AS A WORK AREA                    00068200
               LCLA  &ZASIZ      USED FOR SIZE OF VALUE                 00068300
               LCLA  &ZN         NUMERIC WORK VARIABLE                  00068400
               LCLC  &ZC         CHARACTER WORK VARIABLE                00068500
               LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE            00068600
               LCLA  &ZTLA       VALUE TOO LONG VARIABLE                00068700
               LCLC  &ZMAC_G     "G" or null                            00068800
&ZMAC_G        SETC  ''                                                 00068900
               LCLC  &ZMAC_LR                                           00069000
&ZMAC_LR       SETC  'LR'                                               00069100
               LCLC  &ZMAC_L                                            00069200
&ZMAC_L        SETC  'L'                                                00069300
               LCLC  &ZMAC_ST                                           00069400
&ZMAC_ST       SETC  'ST'                                               00069500
               LCLC  &ZMAC_LLGT                                         00069600
&ZMAC_LLGT     SETC  'L'                                                00069700
               LCLC  &ZMAC_LGR                                          00069800
&ZMAC_LGR      SETC  'LR'                                               00069900
               LCLC  &ZMAC_LG                                           00070000
&ZMAC_LG       SETC  'L'                                                00070100
               LCLC  &ZMAC_STG                                          00070200
&ZMAC_STG      SETC  'ST'                                               00070300
               LCLA  &ZMACRET    MACRO RETURN CODE                      00070400
&ZMACRET       SETA  0           ASSUME NO ERRORS                       00070500
.*                                                                      00070600
               LCLC  &ZCSYSLIST(255)            NONXKEY, POS ARRAY      00070700
               LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()             00070800
               LCLA  &ZPLLEN     PARAMETER LIST LENGTH                  00070900
               LCLC  &ZENDBASEPL                End of base PL          00071000
               LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                  00071100
.*******************************************************************    00071200
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00071300
.*******************************************************************    00071400
               LCLA  &ZI         INDEX FOR ARRAY                        00071500
               LCLA  &ZJ         INDEX FOR PARMS                        00071600
               LCLA  &ZK         INDEX FOR PARSE                        00071700
               LCLA  &ZLO        LOW RANGE VALUE                        00071800
               LCLA  &ZHI        HIGH RANGE VALUE                       00071900
               LCLC  &ZW         WORK AREA FOR PARM                     00072000
.********************************************************************   00072100
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00072200
.********************************************************************   00072300
               GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                00072400
               GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE         00072500
               GBLA  &SYSALVL    SYSSTATE ARCHLVL                       00072600
               GBLC  &SYSAM64    SYSSTATE AMODE64                       00072700
.*                                                                      00072800
               AIF   (K'&SYSASCE GT 0).ZSYS4    SYS STATE DEFINED       00072900
               AIF   (K'&SYSSPLV GT 0).ZSYS2    SP LEVEL DEFINED        00073000
               SPLEVEL  TEST                                            00073100
.ZSYS2         ANOP  ,                                                  00073200
               AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1              00073300
               AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1              00073400
               SYSSTATE TEST                                            00073500
               AGO   .ZSYS4                                             00073600
.ZSYS3         ANOP  ,                                                  00073700
&SYSASCE       SETC  'P'         ASSUME SYSSTATE PRIMARY                00073800
.ZSYS4         ANOP  ,                                                  00073900
               AIF   ('&SYSAM64' NE 'YES').ZSYSN64                      00074000
&ZMAC_LLGT     SETC 'LLGT'                                              00074100
&ZMAC_LGR      SETC 'LGR'                                               00074200
&ZMAC_LG       SETC 'LG'                                                00074300
&ZMAC_STG      SETC 'STG'                                               00074400
.ZSYSN64       ANOP  ,                                                  00074500
               AIF   (&SYSALVL LE 1).ZSYS4A                             00074600
&ZMAC_G        SETC 'G'                                                 00074700
&ZMAC_LR       SETC 'LGR'                                               00074800
&ZMAC_L        SETC 'LG'                                                00074900
&ZMAC_ST       SETC 'STG'                                               00075000
.ZSYS4A        ANOP  ,                                                  00075100
.*******************************************************************    00075200
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00075300
.*******************************************************************    00075400
               LCLC  &XSTOKEN    ++ NAME                                00075500
               LCLC  &XFUNCTION  ++ VALUE                               00075600
               LCLC  &XHEALTH    ++ NAME                                00075700
               LCLC  &XSUBSYS    ++ NAME                                00075800
               LCLC  &XSUBSYSNM  ++ NAME                                00075900
               LCLC  &XHEALTHRSN                ++ NAME                 00076000
               LCLC  &XRETCODE   ++ NAME                                00076100
               LCLC  &XRSNCODE   ++ NAME                                00076200
               LCLA  &XPLISTVER  ++ VALUE                               00076300
               LCLC  &XMF        ++ VALUE                               00076400
               LCLC  &XMFCTRL    ++ NAME                                00076500
               LCLC  &XMFATTR    ++ VALUE                               00076600
               LCLC  &XMFSCK     ++ VALUE                               00076700
.*******************************************************************    00076800
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00076900
.*******************************************************************    00077000
               LCLC  &ZXSTOKEN   ++ INPUT NAME                          00077100
               LCLC  &ZXFUNCTION                ++ INPUT VALUE          00077200
               LCLC  &ZXHEALTH   ++ INPUT NAME                          00077300
               LCLC  &ZXSUBSYS   ++ INPUT NAME                          00077400
               LCLC  &ZXSUBSYSNM                ++ INPUT NAME           00077500
               LCLC  &ZXHEALTHRSN               ++ INPUT NAME           00077600
               LCLC  &ZXRETCODE  ++ OUTPUT NAME                         00077700
               LCLC  &ZXRSNCODE  ++ OUTPUT NAME                         00077800
               LCLC  &ZXPLISTVER                ++ INPUT VALUE          00077900
               LCLC  &ZXMF       ++ INPUT VALUE                         00078000
               LCLC  &ZXMFCTRL   ++ INPUT NAME                          00078100
               LCLC  &ZXMFATTR   ++ INPUT VALUE                         00078200
               LCLC  &ZXMFSCK    ++ INPUT VALUE                         00078300
.********************************************************************   00078400
.***AC.PLV01  PROCESS PLISTVER                                      *   00078500
.********************************************************************   00078600
&XPLISTVER      SETA  0                                                 00078700
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00078800
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00078900
&XPLISTVER      SETA  1                                                 00079000
.ZPLV0          ANOP  ,                                                 00079100
.*                                                                      00079200
                AIF   ('&FUNCTION' EQ '').ZPLV1E                        00079300
                AIF   (&XPLISTVER GE 1).ZPLV1E                          00079400
&XPLISTVER      SETA  1                                                 00079500
.ZPLV1E         ANOP  ,                                                 00079600
.*                                                                      00079700
                AIF   ('&SUBSYS' EQ '').ZPLV2E                          00079800
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00079900
&XPLISTVER      SETA  1                                                 00080000
.ZPLV2E         ANOP  ,                                                 00080100
.*                                                                      00080200
                AIF   ('&SUBSYSNM' EQ '').ZPLV3E                        00080300
                AIF   (&XPLISTVER GE 1).ZPLV3E                          00080400
&XPLISTVER      SETA  1                                                 00080500
.ZPLV3E         ANOP  ,                                                 00080600
.*                                                                      00080700
                AIF   ('&HEALTHRSN' EQ '').ZPLV4E                       00080800
                AIF   (&XPLISTVER GE 1).ZPLV4E                          00080900
&XPLISTVER      SETA  1                                                 00081000
.ZPLV4E         ANOP  ,                                                 00081100
.*                                                                      00081200
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00081300
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00081400
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00081500
.*-------------------------------------------------------------------   00081600
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00081700
&ZMS            SETC  '"PLISTVER='                                      00081800
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00081900
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00082000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00082100
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00082200
                AGO   .ZPVCK2                                           00082300
.ZPVCK3         ANOP  ,                                                 00082400
.*-------------------------------------------------------------------   00082500
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00082600
&ZMS            SETC  '"PLISTVER='                                      00082700
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00082800
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00082900
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00083000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00083100
                AGO   .ZPVCKE                                           00083200
.ZPVCK2         ANOP  ,                                                 00083300
.*-------------------------------------------------------------------   00083400
&ZCVAL          SETC  '&PLISTVER(1)'                                    00083500
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00083600
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00083700
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00083800
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00083900
                AIF   (&ZN LE 1).ZPVCK4A   NOT HIGH                     00084000
.ZPVCK6         ANOP  ,                                                 00084100
&ZMS            SETC  '"PLISTVER='                                      00084200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00084300
&ZMS            SETC  '&ZMS THE RANGE IS "0-1"'                         00084400
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00084500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00084600
&XPLISTVER      SETA  1                                                 00084700
                AGO   .ZPVCKE                                           00084800
.*-------------------------------------------------------------------   00084900
.ZPVCK4A        ANOP  ,                                                 00085000
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00085100
&ZMS            SETC  'PLISTVER='                                       00085200
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00085300
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00085400
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00085500
                MNOTE 8,' &ZMS IS REQUIRED.'                            00085600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00085700
                AGO   .ZPVCK5                                           00085800
.ZPVCK4         ANOP  ,                                                 00085900
&XPLISTVER      SETA  &PLISTVER(1)                                      00086000
.ZPVCK5         ANOP  ,                                                 00086100
.ZPVCKE         ANOP  ,                                                 00086200
.********************************************************************   00086300
.***AG.MF01 PROCESS MF MACRO FORMS                                      00086400
.********************************************************************   00086500
               ACTR  10000                                              00086600
.*------------------------------------------------------------------    00086700
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00086800
&XMF           SETC  ''          INITIALIZE XVARIABLE                   00086900
.*-------------------------------------------------------------------   00087000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00087100
.ZG32          ANOP  ,                                                  00087200
&ZTLC          SETC 'S'                                                 00087300
               AIF   ('&MF(1)' NE '&ZTLC').ZG33                         00087400
&XMF           SETC  'S'         SET KEYWORD                            00087500
               AIF   (N'&MF LE 1).ZG32A         CK NUM                  00087600
&ZMS           SETC  '"MF='                                             00087700
&ZMS           SETC  '&ZMS.&MF"'                                        00087800
&ZMS           SETC  '&ZMS "MF"'                                        00087900
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00088000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00088100
.ZG32A         ANOP  ,                                                  00088200
.*-------------------------------------------------------------------   00088300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088400
.ZG33          ANOP  ,                                                  00088500
&ZTLC          SETC 'L'                                                 00088600
               AIF   ('&MF(1)' NE '&ZTLC').ZG40                         00088700
&XMF           SETC  'L'         SET KEYWORD                            00088800
               AIF   (N'&MF LE 3).ZG33A         CK NUM                  00088900
&ZMS           SETC  '"MF='                                             00089000
&ZMS           SETC  '&ZMS.&MF"'                                        00089100
&ZMS           SETC  '&ZMS "MF"'                                        00089200
               MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'               00089300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00089400
.ZG33A         ANOP  ,                                                  00089500
.*-------------------------------------------------------------------   00089600
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00089700
               AIF   (N'&SYSLIST NE 0).ZG33B    POSITIONALS?            00089800
               AIF   ('&STOKEN' NE '').ZG33B    KEYS?                   00089900
               AIF   ('&FUNCTION' NE '').ZG33B  KEYS?                   00090000
               AIF   ('&HEALTH' NE '').ZG33B    KEYS?                   00090100
               AIF   ('&SUBSYS' NE '').ZG33B    KEYS?                   00090200
               AIF   ('&SUBSYSNM' NE '').ZG33B  KEYS?                   00090300
               AIF   ('&HEALTHRSN' NE '').ZG33B  KEYS?                  00090400
               AIF   ('&RETCODE' NE '').ZG33B   KEYS?                   00090500
               AIF   ('&RSNCODE' NE '').ZG33B   KEYS?                   00090600
               AGO    .ZG33C     INVOCATION OKAY                        00090700
.ZG33B         ANOP  ,                                                  00090800
&ZMS           SETC  'THE "L" FORM OF "MF"'                             00090900
&ZMS           SETC  '&ZMS CAN ONLY HAVE'                               00091000
&ZMS           SETC  '&ZMS THE "PLISTVER" KEY'                          00091100
               MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'             00091200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00091300
.ZG33C         ANOP  ,                                                  00091400
.*-------------------------------------------------------------------   00091500
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00091600
&ZXMFCTRL      SETC  'INPUT'     SET IN/OUTPUT                          00091700
&XMFCTRL       SETC  '&MF(2,1)'  SET XVARIABLE                          00091800
               AIF   (N'&MF(2) GT 1).ZG35B      MULTI                   00091900
&XMFCTRL       SETC  '&MF(2)'    SET XVARIABLE                          00092000
.ZG35B         AIF   (K'&MF(2) GT 0).ZG35C                              00092100
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00092200
&ZMS           SETC  'WHEN "L" IS SPECIFIED'                            00092300
&ZMS           SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                00092400
               MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                       00092500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00092600
.ZG35C         ANOP  ,                                                  00092700
.*-------------------------------------------------------------------   00092800
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00092900
               AIF   (K'&ZXMFCTRL LE 0).ZG35P   NOT I/O                 00093000
               AIF   ('&XMFCTRL'(1,1) NE '(').ZG35P                     00093100
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00093200
&ZMS           SETC  '"MF='                                             00093300
&ZMS           SETC  '&ZMS.&MF"'                                        00093400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00093500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                  00093600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00093700
.ZG35P         ANOP  ,                                                  00093800
.*-------------------------------------------------------------------   00093900
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00094000
&ZXMFATTR      SETC  'INPUT'     SET IN/OUTPUT                          00094100
&XMFATTR       SETC  '0D'                                               00094200
               AIF   (K'&MF(3) LE 0).ZG38B      PARM                    00094300
&XMFATTR       SETC  '&MF(3,1)'  SET XVARIABLE                          00094400
               AIF   (N'&MF(3) GT 1).ZG38B      MULTI                   00094500
&XMFATTR       SETC  '&MF(3)'    SET XVARIABLE                          00094600
.ZG38B         ANOP  ,                                                  00094700
.*-------------------------------------------------------------------   00094800
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00094900
               AIF   (K'&ZXMFATTR LE 0).ZG38P   NOT I/O                 00095000
               AIF   ('&XMFATTR'(1,1) NE '(').ZG38P                     00095100
&ZXMFATTR      SETC  ''          RESET IN/OUTPUT                        00095200
&ZMS           SETC  '"MF='                                             00095300
&ZMS           SETC  '&ZMS.&MF"'                                        00095400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00095500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                  00095600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00095700
.ZG38P         ANOP  ,                                                  00095800
.*-------------------------------------------------------------------   00095900
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00096000
               AIF   (K'&ZXMFATTR LE 0).ZG38S   NOT I/O                 00096100
               AIF   (K'&XMFATTR LE 60).ZG38S   LNG OK                  00096200
&ZXMFATTR      SETC  ''          RESET IN/OUTPUT                        00096300
&ZMS           SETC  '"MF='                                             00096400
&ZMS           SETC  '&ZMS.&MF"'                                        00096500
&ZMS           SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'              00096600
               MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                 00096700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00096800
.ZG38S         ANOP  ,                                                  00096900
.*-------------------------------------------------------------------   00097000
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00097100
.ZG40          ANOP  ,                                                  00097200
&ZTLC          SETC 'E'                                                 00097300
               AIF   ('&MF(1)' NE '&ZTLC').ZG48                         00097400
&XMF           SETC  'E'         SET KEYWORD                            00097500
               AIF   (N'&MF LE 3).ZG40A         CK NUM                  00097600
&ZMS           SETC  '"MF='                                             00097700
&ZMS           SETC  '&ZMS.&MF"'                                        00097800
&ZMS           SETC  '&ZMS "MF"'                                        00097900
               MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'               00098000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00098100
.ZG40A         ANOP  ,                                                  00098200
.*-------------------------------------------------------------------   00098300
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00098400
&ZXMFCTRL      SETC  'INPUT'     SET IN/OUTPUT                          00098500
&XMFCTRL       SETC  '&MF(2,1)'  SET XVARIABLE                          00098600
               AIF   (N'&MF(2) GT 1).ZG42B      MULTI                   00098700
&XMFCTRL       SETC  '&MF(2)'    SET XVARIABLE                          00098800
.ZG42B         AIF   (K'&MF(2) GT 0).ZG42C                              00098900
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00099000
&ZMS           SETC  'WHEN "E" IS SPECIFIED'                            00099100
&ZMS           SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                00099200
               MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                       00099300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00099400
.ZG42C         ANOP  ,                                                  00099500
.*-------------------------------------------------------------------   00099600
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00099700
               AIF   (K'&ZXMFCTRL LE 0).ZG42R   NOT I/O                 00099800
               AIF   ('&XMFCTRL'(1,1) NE '(').ZG42R                     00099900
&ZCGPR         SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                         00100000
               AIF   ('&ZCGPR'(1,1) NE '0').ZG42P                       00100100
               AIF   (K'&ZCGPR GT 2).ZG42Q                              00100200
               AIF   ('&ZCGPR' EQ '0').ZG42Q                            00100300
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00100400
               AIF   (T'&ZCGPR NE 'N').ZG42Q    INVALID REG NAME        00100500
.ZG42P         ANOP  ,                                                  00100600
               AIF   (T'&ZCGPR NE 'N').ZG42R    NON NUMERIC             00100700
               AIF   ('&ZCGPR' LT '1').ZG42Q                            00100800
               AIF   ('&ZCGPR' LE '12').ZG42R                           00100900
.ZG42Q         ANOP  ,                                                  00101000
&ZMS           SETC  '"MF='                                             00101100
&ZMS           SETC  '&ZMS.&MF"'                                        00101200
&ZMS           SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'          00101300
               MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                   00101400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00101500
.ZG42R         ANOP  ,                                                  00101600
.*-------------------------------------------------------------------   00101700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00101800
&XMFSCK        SETC  ''          INITIALIZE XVARIABLE                   00101900
.ZG46A   AIF   ('&MF(3)' NE 'COMPLETE').ZG47A                           00102000
&XMFSCK        SETC  'COMPLETE'  SET KEYWORD                            00102100
.*-------------------------------------------------------------------   00102200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00102300
.ZG47A         AIF   (K'&XMFSCK GT 0).ZG47C     KEYWORD                 00102400
               AIF   (K'&MF(3) LE 0).ZG47B                              00102500
&ZMS           SETC  '"MF='                                             00102600
&ZMS           SETC  '&ZMS.&MF"'                                        00102700
&ZMS           SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '          00102800
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00102900
&ZMS           SETC  '&ZMS "COMPLETE".'                                 00103000
               MNOTE 8,' &ZMS '                                         00103100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00103200
.ZG47B         ANOP  ,                                                  00103300
&XMFSCK        SETC  'COMPLETE'  SET DEFAULT KEYWORD                    00103400
.ZG47C         ANOP  ,                                                  00103500
&ZXMFSCK       SETC  'INPUT'     SET IN/OUTPUT                          00103600
.*------------------------------------------------------------------    00103700
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00103800
.ZG48          ANOP  ,                                                  00103900
&ZXMF          SETC  'INPUT'     SET IN/OUTPUT                          00104000
               AIF   (K'&XMF GT 0).ZG48E        VALID ARG               00104100
               AIF   (T'&MF EQ 'O').ZG48D       OMITTED                 00104200
&ZASYSLNDX     SETA  0                                                  00104300
.ZG48A         ANOP  ,           POSITIONAL MACRO KEY                   00104400
&ZASYSLNDX     SETA  &ZASYSLNDX+1                                       00104500
               AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG48C                   00104600
&ZTLC          SETC 'MF'                                                00104700
               AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG48A          00104800
.ZG48B         ANOP  ,                                                  00104900
&ZXMF          SETC  ''          RESET IN/OUTPUT                        00105000
&ZMS           SETC  'THE "MF" KEY'                                     00105100
&ZMS           SETC  '&ZMS MUST CONTAIN ONE'                            00105200
               MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                   00105300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00105400
               AGO   .ZG48E                                             00105500
.ZG48C         ANOP  ,                                                  00105600
&ZXMF          SETC  ''          RESET IN/OUTPUT                        00105700
&ZMS           SETC  '"MF='                                             00105800
&ZMS           SETC  '&ZMS.&MF"'                                        00105900
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00106000
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00106100
&ZMS           SETC  '&ZMS "S",'                                        00106200
&ZMS           SETC  '&ZMS "L",'                                        00106300
&ZMS           SETC  '&ZMS OR "E".'                                     00106400
               MNOTE 8,' &ZMS '                                         00106500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00106600
               AGO   .ZG48E                                             00106700
.ZG48D         ANOP  ,                                                  00106800
&XMF           SETC  'S'         SET DEFAULT KEYWORD                    00106900
&XMFSCK        SETC  'COMPLETE'  COMPLETE CHECKING                      00107000
.ZG48E         ANOP  ,                                                  00107100
.********************************************************************   00107200
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00107300
.********************************************************************   00107400
               ACTR  10000                                              00107500
.*-------------------------------------------------------------------   00107600
.***AG.MF03 MF=(SLE)                                                    00107700
               AIF   ('&XMF' EQ 'L').ZGMFX                              00107800
.*----------------------------------------------------------------***   00107900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00108000
               AIF   (N'&STOKEN LE 1).ZG2A      CK NUM                  00108100
&ZMS           SETC  '"STOKEN='                                         00108200
&ZMS           SETC  '&ZMS.&STOKEN"'                                    00108300
&ZMS           SETC  '&ZMS "STOKEN"'                                    00108400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00108500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00108600
.ZG2A          ANOP  ,                                                  00108700
.*-------------------------------------------------------------------   00108800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00108900
&ZXSTOKEN      SETC  'INPUT'     SET IN/OUTPUT                          00109000
&XSTOKEN       SETC  '&STOKEN(1)'               SET XVARIABLE           00109100
               AIF   (N'&STOKEN GT 1).ZG2B      MULTI                   00109200
&XSTOKEN       SETC  '&STOKEN'   SET XVARIABLE                          00109300
.ZG2B          AIF   (K'&STOKEN(1) GT 0).ZG2C                           00109400
&ZXSTOKEN      SETC  ''          RESET IN/OUTPUT                        00109500
&ZMS           SETC  ' '                                                00109600
&ZMS           SETC  '&ZMS "STOKEN" KEY AND ITS'                        00109700
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00109800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00109900
.ZG2C          ANOP  ,                                                  00110000
.*-------------------------------------------------------------------   00110100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00110200
               AIF   (K'&ZXSTOKEN LE 0).ZG2R    NOT I/O                 00110300
               AIF   ('&XSTOKEN'(1,1) NE '(').ZG2R                      00110400
&ZCGPR         SETC  '&XSTOKEN'(2,K'&XSTOKEN-2)                         00110500
               AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                        00110600
               AIF   (K'&ZCGPR GT 2).ZG2Q                               00110700
               AIF   ('&ZCGPR' EQ '0').ZG2Q                             00110800
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00110900
               AIF   (T'&ZCGPR NE 'N').ZG2Q     INVALID REG NAME        00111000
.ZG2P          ANOP  ,                                                  00111100
               AIF   (T'&ZCGPR NE 'N').ZG2R     NON NUMERIC             00111200
               AIF   ('&ZCGPR' LT '2').ZG2Q                             00111300
               AIF   ('&ZCGPR' LE '12').ZG2R                            00111400
.ZG2Q          ANOP  ,                                                  00111500
&ZMS           SETC  '"STOKEN='                                         00111600
&ZMS           SETC  '&ZMS.&STOKEN"'                                    00111700
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00111800
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00111900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00112000
.ZG2R          ANOP  ,                                                  00112100
.*----------------------------------------------------------------***   00112200
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00112300
               AIF   (N'&FUNCTION LE 1).ZG5A    CK NUM                  00112400
&ZMS           SETC  '"FUNCTION='                                       00112500
&ZMS           SETC  '&ZMS.&FUNCTION"'                                  00112600
&ZMS           SETC  '&ZMS "FUNCTION"'                                  00112700
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00112800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00112900
.ZG5A          ANOP  ,                                                  00113000
.*-------------------------------------------------------------------   00113100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00113200
&XFUNCTION     SETC  ''          INITIALIZE XVARIABLE                   00113300
.ZG6A   AIF   ('&FUNCTION(1)' NE 'SET').ZG7A                            00113400
&XFUNCTION     SETC  'SET'       SET KEYWORD                            00113500
.*-------------------------------------------------------------------   00113600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00113700
.ZG7A   AIF   ('&FUNCTION(1)' NE 'RESET').ZG8A                          00113800
&XFUNCTION     SETC  'RESET'     SET KEYWORD                            00113900
.*-------------------------------------------------------------------   00114000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00114100
.ZG8A          AIF   (K'&XFUNCTION GT 0).ZG8C   KEYWORD                 00114200
               AIF   (K'&FUNCTION(1) LE 0).ZG8B                         00114300
&ZMS           SETC  '"FUNCTION='                                       00114400
&ZMS           SETC  '&ZMS.&FUNCTION"'                                  00114500
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00114600
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00114700
&ZMS           SETC  '&ZMS "SET"'                                       00114800
&ZMS           SETC  '&ZMS OR "RESET".'                                 00114900
               MNOTE 8,' &ZMS '                                         00115000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00115100
.ZG8B          ANOP  ,                                                  00115200
&XFUNCTION     SETC  'SET'       SET DEFAULT KEYWORD                    00115300
.ZG8C          ANOP  ,                                                  00115400
&ZXFUNCTION    SETC  'INPUT'     SET IN/OUTPUT                          00115500
.*----------------------------------------------------------------***   00115600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00115700
               AIF   (N'&HEALTH LE 1).ZG10A     CK NUM                  00115800
&ZMS           SETC  '"HEALTH='                                         00115900
&ZMS           SETC  '&ZMS.&HEALTH"'                                    00116000
&ZMS           SETC  '&ZMS "HEALTH"'                                    00116100
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00116200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00116300
.ZG10A         ANOP  ,                                                  00116400
.*-------------------------------------------------------------------   00116500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00116600
&ZXHEALTH      SETC  'INPUT'     SET IN/OUTPUT                          00116700
&XHEALTH       SETC  '&HEALTH(1)'               SET XVARIABLE           00116800
               AIF   (N'&HEALTH GT 1).ZG10B     MULTI                   00116900
&XHEALTH       SETC  '&HEALTH'   SET XVARIABLE                          00117000
.ZG10B         AIF   (K'&HEALTH(1) GT 0).ZG10C                          00117100
&ZXHEALTH      SETC  ''          RESET IN/OUTPUT                        00117200
&ZMS           SETC  ' '                                                00117300
&ZMS           SETC  '&ZMS "HEALTH" KEY AND ITS'                        00117400
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00117500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00117600
.ZG10C         ANOP  ,                                                  00117700
.*-------------------------------------------------------------------   00117800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00117900
               AIF   (K'&ZXHEALTH LE 0).ZG10R   NOT I/O                 00118000
               AIF   ('&XHEALTH'(1,1) NE '(').ZG10R                     00118100
&ZCGPR         SETC  '&XHEALTH'(2,K'&XHEALTH-2)                         00118200
               AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                       00118300
               AIF   (K'&ZCGPR GT 2).ZG10Q                              00118400
               AIF   ('&ZCGPR' EQ '0').ZG10Q                            00118500
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00118600
               AIF   (T'&ZCGPR NE 'N').ZG10Q    INVALID REG NAME        00118700
.ZG10P         ANOP  ,                                                  00118800
               AIF   (T'&ZCGPR NE 'N').ZG10R    NON NUMERIC             00118900
               AIF   ('&ZCGPR' LT '2').ZG10Q                            00119000
               AIF   ('&ZCGPR' LE '12').ZG10R                           00119100
.ZG10Q         ANOP  ,                                                  00119200
&ZMS           SETC  '"HEALTH='                                         00119300
&ZMS           SETC  '&ZMS.&HEALTH"'                                    00119400
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00119500
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00119600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00119700
.ZG10R         ANOP  ,                                                  00119800
.*----------------------------------------------------------------***   00119900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00120000
               AIF   (N'&SUBSYS LE 1).ZG13A     CK NUM                  00120100
&ZMS           SETC  '"SUBSYS='                                         00120200
&ZMS           SETC  '&ZMS.&SUBSYS"'                                    00120300
&ZMS           SETC  '&ZMS "SUBSYS"'                                    00120400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00120500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00120600
.ZG13A         ANOP  ,                                                  00120700
.*-------------------------------------------------------------------   00120800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00120900
&ZXSUBSYS      SETC  'INPUT'     SET IN/OUTPUT                          00121000
&XSUBSYS       SETC  'NO_SUBSYS'                                        00121100
               AIF   (K'&SUBSYS(1) LE 0).ZG13B  PARM                    00121200
&XSUBSYS       SETC  '&SUBSYS(1)'               SET XVARIABLE           00121300
               AIF   (N'&SUBSYS GT 1).ZG13B     MULTI                   00121400
&XSUBSYS       SETC  '&SUBSYS'   SET XVARIABLE                          00121500
.ZG13B         ANOP  ,                                                  00121600
.*-------------------------------------------------------------------   00121700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00121800
               AIF   (K'&ZXSUBSYS LE 0).ZG13R   NOT I/O                 00121900
         AIF   ('&XSUBSYS' EQ 'NO_SUBSYS').ZG13R                        00122000
               AIF   ('&XSUBSYS'(1,1) NE '(').ZG13R                     00122100
&ZCGPR         SETC  '&XSUBSYS'(2,K'&XSUBSYS-2)                         00122200
               AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                       00122300
               AIF   (K'&ZCGPR GT 2).ZG13Q                              00122400
               AIF   ('&ZCGPR' EQ '0').ZG13Q                            00122500
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00122600
               AIF   (T'&ZCGPR NE 'N').ZG13Q    INVALID REG NAME        00122700
.ZG13P         ANOP  ,                                                  00122800
               AIF   (T'&ZCGPR NE 'N').ZG13R    NON NUMERIC             00122900
               AIF   ('&ZCGPR' LT '2').ZG13Q                            00123000
               AIF   ('&ZCGPR' LE '12').ZG13R                           00123100
.ZG13Q         ANOP  ,                                                  00123200
&ZMS           SETC  '"SUBSYS='                                         00123300
&ZMS           SETC  '&ZMS.&SUBSYS"'                                    00123400
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00123500
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00123600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00123700
.ZG13R         ANOP  ,                                                  00123800
.*----------------------------------------------------------------***   00123900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00124000
               AIF   (N'&SUBSYSNM LE 1).ZG16A   CK NUM                  00124100
&ZMS           SETC  '"SUBSYSNM='                                       00124200
&ZMS           SETC  '&ZMS.&SUBSYSNM"'                                  00124300
&ZMS           SETC  '&ZMS "SUBSYSNM"'                                  00124400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00124500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00124600
.ZG16A         ANOP  ,                                                  00124700
.*-------------------------------------------------------------------   00124800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00124900
&ZXSUBSYSNM    SETC  'INPUT'     SET IN/OUTPUT                          00125000
&XSUBSYSNM     SETC  'NO_SUBSYSNM'                                      00125100
               AIF   (K'&SUBSYSNM(1) LE 0).ZG16B  PARM                  00125200
&XSUBSYSNM     SETC  '&SUBSYSNM(1)'             SET XVARIABLE           00125300
               AIF   (N'&SUBSYSNM GT 1).ZG16B   MULTI                   00125400
&XSUBSYSNM     SETC  '&SUBSYSNM'                SET XVARIABLE           00125500
.ZG16B         ANOP  ,                                                  00125600
.*-------------------------------------------------------------------   00125700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00125800
               AIF   (K'&ZXSUBSYSNM LE 0).ZG16R  NOT I/O                00125900
         AIF   ('&XSUBSYSNM' EQ 'NO_SUBSYSNM').ZG16R                    00126000
               AIF   ('&XSUBSYSNM'(1,1) NE '(').ZG16R                   00126100
&ZCGPR         SETC  '&XSUBSYSNM'(2,K'&XSUBSYSNM-2)                     00126200
               AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                       00126300
               AIF   (K'&ZCGPR GT 2).ZG16Q                              00126400
               AIF   ('&ZCGPR' EQ '0').ZG16Q                            00126500
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00126600
               AIF   (T'&ZCGPR NE 'N').ZG16Q    INVALID REG NAME        00126700
.ZG16P         ANOP  ,                                                  00126800
               AIF   (T'&ZCGPR NE 'N').ZG16R    NON NUMERIC             00126900
               AIF   ('&ZCGPR' LT '2').ZG16Q                            00127000
               AIF   ('&ZCGPR' LE '12').ZG16R                           00127100
.ZG16Q         ANOP  ,                                                  00127200
&ZMS           SETC  '"SUBSYSNM='                                       00127300
&ZMS           SETC  '&ZMS.&SUBSYSNM"'                                  00127400
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00127500
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00127600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00127700
.ZG16R         ANOP  ,                                                  00127800
.*----------------------------------------------------------------***   00127900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00128000
               AIF   (N'&HEALTHRSN LE 1).ZG19A  CK NUM                  00128100
&ZMS           SETC  '"HEALTHRSN='                                      00128200
&ZMS           SETC  '&ZMS.&HEALTHRSN"'                                 00128300
&ZMS           SETC  '&ZMS "HEALTHRSN"'                                 00128400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00128500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00128600
.ZG19A         ANOP  ,                                                  00128700
.*-------------------------------------------------------------------   00128800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00128900
&ZXHEALTHRSN   SETC  'INPUT'     SET IN/OUTPUT                          00129000
&XHEALTHRSN    SETC  'NO_RSN'                                           00129100
               AIF   (K'&HEALTHRSN(1) LE 0).ZG19B  PARM                 00129200
&XHEALTHRSN    SETC  '&HEALTHRSN(1)'            SET XVARIABLE           00129300
               AIF   (N'&HEALTHRSN GT 1).ZG19B  MULTI                   00129400
&XHEALTHRSN    SETC  '&HEALTHRSN'               SET XVARIABLE           00129500
.ZG19B         ANOP  ,                                                  00129600
.*-------------------------------------------------------------------   00129700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00129800
               AIF   (K'&ZXHEALTHRSN LE 0).ZG19R  NOT I/O               00129900
         AIF   ('&XHEALTHRSN' EQ 'NO_RSN').ZG19R                        00130000
               AIF   ('&XHEALTHRSN'(1,1) NE '(').ZG19R                  00130100
&ZCGPR         SETC  '&XHEALTHRSN'(2,K'&XHEALTHRSN-2)                   00130200
               AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                       00130300
               AIF   (K'&ZCGPR GT 2).ZG19Q                              00130400
               AIF   ('&ZCGPR' EQ '0').ZG19Q                            00130500
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00130600
               AIF   (T'&ZCGPR NE 'N').ZG19Q    INVALID REG NAME        00130700
.ZG19P         ANOP  ,                                                  00130800
               AIF   (T'&ZCGPR NE 'N').ZG19R    NON NUMERIC             00130900
               AIF   ('&ZCGPR' LT '2').ZG19Q                            00131000
               AIF   ('&ZCGPR' LE '12').ZG19R                           00131100
.ZG19Q         ANOP  ,                                                  00131200
&ZMS           SETC  '"HEALTHRSN='                                      00131300
&ZMS           SETC  '&ZMS.&HEALTHRSN"'                                 00131400
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00131500
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00131600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00131700
.ZG19R         ANOP  ,                                                  00131800
.*----------------------------------------------------------------***   00131900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00132000
               AIF   (N'&RETCODE LE 1).ZG22A    CK NUM                  00132100
&ZMS           SETC  '"RETCODE='                                        00132200
&ZMS           SETC  '&ZMS.&RETCODE"'                                   00132300
&ZMS           SETC  '&ZMS "RETCODE"'                                   00132400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00132500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00132600
.ZG22A         ANOP  ,                                                  00132700
.*-------------------------------------------------------------------   00132800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00132900
               AIF   (K'&RETCODE(1) LE 0).ZG22C  NO PARM                00133000
&ZXRETCODE     SETC  'OUTPUT'    SET OUTPUT                             00133100
&XRETCODE      SETC  '&RETCODE(1)'              SET XVARIABLE           00133200
               AIF   (N'&RETCODE GT 1).ZG22C                            00133300
&XRETCODE      SETC  '&RETCODE'  SET XVARIABLE                          00133400
.ZG22C         ANOP  ,                                                  00133500
.*-------------------------------------------------------------------   00133600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00133700
               AIF   (K'&ZXRETCODE LE 0).ZG22R  NOT I/O                 00133800
               AIF   ('&XRETCODE'(1,1) NE '(').ZG22R                    00133900
&ZCGPR         SETC  '&XRETCODE'(2,K'&XRETCODE-2)                       00134000
               AIF   ('&ZCGPR'(1,1) NE '0').ZG22P                       00134100
               AIF   (K'&ZCGPR GT 2).ZG22Q                              00134200
               AIF   ('&ZCGPR' EQ '0').ZG22Q                            00134300
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00134400
               AIF   (T'&ZCGPR NE 'N').ZG22Q    INVALID REG NAME        00134500
.ZG22P         ANOP  ,                                                  00134600
               AIF   (T'&ZCGPR NE 'N').ZG22R    NON NUMERIC             00134700
               AIF   ('&ZCGPR' EQ '15').ZG22R                           00134800
               AIF   ('&ZCGPR' LT '2').ZG22Q                            00134900
               AIF   ('&ZCGPR' LE '12').ZG22R                           00135000
.ZG22Q         ANOP  ,                                                  00135100
&ZMS           SETC  '"RETCODE='                                        00135200
&ZMS           SETC  '&ZMS.&RETCODE"'                                   00135300
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00135400
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'           00135500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00135600
.ZG22R         ANOP  ,                                                  00135700
.*----------------------------------------------------------------***   00135800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00135900
               AIF   (N'&RSNCODE LE 1).ZG25A    CK NUM                  00136000
&ZMS           SETC  '"RSNCODE='                                        00136100
&ZMS           SETC  '&ZMS.&RSNCODE"'                                   00136200
&ZMS           SETC  '&ZMS "RSNCODE"'                                   00136300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00136400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00136500
.ZG25A         ANOP  ,                                                  00136600
.*-------------------------------------------------------------------   00136700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00136800
               AIF   (K'&RSNCODE(1) LE 0).ZG25C  NO PARM                00136900
&ZXRSNCODE     SETC  'OUTPUT'    SET OUTPUT                             00137000
&XRSNCODE      SETC  '&RSNCODE(1)'              SET XVARIABLE           00137100
               AIF   (N'&RSNCODE GT 1).ZG25C                            00137200
&XRSNCODE      SETC  '&RSNCODE'  SET XVARIABLE                          00137300
.ZG25C         ANOP  ,                                                  00137400
.*-------------------------------------------------------------------   00137500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00137600
               AIF   (K'&ZXRSNCODE LE 0).ZG25R  NOT I/O                 00137700
               AIF   ('&XRSNCODE'(1,1) NE '(').ZG25R                    00137800
&ZCGPR         SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                       00137900
               AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                       00138000
               AIF   (K'&ZCGPR GT 2).ZG25Q                              00138100
               AIF   ('&ZCGPR' EQ '0').ZG25R                            00138200
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00138300
               AIF   (T'&ZCGPR NE 'N').ZG25Q    INVALID REG NAME        00138400
.ZG25P         ANOP  ,                                                  00138500
               AIF   (T'&ZCGPR NE 'N').ZG25R    NON NUMERIC             00138600
               AIF   ('&ZCGPR' EQ '0').ZG25R                            00138700
               AIF   ('&ZCGPR' LT '2').ZG25Q                            00138800
               AIF   ('&ZCGPR' LE '12').ZG25R                           00138900
.ZG25Q         ANOP  ,                                                  00139000
&ZMS           SETC  '"RSNCODE='                                        00139100
&ZMS           SETC  '&ZMS.&RSNCODE"'                                   00139200
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00139300
               MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'            00139400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00139500
.ZG25R         ANOP  ,                                                  00139600
.******************************************************************     00139700
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00139800
.******************************************************************     00139900
               ACTR  10000                                              00140000
.*----------------------------------------------------------------***   00140100
.***AH.P02 EXTRA POSITIONALS                                            00140200
               AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS               00140300
               AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL               00140400
               AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL           00140500
               AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL            00140600
.ZGLISTX1      ANOP  ,                                                  00140700
&ZCVAL         SETC  ''          ERROR FIELD                            00140800
&ZAWRK         SETA  0           POSITIONAL NUMBER                      00140900
.ZGLIST2       ANOP  ,                                                  00141000
&ZAWRK         SETA  &ZAWRK+1    NEXT POSITIONAL                        00141100
               AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE               00141200
&ZCVAL         SETC '&ZCVAL,&SYSLIST(&ZAWRK)'   EXTRA                   00141300
               AGO   .ZGLIST2                                           00141400
.*                                                                      00141500
.ZGLIST3       ANOP  ,                                                  00141600
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)      STRIP COMMA             00141700
&ZMS           SETC  'POSITIONAL ARGUMENT(S),'                          00141800
&ZMS           SETC  '&ZMS "&ZCVAL"'                                    00141900
&ZMS           SETC  '&ZMS CANNOT BE USED.'                             00142000
&ZMS           SETC  '&ZMS NO POSITIONAL ARGUMENTS'                     00142100
               MNOTE 8,' &ZMS ARE ALLOWED.'                             00142200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00142300
.ZGLISTX       ANOP  ,                                                  00142400
&ZASYSLNDX     SETA  0                                                  00142500
.*-------------------------------------------------------------------   00142600
.***AG.MF04 MF=(SLE)                                                    00142700
.ZGMFX         ANOP  ,           END OF FULL SYNTAX CHECK               00142800
.*******************************************************************    00142900
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00143000
.*******************************************************************    00143100
               AIF   (&ZMACRET NE 0).ZLX2       ERROR DETECTED          00143200
.*******************************************************************    00143300
.***AE.01  START OF IWM4HLTH MACRO CODE                                 00143400
.*******************************************************************    00143500
               LCLC  &M0M0001                 NAME                      00143600
&M0M0001       SETC  '&XLABEL'                SET NAME                  00143700
               AIF   (K'&XLABEL NE 0).XLAB2                             00143800
&M0M0001       SETC  'M00M&SYSNDX'            DEFAULT NAME              00143900
.*                                                                      00144000
.XLAB2         ANOP  ,                                                  00144100
               AIF   ('&XMF' EQ 'L').XLAB3                              00144200
&M0M0001 DS    0H                             IWM4HLTH-1                00144300
.XLAB3         ANOP  ,                                                  00144400
.*******************************************************************    00144500
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00144600
.*******************************************************************    00144700
              PUSH  PRINT                                               00144800
               AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON         00144900
               PRINT OFF         ++ PR01                                00145000
               AGO   .ZPRNTXX                                           00145100
.ZPRINTX       PRINT ON                                                 00145200
.ZPRNTXX       ANOP  ,                                                  00145300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00145400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00145500
.********************************************************************   00145600
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00145700
.********************************************************************   00145800
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00145900
                      LCLA  &ZOPN1         INVOCATION INDEX             00146000
                      LCLC  &ZOPL(4095)    LABEL                        00146100
                      LCLC  &ZOPO(4095)    OPERATION                    00146200
                      LCLC  &ZOPV(4095)    VALUE                        00146300
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00146400
.*                                                                      00146500
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00146600
.******************************************************************     00146700
.***AL.L10 IWM4HLTH FMT=LIST MF=S!L PARAMETERS                          00146800
.******************************************************************     00146900
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00147000
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00147100
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00147200
&XMFATTR              SETC  '0D'                                        00147300
.*                                                                      00147400
&ZOPN                 SETA  &ZOPN+1                                     00147500
&ZOPL(&ZOPN)          SETC  ' '                                         00147600
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00147700
&ZOPV(&ZOPN)          SETC  '4,8'                                       00147800
&ZOPN                 SETA  &ZOPN+1                                     00147900
&ZOPL(&ZOPN)          SETC  ' '                                         00148000
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00148100
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00148200
&ZOPD(&ZOPN)          SETC  '++ IWM4HLTH ARG PARMS'                     00148300
.*                                                                      00148400
&ZOPN                 SETA  &ZOPN+1                                     00148500
&ZOPL(&ZOPN)          SETC  ' '                                         00148600
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00148700
&ZOPV(&ZOPN)          SETC  '1'                                         00148800
&ZOPD(&ZOPN)          SETC  ' '                                         00148900
.*                                                                      00149000
.ZLMFSL2              ANOP  ,                                           00149100
.*-------------------------------------------------------------------   00149200
.***AM.L00  IWM4HLTH FMT=LIST name                                      00149300
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00149400
&ZOPN                 SETA &ZOPN+1                                      00149500
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00149600
&ZOPO(&ZOPN)          SETC 'EQU'                                        00149700
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00149800
&ZOPD(&ZOPN)          SETC '++ IWM4HLTH NAME'                           00149900
.ZLMFSL2M             ANOP  ,                                           00150000
.*-------------------------------------------------------------------   00150100
.***AM.L01  IWM4HLTH FMT=LIST PARAMETERS                                00150200
&ZOPN                 SETA &ZOPN+1                                      00150300
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00150400
&ZOPO(&ZOPN)          SETC 'DS'                                         00150500
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00150600
&ZOPD(&ZOPN)          SETC '++ IWM4HLTH PARM LIST'                      00150700
.*-------------------------------------------------------------------   00150800
.***AM.L02 XVERSION XL1                                                 00150900
&ZOPN                 SETA &ZOPN+1                                      00151000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00151100
&ZOPO(&ZOPN)          SETC 'DS'                                         00151200
&ZOPV(&ZOPN)          SETC 'XL1'                                        00151300
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00151400
.*-------------------------------------------------------------------   00151500
.***AM.L03 XFLAGS BL.8                                                  00151600
&ZOPN                 SETA &ZOPN+1                                      00151700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAGS'                           00151800
&ZOPO(&ZOPN)          SETC 'DS'                                         00151900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00152000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00152100
.*                                                                      00152200
&ZOPN                 SETA  &ZOPN+1                                     00152300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_SET'                   00152400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00152500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00152600
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00152700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SET'                          00152800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00152900
.*                                                                      00153000
&ZOPN                 SETA  &ZOPN+1                                     00153100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFUNCTION_RESET'                 00153200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00153300
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00153400
&ZOPD(&ZOPN)          SETC  '++ XFUNCTION.'                             00153500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RESET'                        00153600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00153700
.*                                                                      00153800
&ZOPN                 SETA  &ZOPN+1                                     00153900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_HEALTHRSN'               00154000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00154100
&ZOPV(&ZOPN)          SETC  'B''00000100'''                             00154200
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00154300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).HEALTHRSN'                    00154400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00154500
.*                                                                      00154600
&ZOPN                 SETA  &ZOPN+1                                     00154700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBSYS'                  00154800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00154900
&ZOPV(&ZOPN)          SETC  'B''00000010'''                             00155000
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00155100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBSYS'                       00155200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00155300
.*                                                                      00155400
&ZOPN                 SETA  &ZOPN+1                                     00155500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBSYSNM'                00155600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00155700
&ZOPV(&ZOPN)          SETC  'B''00000001'''                             00155800
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00155900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBSYSNM'                     00156000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00156100
.*-------------------------------------------------------------------   00156200
.***AM.L09  XPLISTLEN XL2                                               00156300
&ZOPN                 SETA &ZOPN+1                                      00156400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00156500
&ZOPO(&ZOPN)          SETC 'DS'                                         00156600
&ZOPV(&ZOPN)          SETC 'XL2'                                        00156700
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00156800
.*-------------------------------------------------------------------   00156900
.***AM.L09  XHEALTH F                                                   00157000
&ZOPN                 SETA &ZOPN+1                                      00157100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XHEALTH'                          00157200
&ZOPO(&ZOPN)          SETC 'DS'                                         00157300
&ZOPV(&ZOPN)          SETC 'F'                                          00157400
&ZOPD(&ZOPN)          SETC '++ &ZXHEALTH '                              00157500
.*-------------------------------------------------------------------   00157600
.***AM.L09  XSTOKEN BL.64                                               00157700
&ZOPN                 SETA &ZOPN+1                                      00157800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTOKEN'                          00157900
&ZOPO(&ZOPN)          SETC 'DS'                                         00158000
&ZOPV(&ZOPN)          SETC 'BL.64'                                      00158100
&ZOPD(&ZOPN)          SETC '++ &ZXSTOKEN '                              00158200
.*-------------------------------------------------------------------   00158300
.***AM.L09  XRSV0010 CL32                                               00158400
&ZOPN                 SETA &ZOPN+1                                      00158500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0010'                         00158600
&ZOPO(&ZOPN)          SETC 'DS'                                         00158700
&ZOPV(&ZOPN)          SETC 'CL32'                                       00158800
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00158900
.*-------------------------------------------------------------------   00159000
.***AM.MLM2 SAVED LOCATION COUNTER                                      00159100
                      AIF  (&XPLISTVER GE 1).ZL12LA                     00159200
                      AIF  ('&ZENDBASEPL' NE '').ZL12LA                 00159300
&ZENDBASEPL           SETC 'YES'                                        00159400
&ZOPN                 SETA &ZOPN+1                                      00159500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00159600
&ZOPO(&ZOPN)          SETC 'EQU'                                        00159700
&ZOPV(&ZOPN)          SETC '*'                                          00159800
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00159900
.ZL12LA               ANOP  ,                                           00160000
.*-------------------------------------------------------------------   00160100
.***AM.LVER1                                                            00160200
                      AIF  (&XPLISTVER LT 1).ZL12L                      00160300
.*-------------------------------------------------------------------   00160400
.*-------------------------------------------------------------------   00160500
.***AM.MLM1 SAVED LOCATION COUNTER                                      00160600
                      AIF  ('&ZENDBASEPL' NE '').ZL12LB                 00160700
&ZENDBASEPL           SETC 'YES'                                        00160800
&ZOPN                 SETA &ZOPN+1                                      00160900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00161000
&ZOPO(&ZOPN)          SETC 'EQU'                                        00161100
&ZOPV(&ZOPN)          SETC '*'                                          00161200
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00161300
.ZL12LB               ANOP  ,                                           00161400
.*-------------------------------------------------------------------   00161500
.***AM.PJR1 DEFINED ON XRSV0010                                         00161600
&ZOPN                 SETA &ZOPN+1                                      00161700
&ZOPL(&ZOPN)          SETC ' '                                          00161800
&ZOPO(&ZOPN)          SETC 'ORG'                                        00161900
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+16'                               00162000
&ZOPD(&ZOPN)          SETC ' '                                          00162100
.*-------------------------------------------------------------------   00162200
.***AM.LVER2                                                            00162300
.ZL12L                ANOP  ,                                           00162400
.*-------------------------------------------------------------------   00162500
.*-------------------------------------------------------------------   00162600
.***AM.LVER1                                                            00162700
                      AIF  (&XPLISTVER LT 1).ZL13L                      00162800
.*-------------------------------------------------------------------   00162900
.*-------------------------------------------------------------------   00163000
.***AM.L09  XSUBSYS CL8                                                 00163100
&ZOPN                 SETA &ZOPN+1                                      00163200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBSYS'                          00163300
&ZOPO(&ZOPN)          SETC 'DS'                                         00163400
&ZOPV(&ZOPN)          SETC 'CL8'                                        00163500
&ZOPD(&ZOPN)          SETC '++ &ZXSUBSYS '                              00163600
.*-------------------------------------------------------------------   00163700
.***AM.LVER2                                                            00163800
.ZL13L                ANOP  ,                                           00163900
.*-------------------------------------------------------------------   00164000
.*-------------------------------------------------------------------   00164100
.***AM.LVER1                                                            00164200
                      AIF  (&XPLISTVER LT 1).ZL14L                      00164300
.*-------------------------------------------------------------------   00164400
.*-------------------------------------------------------------------   00164500
.***AM.L09  XSUBSYSNM CL8                                               00164600
&ZOPN                 SETA &ZOPN+1                                      00164700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBSYSNM'                        00164800
&ZOPO(&ZOPN)          SETC 'DS'                                         00164900
&ZOPV(&ZOPN)          SETC 'CL8'                                        00165000
&ZOPD(&ZOPN)          SETC '++ &ZXSUBSYSNM '                            00165100
.*-------------------------------------------------------------------   00165200
.***AM.LVER2                                                            00165300
.ZL14L                ANOP  ,                                           00165400
.*-------------------------------------------------------------------   00165500
.*-------------------------------------------------------------------   00165600
.***AM.LVER1                                                            00165700
                      AIF  (&XPLISTVER LT 1).ZL15L                      00165800
.*-------------------------------------------------------------------   00165900
.*-------------------------------------------------------------------   00166000
.***AM.L09  XHEALTHRSN CL16                                             00166100
&ZOPN                 SETA &ZOPN+1                                      00166200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XHEALTHRSN'                       00166300
&ZOPO(&ZOPN)          SETC 'DS'                                         00166400
&ZOPV(&ZOPN)          SETC 'CL16'                                       00166500
&ZOPD(&ZOPN)          SETC '++ &ZXHEALTHRSN '                           00166600
.*-------------------------------------------------------------------   00166700
.***AM.LVER2                                                            00166800
.ZL15L                ANOP  ,                                           00166900
.*-------------------------------------------------------------------   00167000
&ZOPN                 SETA &ZOPN+1                                      00167100
&ZOPL(&ZOPN)          SETC ' '                                          00167200
&ZOPO(&ZOPN)          SETC 'ORG'                                        00167300
&ZOPV(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00167400
&ZOPD(&ZOPN)          SETC 'RESET LOCATION COUNTER'                     00167500
.*-------------------------------------------------------------------   00167600
.***AM.L10 END OF IWM4HLTH LIST PARAMETERS                              00167700
&ZOPN                 SETA &ZOPN+1                                      00167800
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00167900
&ZOPO(&ZOPN)          SETC 'EQU'                                        00168000
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00168100
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00168200
.*                                                                      00168300
&ZOPN                 SETA &ZOPN+1                                      00168400
&ZOPL(&ZOPN)          SETC ' '                                          00168500
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00168600
&ZOPV(&ZOPN)          SETC '1'                                          00168700
&ZOPD(&ZOPN)          SETC ' '                                          00168800
.*-------------------------------------------------------------------   00168900
.***AL.L12 IWM4HLTH FMT=LIST MF=S!L PARAMETERS                          00169000
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00169100
.*                                                                      00169200
&ZOPN                 SETA  &ZOPN+1                                     00169300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00169400
&ZOPO(&ZOPN)          SETC  'DC'                                        00169500
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00169600
&ZOPD(&ZOPN)          SETC  '++ IWM4HLTH ARG PARMS'                     00169700
.*                                                                      00169800
.ZLMFSLX              ANOP  ,                                           00169900
.*-------------------------------------------------------------------   00170000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00170100
&ZPLLEN               SETA 48                                           00170200
.*                                                                      00170300
                      AIF  (&XPLISTVER LT 0).ZLLEN2Z                    00170400
&ZPLLEN               SETA 48                                           00170500
.ZLLEN2Z              ANOP  ,                                           00170600
.*                                                                      00170700
.******************************************************************     00170800
.***AI.L01 IWM4HLTH FMT=LIST FILL IN PARAMETER AREA                     00170900
.******************************************************************     00171000
                      ACTR  10000                                       00171100
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00171200
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00171300
&ZCVAL                SETC  'LAE'          XAX MODE                     00171400
.ZIMFXA               ANOP ,                                            00171500
.*                                                                      00171600
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00171700
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00171800
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00171900
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00172000
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00172100
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00172200
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00172300
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00172400
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00172500
&ZOPN                 SETA  &ZOPN+1                                     00172600
&ZOPL(&ZOPN)          SETC  ' '                                         00172700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00172800
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00172900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00173000
                      AGO   .ZIMFNX                                     00173100
.*                                                                      00173200
.ZIMFN2               ANOP ,                                            00173300
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00173400
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00173500
&ZOPN                 SETA  &ZOPN+1                                     00173600
&ZOPL(&ZOPN)          SETC  ' '                                         00173700
&ZOPO(&ZOPN)          SETC  'LAE'                                       00173800
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00173900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00174000
                      AGO   .ZIMFNX                                     00174100
.ZIMFNX1              ANOP ,                                            00174200
&ZOPN                 SETA  &ZOPN+1                                     00174300
&ZOPL(&ZOPN)          SETC  ' '                                         00174400
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00174500
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00174600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00174700
.ZIMFNX               ANOP ,                                            00174800
.********************************************************************   00174900
.***AI.L02 IWM4HLTH FMT=LIST INITIALIZE PARAMETER AREA                  00175000
.********************************************************************   00175100
.***AI.L03 MF=(SLE)                                                     00175200
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00175300
.*                                                                      00175400
&ZOPN                 SETA  &ZOPN+1                                     00175500
&ZOPL(&ZOPN)          SETC  ' '                                         00175600
&ZOPO(&ZOPN)          SETC  'XC'                                        00175700
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00175800
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00175900
.ZIMFLX               ANOP  ,                                           00176000
.*-------------------------------------------------------------------   00176100
.***AI.L04B XVERSION XL1                                                00176200
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00176300
&ZOPN                 SETA  &ZOPN+1                                     00176400
&ZOPL(&ZOPN)          SETC  ' '                                         00176500
&ZOPO(&ZOPN)          SETC  'MVI'                                       00176600
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           00176700
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00176800
.ZIMFVZ               ANOP  ,                                           00176900
.*-------------------------------------------------------------------   00177000
.***AI.L05 XFLAGS BL1                                                   00177100
&ZW                   SETC  ''                                          00177200
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00177300
.*-------------------------------------------------------------------   00177400
.***AI.L08 XFLAGS "SET"                                                 00177500
.***      BL1'1XXXXXXX'                                                 00177600
         AIF   ('&XFUNCTION' NE 'SET').ZI3A                             00177700
&ZW                   SETC  '&ZW.1'                                     00177800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00177900
                      AGO   .ZI3C                                       00178000
.*                                                                      00178100
.ZI3A                 ANOP  ,                                           00178200
&ZW                   SETC  '&ZW.0'                                     00178300
.ZI3C                 ANOP  ,                                           00178400
.*-------------------------------------------------------------------   00178500
.***AI.L08 XFLAGS "RESET"                                               00178600
.***      BL1'X1XXXXXX'                                                 00178700
         AIF   ('&XFUNCTION' NE 'RESET').ZI4A                           00178800
&ZW                   SETC  '&ZW.1'                                     00178900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00179000
                      AGO   .ZI4C                                       00179100
.*                                                                      00179200
.ZI4A                 ANOP  ,                                           00179300
&ZW                   SETC  '&ZW.0'                                     00179400
.ZI4C                 ANOP  ,                                           00179500
.*-------------------------------------------------------------------   00179600
.***AI.L08 XFLAGS "HEALTHRSN"                                           00179700
.***      BL1'XXXXX1XX'                                                 00179800
         AIF   ('&HEALTHRSN' EQ '').ZI5A                                00179900
&ZW                   SETC  '&ZW.0001'                                  00180000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00180100
                      AGO   .ZI5C                                       00180200
.*                                                                      00180300
.ZI5A                 ANOP  ,                                           00180400
&ZW                   SETC  '&ZW.0000'                                  00180500
.ZI5C                 ANOP  ,                                           00180600
.*-------------------------------------------------------------------   00180700
.***AI.L08 XFLAGS "SUBSYS"                                              00180800
.***      BL1'XXXXXX1X'                                                 00180900
         AIF   ('&SUBSYS' EQ '').ZI6A                                   00181000
&ZW                   SETC  '&ZW.1'                                     00181100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00181200
                      AGO   .ZI6C                                       00181300
.*                                                                      00181400
.ZI6A                 ANOP  ,                                           00181500
&ZW                   SETC  '&ZW.0'                                     00181600
.ZI6C                 ANOP  ,                                           00181700
.*-------------------------------------------------------------------   00181800
.***AI.L08 XFLAGS "SUBSYSNM"                                            00181900
.***      BL1'XXXXXXX1'                                                 00182000
         AIF   ('&SUBSYSNM' EQ '').ZI7A                                 00182100
&ZW                   SETC  '&ZW.1'                                     00182200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00182300
                      AGO   .ZI7C                                       00182400
.*                                                                      00182500
.ZI7A                 ANOP  ,                                           00182600
&ZW                   SETC  '&ZW.0'                                     00182700
.ZI7C                 ANOP  ,                                           00182800
.*-------------------------------------------------------------------   00182900
.***AI.L11 XFLAGS BL1                                                   00183000
                      AIF   ('&ZCLNG' NE 'YES').ZI7E  ALL ZERO BITS     00183100
&ZOPN                 SETA  &ZOPN+1                                     00183200
&ZOPL(&ZOPN)          SETC  ' '                                         00183300
&ZOPO(&ZOPN)          SETC  'OI'                                        00183400
&ZOPV(&ZOPN)          SETC  '1(1),B''&ZW'''                             00183500
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00183600
.ZI7E                 ANOP  ,                                           00183700
.*-------------------------------------------------------------------   00183800
.***AI.L04 XPLISTLEN XL2                                                00183900
&ZOPN                 SETA  &ZOPN+1                                     00184000
&ZOPL(&ZOPN)          SETC  ' '                                         00184100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00184200
&ZOPV(&ZOPN)          SETC  '2(2,1),=AL2(&ZPLLEN)'                      00184300
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00184400
.*-------------------------------------------------------------------   00184500
.***AI.L25  XHEALTH F                                                   00184600
                      AIF   ('&ZXHEALTH' EQ '').ZI9E                    00184700
                      AIF   ('&ZXHEALTH' EQ 'OUTPUT').ZI9E              00184800
&ZCGPR                SETC  '&XHEALTH'                                  00184900
.*                                                                      00185000
                      AIF   ('&XHEALTH'(1,1) NE '(').ZI9B               00185100
&ZCGPR   SETC  '0('.'&XHEALTH'(2,K'&XHEALTH-2).')'                      00185200
                      AGO   .ZI9D                                       00185300
.ZI9B                 ANOP  ,                                           00185400
.*                                                                      00185500
&ZC                   SETC  '&XHEALTH'(1,1)                             00185600
                      AIF   (T'&ZC NE 'N').ZI9D                         00185700
&ZC                   SETC  '&XHEALTH'                                  00185800
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI9D                00185900
&ZCGPR                SETC  '=FL4''&XHEALTH'''                          00186000
.*                                                                      00186100
.ZI9D                 ANOP  ,                                           00186200
.*                                                                      00186300
&ZOPN                 SETA  &ZOPN+1                                     00186400
&ZOPL(&ZOPN)          SETC  ' '                                         00186500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00186600
&ZOPV(&ZOPN)          SETC  '4(4,1),&ZCGPR'                             00186700
&ZOPD(&ZOPN)          SETC  '++ &ZXHEALTH XHEALTH'                      00186800
.*                                                                      00186900
.ZI9E                 ANOP  ,                                           00187000
.*-------------------------------------------------------------------   00187100
.***AI.L25  XSTOKEN XL8                                                 00187200
                      AIF   ('&ZXSTOKEN' EQ '').ZI10E                   00187300
                      AIF   ('&ZXSTOKEN' EQ 'OUTPUT').ZI10E             00187400
&ZCGPR                SETC  '&XSTOKEN'                                  00187500
.*                                                                      00187600
                      AIF   ('&XSTOKEN'(1,1) NE '(').ZI10B              00187700
&ZCGPR   SETC  '0('.'&XSTOKEN'(2,K'&XSTOKEN-2).')'                      00187800
                      AGO   .ZI10D                                      00187900
.ZI10B                ANOP  ,                                           00188000
.*                                                                      00188100
&ZC                   SETC  '&XSTOKEN'(1,1)                             00188200
                      AIF   (T'&ZC NE 'N').ZI10D                        00188300
&ZC                   SETC  '&XSTOKEN'                                  00188400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI10D               00188500
&ZCGPR                SETC  '=BL8''&XSTOKEN'''                          00188600
.*                                                                      00188700
.ZI10D                ANOP  ,                                           00188800
.*                                                                      00188900
&ZOPN                 SETA  &ZOPN+1                                     00189000
&ZOPL(&ZOPN)          SETC  ' '                                         00189100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00189200
&ZOPV(&ZOPN)          SETC  '8(8,1),&ZCGPR'                             00189300
&ZOPD(&ZOPN)          SETC  '++ &ZXSTOKEN XSTOKEN'                      00189400
.*                                                                      00189500
.ZI10E                ANOP  ,                                           00189600
.*-------------------------------------------------------------------   00189700
.***AI.LVER01                                                           00189800
                      AIF  (&XPLISTVER LT 1).ZI13Z                      00189900
.*-------------------------------------------------------------------   00190000
.***AI.L18  XSUBSYS CL8                                                 00190100
         AIF   ('&XSUBSYS' NE 'NO_SUBSYS').ZI13                         00190200
&ZXSUBSYS             SETC  ''             RESET INPUT/OUTPUT           00190300
.ZI13                 ANOP  ,                                           00190400
.*-------------------------------------------------------------------   00190500
.***AI.L25  XSUBSYS CL8                                                 00190600
                      AIF   ('&ZXSUBSYS' EQ '').ZI13E                   00190700
                      AIF   ('&ZXSUBSYS' EQ 'OUTPUT').ZI13E             00190800
&ZCGPR                SETC  '&XSUBSYS'                                  00190900
.*                                                                      00191000
                      AIF   ('&XSUBSYS'(1,1) NE '(').ZI13B              00191100
&ZCGPR   SETC  '0('.'&XSUBSYS'(2,K'&XSUBSYS-2).')'                      00191200
.ZI13B                ANOP  ,                                           00191300
.*                                                                      00191400
&ZOPN                 SETA  &ZOPN+1                                     00191500
&ZOPL(&ZOPN)          SETC  ' '                                         00191600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00191700
&ZOPV(&ZOPN)          SETC  '16(8,1),&ZCGPR'                            00191800
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBSYS XSUBSYS'                      00191900
.*                                                                      00192000
.ZI13E                ANOP  ,                                           00192100
.*-------------------------------------------------------------------   00192200
.***AI.LVER02                                                           00192300
.ZI13Z                ANOP  ,                                           00192400
.*-------------------------------------------------------------------   00192500
.***AI.LVER01                                                           00192600
                      AIF  (&XPLISTVER LT 1).ZI14Z                      00192700
.*-------------------------------------------------------------------   00192800
.***AI.L18  XSUBSYSNM CL8                                               00192900
         AIF   ('&XSUBSYSNM' NE 'NO_SUBSYSNM').ZI14                     00193000
&ZXSUBSYSNM           SETC  ''             RESET INPUT/OUTPUT           00193100
.ZI14                 ANOP  ,                                           00193200
.*-------------------------------------------------------------------   00193300
.***AI.L25  XSUBSYSNM CL8                                               00193400
                      AIF   ('&ZXSUBSYSNM' EQ '').ZI14E                 00193500
                      AIF   ('&ZXSUBSYSNM' EQ 'OUTPUT').ZI14E           00193600
&ZCGPR                SETC  '&XSUBSYSNM'                                00193700
.*                                                                      00193800
                      AIF   ('&XSUBSYSNM'(1,1) NE '(').ZI14B            00193900
&ZCGPR   SETC  '0('.'&XSUBSYSNM'(2,K'&XSUBSYSNM-2).')'                  00194000
.ZI14B                ANOP  ,                                           00194100
.*                                                                      00194200
&ZOPN                 SETA  &ZOPN+1                                     00194300
&ZOPL(&ZOPN)          SETC  ' '                                         00194400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00194500
&ZOPV(&ZOPN)          SETC  '24(8,1),&ZCGPR'                            00194600
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBSYSNM XSUBSYSNM'                  00194700
.*                                                                      00194800
.ZI14E                ANOP  ,                                           00194900
.*-------------------------------------------------------------------   00195000
.***AI.LVER02                                                           00195100
.ZI14Z                ANOP  ,                                           00195200
.*-------------------------------------------------------------------   00195300
.***AI.LVER01                                                           00195400
                      AIF  (&XPLISTVER LT 1).ZI15Z                      00195500
.*-------------------------------------------------------------------   00195600
.***AI.L18  XHEALTHRSN CL16                                             00195700
         AIF   ('&XHEALTHRSN' NE 'NO_RSN').ZI15                         00195800
&ZXHEALTHRSN          SETC  ''             RESET INPUT/OUTPUT           00195900
.ZI15                 ANOP  ,                                           00196000
.*-------------------------------------------------------------------   00196100
.***AI.L25  XHEALTHRSN CL16                                             00196200
                      AIF   ('&ZXHEALTHRSN' EQ '').ZI15E                00196300
                      AIF   ('&ZXHEALTHRSN' EQ 'OUTPUT').ZI15E          00196400
&ZCGPR                SETC  '&XHEALTHRSN'                               00196500
.*                                                                      00196600
                      AIF   ('&XHEALTHRSN'(1,1) NE '(').ZI15B           00196700
&ZCGPR   SETC  '0('.'&XHEALTHRSN'(2,K'&XHEALTHRSN-2).')'                00196800
.ZI15B                ANOP  ,                                           00196900
.*                                                                      00197000
&ZOPN                 SETA  &ZOPN+1                                     00197100
&ZOPL(&ZOPN)          SETC  ' '                                         00197200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00197300
&ZOPV(&ZOPN)          SETC  '32(16,1),&ZCGPR'                           00197400
&ZOPD(&ZOPN)          SETC  '++ &ZXHEALTHRSN XHEALTHRSN'                00197500
.*                                                                      00197600
.ZI15E                ANOP  ,                                           00197700
.*-------------------------------------------------------------------   00197800
.***AI.LVER02                                                           00197900
.ZI15Z                ANOP  ,                                           00198000
.*-------------------------------------------------------------------   00198100
&ZOPN1                SETA &ZOPN                                        00198200
.*******************************************************************    00198300
.***  PROCESS IWM4HLTH OUTPUT PARAMETERS                                00198400
.*******************************************************************    00198500
                      ACTR  10000                                       00198600
.*******************************************************************    00198700
.***AO.X02  RETURN CODE PROCESSING                                      00198800
.*******************************************************************    00198900
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00199000
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00199100
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00199200
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00199300
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00199400
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00199500
&ZOPN                 SETA  &ZOPN+1                                     00199600
&ZOPL(&ZOPN)          SETC  ' '                                         00199700
&ZOPO(&ZOPN)          SETC  'ST'                                        00199800
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00199900
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00200000
                      AGO   .ZMRETX                                     00200100
.*                                                                      00200200
.ZMRET2               ANOP  ,                                           00200300
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00200400
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00200500
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00200600
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00200700
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00200800
&ZOPN                 SETA  &ZOPN+1                                     00200900
&ZOPL(&ZOPN)          SETC  ' '                                         00201000
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00201100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00201200
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00201300
.ZMRETX               ANOP  ,                                           00201400
.*******************************************************************    00201500
.***AO.X03  REASON CODE PROCESSING                                      00201600
.*******************************************************************    00201700
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00201800
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00201900
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00202000
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00202100
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00202200
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00202300
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00202400
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00202500
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00202600
&ZOPN                 SETA  &ZOPN+1                                     00202700
&ZOPL(&ZOPN)          SETC  ' '                                         00202800
&ZOPO(&ZOPN)          SETC  'ST'                                        00202900
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00203000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00203100
                      AGO   .ZMRSNX                                     00203200
.*                                                                      00203300
.ZMRSN2               ANOP  ,                                           00203400
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00203500
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00203600
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00203700
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00203800
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00203900
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00204000
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00204100
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00204200
&ZOPN                 SETA  &ZOPN+1                                     00204300
&ZOPL(&ZOPN)          SETC  ' '                                         00204400
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00204500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00204600
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00204700
.ZMRSNX               ANOP  ,                                           00204800
.*******************************************************************    00204900
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00205000
.*******************************************************************    00205100
.ZMFLX                ANOP  ,              MF=L PROCESSING              00205200
.*******************************************************************    00205300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00205400
.*******************************************************************    00205500
                      ACTR  10000                                       00205600
.*                                                                      00205700
                      LCLA  &ZLC           COLUMN POSITION              00205800
                      LCLA  &ZOPX          LIST TABLE INDEX             00205900
                      LCLC  &ZLL           LABEL                        00206000
                      LCLC  &ZLOP          OPERATION                    00206100
                      LCLC  &ZLV           VALUE                        00206200
                      LCLC  &ZLD           DESCRIPTION                  00206300
.*                                                                      00206400
&ZOPX                 SETA  1                                           00206500
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00206600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00206700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00206800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00206900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00207000
                      AIF   (K'&ZLD LE 0).ZL5                           00207100
&ZLC                  SETA  35             COMMENT COLUMN               00207200
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00207300
&ZLC                  SETA  33             COMMMENT COLUMN              00207400
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00207500
&ZLV                  SETC  '&ZLV'.' '                                  00207600
                      AGO   .ZL3                                        00207700
.*                                                                      00207800
.ZL4                  ANOP  ,                                           00207900
&ZLV                  SETC  '&ZLV'.' '                                  00208000
.ZL5                  ANOP  ,                                           00208100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00208200
.*                                                                      00208300
&ZLL     &ZLOP &ZLV                                                     00208400
.*                                                                      00208500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00208600
                      AGO   .ZL2           CONTINUE LOOPING             00208700
.*                                                                      00208800
.ZLX                  ANOP  ,                                           00208900
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00209000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00209100
         AIF   ('&SYSAM64' NE 'YES').AMODE31                            00209200
         LLGTR 14,14                   CLEAR HIGH HALF IN 64BIT MODE    00209300
.AMODE31 L     14,16(0,0)              GET CVT ADDRESS                  00209400
.*- Check for HBB7720 deleted --------------------------------- @L1 -   00209500
         L     14,772(14,0)            GET SFT ADDRESS                  00209600
         L     14,380(14,0)            GET LX FOR SERVICE ROUTINE       00209700
         LA    15,118                  GET EX FOR SERVICE ROUTINE       00209800
         OR    14,15                   GET PC NUMBER                    00209900
         PC    0(14)                                                    00210000
END&SYSNDX DS    0H                END LABEL                            00210100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00210200
.ZLINKX               ANOP  ,                                           00210300
.*******************************************************************    00210400
.***AP.X01  FORMAT GENERATED CODE                                       00210500
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00210600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00210700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00210800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00210900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00211000
                      AIF   (K'&ZLD LE 0).ZL51                          00211100
&ZLC                  SETA  35             COMMENT COLUMN               00211200
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00211300
&ZLC                  SETA  33             COMMENT COLUMN               00211400
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00211500
&ZLV                  SETC  '&ZLV'.' '                                  00211600
                      AGO   .ZL31                                       00211700
.*                                                                      00211800
.ZL41                 ANOP  ,                                           00211900
&ZLV                  SETC  '&ZLV'.' '                                  00212000
.ZL51                 ANOP  ,                                           00212100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00212200
.*                                                                      00212300
&ZLL     &ZLOP &ZLV                                                     00212400
.*                                                                      00212500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00212600
                      AGO   .ZL21          CONTINUE LOOPING             00212700
.*                                                                      00212800
.ZLX1                 ANOP  ,                                           00212900
.*******************************************************************    00213000
.***AP.X02  END OF IWM4HLTH MACRO                                       00213100
&ZIWM4HLTH            SETC  'YES'          SET IWM4HLTH USED            00213200
         POP   PRINT                                                    00213300
*                                            IWM4HLTH-1                 00213400
         SPACE 1                                                        00213500
.ZLX2                 ANOP  ,                                           00213600
         MEND                                                           00213700
**********************************************************************/ 00213800
*/**** START OF SPECIFICATIONS **************************************** 00213900
*                                                                     * 00214000
*                                                                     * 00214100
*01* MACRO NAME:  IWM4HLTH                              -12/19/14-<1> * 00214200
*                                                                     * 00214300
*                                                                     * 00214400
*01* DESCRIPTIVE NAME:  Set Server Health Indicator                   * 00214500
*                                                                     * 00214600
*01* PROPRIETARY STATEMENT:                                           * 00214700
*                                                                     * 00214800
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00214900
*     5650-ZOS COPYRIGHT IBM CORP. 2006, 2015                         * 00215000
*                                                                     * 00215100
* STATUS= HBB77A0                                                     * 00215200
*                                                                     * 00215300
*                                                                     * 00215400
*                                                                     * 00215500
*01* FUNCTION:                                                        * 00215600
*       See the IWM4HLTH macro prologue for details.                  * 00215700
*                                                                     * 00215800
*01* INPUT:                                                           * 00215900
*                                                                     * 00216000
*            ?IWM4HLTH     STOKEN(xstoken)                            * 00216100
*                         ÝFUNCTION(»SET!RESETº)¨                     * 00216200
*                          HEALTH(xhealth)                            * 00216300
*                         ÝSUBSYS(»xsubsys!NO_SUBSYSº)¨               * 00216400
*                         ÝSUBSYSNM(»xsubsysnm!NO_SUBSYSNMº)¨         * 00216500
*                         ÝHEALTHRSN(»xhealthrsn!NO_RSNº)¨            * 00216600
*                         ÝRETCODE(xretcode)¨                         * 00216700
*                         ÝRSNCODE(xrsncode)¨                         * 00216800
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00216900
*                        ÐÝMF(S)¨                                     * 00217000
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00217100
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00217200
*                                                                     * 00217300
****** END OF SPECIFICATIONS *****************************************/ 00217400
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00217500
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00217600
*  ANS('/* ? IWM4HLTH '!!MACLIST!!' ')                                  00217700
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00217800
*                                                                       00217900
*  DCL ZELO  FIXED;                                                     00218000
*  DCL ZECOL FIXED;                                                     00218100
*                                                                       00218200
*  ZELO=1;     /* STARTING COLUMN */                                    00218300
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00218400
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00218500
*    IF ZECOL>0                                                         00218600
*      THEN                                                             00218700
*        DO;   /* PARENTHESIS FOUND */                                  00218800
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00218900
*             NORESCAN COL(MACLMAR+5);                                  00219000
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00219100
*        END;                                                           00219200
*      ELSE                                                             00219300
*        DO;   /* REMAINING KEYS */                                     00219400
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00219500
*             NORESCAN COL(MACLMAR+5);                                  00219600
*          ZELO=LENGTH(MACKEYS)+1;                                      00219700
*        END;                                                           00219800
*  END;                                                                 00219900
*  ANS(' -12/19/14-1- */')                                              00220000
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00220100
*/********************************************************************/ 00220200
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00220300
*/********************************************************************/ 00220400
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00220500
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00220600
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00220700
*                                                                       00220800
*  DCL   ZIWM4HLTH CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00220900
*  DEACT ZIWM4HLTH;                                                     00221000
*                                                                       00221100
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00221200
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00221300
*                                                                       00221400
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00221500
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00221600
*                                                                       00221700
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00221800
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00221900
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00222000
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00222100
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00222200
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00222300
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00222400
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00222500
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00222600
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00222700
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00222800
*                                                                       00222900
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00223000
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00223100
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00223200
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00223300
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00223400
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00223500
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00223600
*/*******************************************************************/  00223700
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00223800
*/*******************************************************************/  00223900
*  DCL XSTOKEN;  DEACT XSTOKEN;    /***PV.XVAR02 INPUT NAME */          00224000
*  DCL ZXSTOKEN; DEACT ZXSTOKEN;   /***INPUT/OUTPUT CONTROL */          00224100
*  DCL XFUNCTION;  DEACT XFUNCTION;  /***PV.XVAR02 INPUT VALUE */       00224200
*  DCL ZXFUNCTION; DEACT ZXFUNCTION;  /***INPUT/OUTPUT CONTROL */       00224300
*  DCL XHEALTH;  DEACT XHEALTH;    /***PV.XVAR02 INPUT NAME */          00224400
*  DCL ZXHEALTH; DEACT ZXHEALTH;   /***INPUT/OUTPUT CONTROL */          00224500
*  DCL XSUBSYS;  DEACT XSUBSYS;    /***PV.XVAR02 INPUT NAME */          00224600
*  DCL ZXSUBSYS; DEACT ZXSUBSYS;   /***INPUT/OUTPUT CONTROL */          00224700
*  DCL XSUBSYSNM;  DEACT XSUBSYSNM;  /***PV.XVAR02 INPUT NAME */        00224800
*  DCL ZXSUBSYSNM; DEACT ZXSUBSYSNM;  /***INPUT/OUTPUT CONTROL */       00224900
*  DCL   XHEALTHRSN;               /***PV.XVAR03 INPUT NAME */          00225000
*  DEACT XHEALTHRSN;               /***PV.XVAR03 INPUT NAME */          00225100
*  DCL   ZXHEALTHRSN;              /***INPUT/OUTPUT CONTROL */          00225200
*  DEACT ZXHEALTHRSN;              /***INPUT/OUTPUT CONTROL */          00225300
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00225400
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00225500
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00225600
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00225700
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00225800
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00225900
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00226000
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00226100
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00226200
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00226300
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00226400
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00226500
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00226600
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00226700
*/********************************************************************/ 00226800
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00226900
*/********************************************************************/ 00227000
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00227100
*    XPLISTVER=1;                                                       00227200
*  ELSE                                                                 00227300
*    XPLISTVER=0;                                                       00227400
*  IF FUNCTION^='' & XPLISTVER<1                                        00227500
*    THEN                                                               00227600
*      XPLISTVER=1;                                                     00227700
*  IF SUBSYS^='' & XPLISTVER<1                                          00227800
*    THEN                                                               00227900
*      XPLISTVER=1;                                                     00228000
*  IF SUBSYSNM^='' & XPLISTVER<1                                        00228100
*    THEN                                                               00228200
*      XPLISTVER=1;                                                     00228300
*  IF HEALTHRSN^='' & XPLISTVER<1                                       00228400
*    THEN                                                               00228500
*      XPLISTVER=1;                                                     00228600
*  IF PLISTVER^=''                                                      00228700
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00228800
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00228900
*    THEN                                                               00229000
*      DO;                                                              00229100
*                                                                       00229200
*        ZCVAL='';                           /* ERROR FLAG */           00229300
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00229400
*          THEN                                                         00229500
*            DO;                                                        00229600
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00229700
*                  ' MUST CONTAIN ONE'!!                                00229800
*                  ' (OR MORE) ARGUMENT(S).';                           00229900
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00230000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00230100
*              ZMACRET=8;                    /* MACRO ERROR */          00230200
*              ZCVAL='NO_ARGUMENT';                                     00230300
*            END;                                                       00230400
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00230500
*          THEN                                                         00230600
*            DO;                                                        00230700
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00230800
*                  PLISTVER!!                                           00230900
*                  '" "PLISTVER"'!!                                     00231000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00231100
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00231200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00231300
*              ZMACRET=8;                    /* MACRO ERROR */          00231400
*            END;                                                       00231500
*                                                                       00231600
*        ZC=PLISTVER(1);                                                00231700
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00231800
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00231900
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00232000
*            THEN                                                       00232100
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00232200
*        END;                                                           00232300
*        IF ZCVAL=''                                                    00232400
*          THEN                                                         00232500
*            DO;                             /* CHECK RANGE LIMITS */   00232600
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00232700
*              THEN                                                     00232800
*                XPLISTVER=FIXED(PLISTVER(1));                          00232900
*              ELSE                                                     00233000
*                DO;                                                    00233100
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00233200
*                    PLISTVER(1)!!                                      00233300
*                  ', BUT PLISTVER OF '!!                               00233400
*                    CHAR(XPLISTVER)!!                                  00233500
*                  ' IS REQUIRED.';                                     00233600
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00233700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00233800
*              ZMACRET=8;                    /* MACRO ERROR */          00233900
*                END;                                                   00234000
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00234100
*                 XPLISTVER>1                /* HIGH LIMIT */           00234200
*                THEN                                                   00234300
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00234400
*            END;                                                       00234500
*        IF ZCVAL^=''                                                   00234600
*          THEN                                                         00234700
*            DO;                             /* RANGE ERROR */          00234800
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00234900
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00235000
*                  PLISTVER!!                                           00235100
*                  '" THE RANGE IS "0-1"'!!                             00235200
*                  ' FOR ARGUMENT 1.';                                  00235300
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00235400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00235500
*              ZMACRET=8;                    /* MACRO ERROR */          00235600
*            END;                                                       00235700
*      END;                                                             00235800
*                                                                       00235900
*/********************************************************************/ 00236000
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00236100
*/********************************************************************/ 00236200
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00236300
*  XMF='';                                                              00236400
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00236500
*  IF TRANSLATE(MF(1))                                                  00236600
*              = 'S'                         /* CHECK FOR KEYWORD */    00236700
*    THEN                                                               00236800
*      DO;                                                              00236900
*        XMF='S';                            /* SET XVARIABLE */        00237000
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00237100
*          THEN                                                         00237200
*            DO;                                                        00237300
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00237400
*                  MF!!                                                 00237500
*                  '" "MF"'!!                                           00237600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00237700
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00237800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00237900
*              ZMACRET=8;                    /* MACRO ERROR */          00238000
*            END;                                                       00238100
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00238200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00238300
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00238400
*  IF TRANSLATE(MF(1))                                                  00238500
*              = 'L'                         /* CHECK FOR KEYWORD */    00238600
*    THEN                                                               00238700
*      DO;                                                              00238800
*        XMF='L';                            /* SET XVARIABLE */        00238900
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00239000
*          THEN                                                         00239100
*            DO;                                                        00239200
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00239300
*                  MF!!                                                 00239400
*                  '" "MF"'!!                                           00239500
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00239600
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00239700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00239800
*              ZMACRET=8;                    /* MACRO ERROR */          00239900
*            END;                                                       00240000
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00240100
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00240200
*        IF PLISTVER ^= ''                                              00240300
*          THEN                                                         00240400
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00240500
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00240600
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00240700
*          THEN                                                         00240800
*            DO;                                                        00240900
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00241000
*                  ' CAN ONLY HAVE'!!                                   00241100
*                  ' THE "PLISTVER" KEY'!!                              00241200
*                  ' SPECIFIED ON THE INVOCATION.';                     00241300
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00241400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00241500
*              ZMACRET=8;                    /* MACRO ERROR */          00241600
*            END;                                                       00241700
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00241800
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00241900
*  IF MF(2)=''                               /* CHECK FOR NULL */       00242000
*   THEN                                                                00242100
*    DO;                                     /* KEY IS REQUIRED */      00242200
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00242300
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00242400
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00242500
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00242600
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00242700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00242800
*        ZMACRET=8;                          /* MACRO ERROR */          00242900
*    END;                                                               00243000
*  ELSE                                                                 00243100
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00243200
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00243300
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00243400
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00243500
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00243600
*    THEN                                                               00243700
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00243800
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00243900
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00244000
*     LENGTH(XMFATTR)>60                                                00244100
*    THEN                                                               00244200
*      DO;                                                              00244300
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00244400
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00244500
*            MF!!                                                       00244600
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00244700
*            ' LENGTH OF 60 CHARACTERS. ';                              00244800
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00244900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00245000
*        ZMACRET=8;                          /* MACRO ERROR */          00245100
*      END;                                                             00245200
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00245400
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00245500
*  IF TRANSLATE(MF(1))                                                  00245600
*              = 'E'                         /* CHECK FOR KEYWORD */    00245700
*    THEN                                                               00245800
*      DO;                                                              00245900
*        XMF='E';                            /* SET XVARIABLE */        00246000
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00246100
*          THEN                                                         00246200
*            DO;                                                        00246300
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00246400
*                  MF!!                                                 00246500
*                  '" "MF"'!!                                           00246600
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00246700
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00246800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00246900
*              ZMACRET=8;                    /* MACRO ERROR */          00247000
*            END;                                                       00247100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00247200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00247300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00247400
*   THEN                                                                00247500
*    DO;                                     /* KEY IS REQUIRED */      00247600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00247700
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00247800
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00247900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00248000
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00248100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00248200
*        ZMACRET=8;                          /* MACRO ERROR */          00248300
*    END;                                                               00248400
*  ELSE                                                                 00248500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00248600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00248700
*  XMFSCK='';                                /* RESET XVARIABLE */      00248800
*  IF TRANSLATE(MF(3))                                                  00248900
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00249000
*    THEN                                                               00249100
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00249200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00249300
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00249400
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00249500
*    THEN                                                               00249600
*      DO;                                   /* KEYWORD NOT ENTERED */  00249700
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00249800
*        IF MF(3)^=''                                                   00249900
*          THEN                                                         00250000
*            DO;                                                        00250100
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00250200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00250300
*                  MF!!'"'!!                                            00250400
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00250500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00250600
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00250700
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00250800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00250900
*              ZMACRET=8;                    /* MACRO ERROR */          00251000
*            END;                                                       00251100
*      END;                                                             00251200
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00251300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00251400
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00251500
*  IF MF='MF'                                                           00251600
*    ! MF='()'                               /*CHECK ENTRY*/            00251700
*     THEN                                                              00251800
*       DO;                                                             00251900
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00252000
*                  ' MUST CONTAIN ONE'!!                                00252100
*                  ' (OR MORE) ARGUMENT(S).';                           00252200
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00252300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00252400
*              ZMACRET=8;                    /* MACRO ERROR */          00252500
*       END;                                                            00252600
*  ELSE                                                                 00252700
*    DO;                                                                00252800
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00252900
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00253000
*        THEN                                                           00253100
*          DO;                               /* KEYWORD NOT ENTERED */  00253200
*            XMF='S';                        /* SET DEFAULT */          00253300
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00253400
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00253500
*              THEN                                                     00253600
*                DO;                                                    00253700
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00253800
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00253900
*                  MF!!'"'!!                                            00254000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00254100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00254200
*                  ' "S",'!!                 /* VALID KEYWORD */        00254300
*                  ' "L",'!!                 /* VALID KEYWORD */        00254400
*                  ' OR "E".';               /* VALID KEYWORD */        00254500
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00254600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00254700
*              ZMACRET=8;                    /* MACRO ERROR */          00254800
*                END;                                                   00254900
*          END;                                                         00255000
*    END;                                                               00255100
*/********************************************************************/ 00255200
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00255300
*/********************************************************************/ 00255400
*  IF PLISTVER=''                                                       00255500
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00255600
*    THEN                                                               00255700
*      ZC='ON';                              /* DEFAULT FLAG ON */      00255800
*    ELSE                                                               00255900
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00256000
*/********************************************************************/ 00256100
*/***PD.P02 DEFAULT ECHO                                             */ 00256200
*/********************************************************************/ 00256300
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00256400
*  IF XMF^='L'                                                          00256500
*    THEN                                                               00256600
*      DO;                                   /* FULL SYNTAX CHECK */    00256700
*        ANS('/*DEFAULT(S): */')                                        00256800
*           NORESCAN COL(MACLMAR+5);                                    00256900
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00257000
*  IF XPLISTVER>=1                                                      00257100
*    THEN                                                               00257200
*      DO;                                                              00257300
*  XFUNCTION='SET';                          /* RESET XVARIABLE */      00257400
*  IF FUNCTION(1)=''                                                    00257500
*    THEN                                                               00257600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00257700
*  IF TRANSLATE(FUNCTION(1))                                            00257800
*              = 'SET'                                                  00257900
*    THEN                                                               00258000
*        XFUNCTION='';                       /* SET XVARIABLE */        00258100
*      END;                                                             00258200
*  IF XPLISTVER>=1                                                      00258300
*    THEN                                                               00258400
*      DO;                                                              00258500
*  IF TRANSLATE(FUNCTION(1))                                            00258600
*              = 'RESET'                                                00258700
*    THEN                                                               00258800
*        XFUNCTION='';                       /* SET XVARIABLE */        00258900
*      END;                                                             00259000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00259100
*  IF XPLISTVER>=1                                                      00259200
*    THEN                                                               00259300
*      DO;                                                              00259400
*  IF XFUNCTION^=''                                                     00259500
*    THEN DO;                                                           00259600
*      ANS('/* FUNCTION('!!                                             00259700
*          XFUNCTION!!                                                  00259800
*          ')*/')                                                       00259900
*          NORESCAN COL(MACLMAR+5);                                     00260000
*      XFUNCTION = '';                                                  00260100
*    END;                                                               00260200
*      END;                                                             00260300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00260400
*  XSUBSYS='';                                                          00260500
*  IF SUBSYS(1)=''                                                      00260600
*    THEN                                                               00260700
*      DO;                                                              00260800
*        XSUBSYS='NO_SUBSYS';                /* SET DEFAULT */          00260900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00261000
*      END;                                                             00261100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00261200
*  IF XPLISTVER>=1                                                      00261300
*    THEN                                                               00261400
*      DO;                                                              00261500
*  IF XSUBSYS^=''                                                       00261600
*    THEN DO;                                                           00261700
*      ANS('/* SUBSYS('!!                                               00261800
*          XSUBSYS!!                                                    00261900
*          ')*/')                                                       00262000
*          NORESCAN COL(MACLMAR+5);                                     00262100
*      XSUBSYS = '';                                                    00262200
*    END;                                                               00262300
*      END;                                                             00262400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00262500
*  XSUBSYSNM='';                                                        00262600
*  IF SUBSYSNM(1)=''                                                    00262700
*    THEN                                                               00262800
*      DO;                                                              00262900
*        XSUBSYSNM='NO_SUBSYSNM';            /* SET DEFAULT */          00263000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00263100
*      END;                                                             00263200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00263300
*  IF XPLISTVER>=1                                                      00263400
*    THEN                                                               00263500
*      DO;                                                              00263600
*  IF XSUBSYSNM^=''                                                     00263700
*    THEN DO;                                                           00263800
*      ANS('/* SUBSYSNM('!!                                             00263900
*          XSUBSYSNM!!                                                  00264000
*          ')*/')                                                       00264100
*          NORESCAN COL(MACLMAR+5);                                     00264200
*      XSUBSYSNM = '';                                                  00264300
*    END;                                                               00264400
*      END;                                                             00264500
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00264600
*  XHEALTHRSN='';                                                       00264700
*  IF HEALTHRSN(1)=''                                                   00264800
*    THEN                                                               00264900
*      DO;                                                              00265000
*        XHEALTHRSN='NO_RSN';                /* SET DEFAULT */          00265100
*        ZC='ON';                            /* DEFAULT FLAG ON */      00265200
*      END;                                                             00265300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00265400
*  IF XPLISTVER>=1                                                      00265500
*    THEN                                                               00265600
*      DO;                                                              00265700
*  IF XHEALTHRSN^=''                                                    00265800
*    THEN DO;                                                           00265900
*      ANS('/* HEALTHRSN('!!                                            00266000
*          XHEALTHRSN!!                                                 00266100
*          ')*/')                                                       00266200
*          NORESCAN COL(MACLMAR+5);                                     00266300
*      XHEALTHRSN = '';                                                 00266400
*    END;                                                               00266500
*      END;                                                             00266600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00266700
*  IF PLISTVER=''                                                       00266800
*    THEN DO;                                                           00266900
*      ANS('/* PLISTVER('!!                                             00267000
*          CHAR(XPLISTVER)!!                                            00267100
*          ')*/')                                                       00267200
*          NORESCAN COL(MACLMAR+5);                                     00267300
*    END;                                                               00267400
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00267500
*    THEN                                                               00267600
*      ANS('/* NONE. */')                                               00267700
*         NORESCAN COL(MACLMAR+5);                                      00267800
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00267900
*      END;                                                             00268000
*/********************************************************************/ 00268100
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00268200
*/********************************************************************/ 00268300
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00268400
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00268500
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00268600
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00268700
*                                                                       00268800
*  IF SYSASCE=''                                                        00268900
*    THEN                                                               00269000
*      DO;                                                              00269100
*        IF SYSSPLV=''                                                  00269200
*          THEN                                                         00269300
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00269400
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00269500
*          THEN                                                         00269600
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00269700
*          ELSE                                                         00269800
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00269900
*      END;                                                             00270000
*/********************************************************************/ 00270100
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00270200
*/********************************************************************/ 00270300
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00270400
*  IF XMF^='L'                                                          00270500
*    THEN                                                               00270600
*      DO;                                   /* FULL SYNTAX CHECK */    00270700
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00270800
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00270900
*    THEN                                                               00271000
*      DO;                                                              00271100
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00271200
*            ' "'!!MACLIST!!'"'!!                                       00271300
*            ' CANNOT BE USED.'!!                                       00271400
*            ' NO POSITIONAL ARGUMENTS'!!                               00271500
*            ' ARE ALLOWED.';                                           00271600
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00271700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00271800
*        ZMACRET=8;                          /* MACRO ERROR */          00271900
*      END;                                                             00272000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00272100
*  IF NUMBER(STOKEN)>1                       /* CHECK POSITIONALS */    00272200
*    THEN                                                               00272300
*      DO;                                                              00272400
*        ZMS=' 8, "STOKEN'!!                 /**KPOSP* MSG*/            00272500
*            STOKEN!!                                                   00272600
*            '" "STOKEN"'!!                                             00272700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00272800
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00272900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00273000
*        ZMACRET=8;                          /* MACRO ERROR */          00273100
*      END;                                                             00273200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00273300
*  XSTOKEN=STOKEN(1);                        /* SET XVARIABLE */        00273400
*  IF STOKEN(1)=''                           /* CHECK FOR NULL */       00273500
*   THEN                                                                00273600
*    DO;                                     /* KEY IS REQUIRED */      00273700
*        ZXSTOKEN='';                        /* RESET IN/OUTPUT */      00273800
*        ZMS=' 8,  '!!                                                  00273900
*            ' "STOKEN" KEY AND ITS'!!                                  00274000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00274100
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00274200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00274300
*        ZMACRET=8;                          /* MACRO ERROR */          00274400
*    END;                                                               00274500
*  ELSE                                                                 00274600
*    ZXSTOKEN='INPUT';                       /* SET IN/OUTPUT */        00274700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00274800
*  IF FUNCTION='FUNCTION'                    /* CHECK ENTRY */          00274900
*    THEN                                                               00275000
*      DO;                                                              00275100
*        ZMS=' 8, THE "FUNCTION" KEY'!!      /**KOPTP* MSG*/            00275200
*            ' MUST CONTAIN ONE'!!                                      00275300
*            ' (OR MORE) ARGUMENT(S).';                                 00275400
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00275500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00275600
*        ZMACRET=8;                          /* MACRO ERROR */          00275700
*      END;                                                             00275800
*  IF NUMBER(FUNCTION)>1                     /* CHECK POSITIONALS */    00275900
*    THEN                                                               00276000
*      DO;                                                              00276100
*        ZMS=' 8, "FUNCTION'!!               /**KPOSP* MSG*/            00276200
*            FUNCTION!!                                                 00276300
*            '" "FUNCTION"'!!                                           00276400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00276500
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00276600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00276700
*        ZMACRET=8;                          /* MACRO ERROR */          00276800
*      END;                                                             00276900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00277000
*  XFUNCTION='';                             /* RESET XVARIABLE */      00277100
*  IF TRANSLATE(FUNCTION(1))                                            00277200
*              = 'SET'                       /* CHECK FOR KEYWORD */    00277300
*    THEN                                                               00277400
*      XFUNCTION = 'SET';                    /* SET XVARIABLE */        00277500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00277600
*  IF TRANSLATE(FUNCTION(1))                                            00277700
*              = 'RESET'                     /* CHECK FOR KEYWORD */    00277800
*    THEN                                                               00277900
*      XFUNCTION = 'RESET';                  /* SET XVARIABLE */        00278000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00278100
*  ZXFUNCTION='INPUT';                       /* SET IN/OUTPUT */        00278200
*  IF XFUNCTION=''                           /* CHECK FOR KEYWORD */    00278300
*    THEN                                                               00278400
*      DO;                                   /* KEYWORD NOT ENTERED */  00278500
*        XFUNCTION='SET';                    /* SET DEFAULT */          00278600
*        IF FUNCTION(1)^=''                                             00278700
*          THEN                                                         00278800
*            DO;                                                        00278900
*              ZXFUNCTION='';                /* RESET IN/OUTPUT */      00279000
*              ZMS=' 8, "FUNCTION'!!         /**KUKWP* MSG*/            00279100
*                  FUNCTION!!'"'!!                                      00279200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00279300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00279400
*                  ' "SET"'!!                /* VALID KEYWORD */        00279500
*                  ' OR "RESET".';           /* VALID KEYWORD */        00279600
*              ANS MSG('?IWM4HLTH ---> '!!ZMS);                         00279700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00279800
*              ZMACRET=8;                    /* MACRO ERROR */          00279900
*            END;                                                       00280000
*      END;                                                             00280100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00280200
*  IF NUMBER(HEALTH)>1                       /* CHECK POSITIONALS */    00280300
*    THEN                                                               00280400
*      DO;                                                              00280500
*        ZMS=' 8, "HEALTH'!!                 /**KPOSP* MSG*/            00280600
*            HEALTH!!                                                   00280700
*            '" "HEALTH"'!!                                             00280800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00280900
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00281000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00281100
*        ZMACRET=8;                          /* MACRO ERROR */          00281200
*      END;                                                             00281300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00281400
*  XHEALTH=HEALTH(1);                        /* SET XVARIABLE */        00281500
*  IF HEALTH(1)=''                           /* CHECK FOR NULL */       00281600
*   THEN                                                                00281700
*    DO;                                     /* KEY IS REQUIRED */      00281800
*        ZXHEALTH='';                        /* RESET IN/OUTPUT */      00281900
*        ZMS=' 8,  '!!                                                  00282000
*            ' "HEALTH" KEY AND ITS'!!                                  00282100
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00282200
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00282300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00282400
*        ZMACRET=8;                          /* MACRO ERROR */          00282500
*    END;                                                               00282600
*  ELSE                                                                 00282700
*    ZXHEALTH='INPUT';                       /* SET IN/OUTPUT */        00282800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00282900
*  IF SUBSYS='SUBSYS' ! SUBSYS='()'          /*CHECK ENTRY*/            00283000
*    THEN                                                               00283100
*      DO;                                                              00283200
*        ZMS=' 8, THE "SUBSYS" KEY'!!        /**KOPTP* MSG*/            00283300
*            ' MUST CONTAIN ONE'!!                                      00283400
*            ' (OR MORE) ARGUMENT(S).';                                 00283500
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00283600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00283700
*        ZMACRET=8;                          /* MACRO ERROR */          00283800
*      END;                                                             00283900
*  IF NUMBER(SUBSYS)>1                       /* CHECK POSITIONALS */    00284000
*    THEN                                                               00284100
*      DO;                                                              00284200
*        ZMS=' 8, "SUBSYS'!!                 /**KPOSP* MSG*/            00284300
*            SUBSYS!!                                                   00284400
*            '" "SUBSYS"'!!                                             00284500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00284600
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00284700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00284800
*        ZMACRET=8;                          /* MACRO ERROR */          00284900
*      END;                                                             00285000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00285100
*  ZXSUBSYS='INPUT';                         /* SET IN/OUTPUT */        00285200
*  XSUBSYS='NO_SUBSYS';                      /* SET DEFAULT */          00285300
*  IF SUBSYS(1)^=''                          /* CHECK FOR NULL */       00285400
*    THEN                                                               00285500
*      XSUBSYS=SUBSYS(1);                    /* SET XVARIABLE */        00285600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00285700
*  IF SUBSYSNM='SUBSYSNM' ! SUBSYSNM='()'    /*CHECK ENTRY*/            00285800
*    THEN                                                               00285900
*      DO;                                                              00286000
*        ZMS=' 8, THE "SUBSYSNM" KEY'!!      /**KOPTP* MSG*/            00286100
*            ' MUST CONTAIN ONE'!!                                      00286200
*            ' (OR MORE) ARGUMENT(S).';                                 00286300
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00286400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00286500
*        ZMACRET=8;                          /* MACRO ERROR */          00286600
*      END;                                                             00286700
*  IF NUMBER(SUBSYSNM)>1                     /* CHECK POSITIONALS */    00286800
*    THEN                                                               00286900
*      DO;                                                              00287000
*        ZMS=' 8, "SUBSYSNM'!!               /**KPOSP* MSG*/            00287100
*            SUBSYSNM!!                                                 00287200
*            '" "SUBSYSNM"'!!                                           00287300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00287400
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00287500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00287600
*        ZMACRET=8;                          /* MACRO ERROR */          00287700
*      END;                                                             00287800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00287900
*  ZXSUBSYSNM='INPUT';                       /* SET IN/OUTPUT */        00288000
*  XSUBSYSNM='NO_SUBSYSNM';                  /* SET DEFAULT */          00288100
*  IF SUBSYSNM(1)^=''                        /* CHECK FOR NULL */       00288200
*    THEN                                                               00288300
*      XSUBSYSNM=SUBSYSNM(1);                /* SET XVARIABLE */        00288400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00288500
*  IF HEALTHRSN='HEALTHRSN' ! HEALTHRSN='()'  /*CHECK ENTRY*/           00288600
*    THEN                                                               00288700
*      DO;                                                              00288800
*        ZMS=' 8, THE "HEALTHRSN" KEY'!!     /**KOPTP* MSG*/            00288900
*            ' MUST CONTAIN ONE'!!                                      00289000
*            ' (OR MORE) ARGUMENT(S).';                                 00289100
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00289200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00289300
*        ZMACRET=8;                          /* MACRO ERROR */          00289400
*      END;                                                             00289500
*  IF NUMBER(HEALTHRSN)>1                    /* CHECK POSITIONALS */    00289600
*    THEN                                                               00289700
*      DO;                                                              00289800
*        ZMS=' 8, "HEALTHRSN'!!              /**KPOSP* MSG*/            00289900
*            HEALTHRSN!!                                                00290000
*            '" "HEALTHRSN"'!!                                          00290100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00290200
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00290300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00290400
*        ZMACRET=8;                          /* MACRO ERROR */          00290500
*      END;                                                             00290600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00290700
*  ZXHEALTHRSN='INPUT';                      /* SET IN/OUTPUT */        00290800
*  XHEALTHRSN='NO_RSN';                      /* SET DEFAULT */          00290900
*  IF HEALTHRSN(1)^=''                       /* CHECK FOR NULL */       00291000
*    THEN                                                               00291100
*      XHEALTHRSN=HEALTHRSN(1);              /* SET XVARIABLE */        00291200
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00291300
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00291400
*    THEN                                                               00291500
*      DO;                                                              00291600
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00291700
*            ' MUST CONTAIN ONE'!!                                      00291800
*            ' (OR MORE) ARGUMENT(S).';                                 00291900
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00292000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00292100
*        ZMACRET=8;                          /* MACRO ERROR */          00292200
*      END;                                                             00292300
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00292400
*    THEN                                                               00292500
*      DO;                                                              00292600
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00292700
*            RETCODE!!                                                  00292800
*            '" "RETCODE"'!!                                            00292900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00293000
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00293100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00293200
*        ZMACRET=8;                          /* MACRO ERROR */          00293300
*      END;                                                             00293400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00293500
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00293600
*    THEN                                                               00293700
*      DO;                                                              00293800
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00293900
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00294000
*      END;                                                             00294100
*  ELSE                                                                 00294200
*    IF ZXRETCODE^=''                                                   00294300
*      THEN                                                             00294400
*        ZXRETCODE='';                       /* RESET OUTPUT */         00294500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00294600
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00294700
*    THEN                                                               00294800
*      DO;                                                              00294900
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00295000
*            ' MUST CONTAIN ONE'!!                                      00295100
*            ' (OR MORE) ARGUMENT(S).';                                 00295200
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00295300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00295400
*        ZMACRET=8;                          /* MACRO ERROR */          00295500
*      END;                                                             00295600
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00295700
*    THEN                                                               00295800
*      DO;                                                              00295900
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00296000
*            RSNCODE!!                                                  00296100
*            '" "RSNCODE"'!!                                            00296200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00296300
*        ANS MSG('?IWM4HLTH ---> '!!ZMS);                               00296400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00296500
*        ZMACRET=8;                          /* MACRO ERROR */          00296600
*      END;                                                             00296700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00296800
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00296900
*    THEN                                                               00297000
*      DO;                                                              00297100
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00297200
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00297300
*      END;                                                             00297400
*  ELSE                                                                 00297500
*    IF ZXRSNCODE^=''                                                   00297600
*      THEN                                                             00297700
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00297800
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00297900
*      END;                                  /* END COMPLETE CHECKING*/ 00298000
*/********************************************************************/ 00298100
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00298200
*/********************************************************************/ 00298300
*  IF ZMACRET = 0                                                       00298400
*    THEN                                                               00298500
*      DO;                                                              00298600
*/********************************************************************/ 00298700
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00298800
*/********************************************************************/ 00298900
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00299000
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00299100
*    THEN                                                               00299200
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00299300
*    ELSE                                                               00299400
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00299500
*/********************************************************************/ 00299600
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00299700
*  IF XMF^='L'                                                          00299800
*    THEN                                                               00299900
*      ANS('DO; /* IWM4HLTH-PLISTVER */')                               00300000
*          NORESCAN COL(MACLMAR);                                       00300100
*/*MCMPLS01 RFY 15*/                                                    00300200
*  IF XMF^='L' & ZMACRET = 0                                            00300300
*    THEN                                                               00300400
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   00300500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00300600
       DCL EHAMAPS CHAR EXTERNAL;                                       00300700
       IF INDEX(EHAMAPS,'XM@')=0 THEN                                   00300800
         EHAMAPS=EHAMAPS!!'XM@,';                                       00300900
       IF INDEX(EHAREGS,'00F')=0                                        00301000
         THEN                                                           00301100
           EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */    00301200
       IF INDEX(EHAREGS,'15F')=0                                        00301300
         THEN                                                           00301400
           EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */    00301500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00301600
*/*PL.LL01 ?IWM4HLTH MF=L PARAMETER LIST-----------------------------*/ 00301700
*  IF XMF='L'                                                           00301800
*    THEN                                                               00301900
*      DO;                                                              00302000
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00302100
*            '/* ?IWM4HLTH PARM LIST*/')                                00302200
*            NORESCAN COL(MACLMAR);                                     00302300
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00302400
*        ANS('2 '!!XMFCTRL!!                                            00302500
*            '_XVERSION FIXED(8), '!!                                   00302600
*            '/* INPUT XVERSION*/')                                     00302700
*            NORESCAN COL(MACLMAR+2);                                   00302800
*/*PL.LL04  XFLAGS BIT(8) FIELD_LABEL--------------------------------*/ 00302900
*        ANS('2 '!!XMFCTRL!!                                            00303000
*            '_XFLAGS BIT(8), '!!                                       00303100
*            '/* FIELD_LABEL */')                                       00303200
*            NORESCAN COL(MACLMAR+2);                                   00303300
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00303400
*          ANS('3 '!!XMFCTRL!!                                          00303500
*              '_XFUNCTION_SET BIT(1), '!!                              00303600
*              '/* BIT */')                                             00303700
*              NORESCAN COL(MACLMAR+2);                                 00303800
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00303900
*          ANS('3 '!!XMFCTRL!!                                          00304000
*              '_XFUNCTION_RESET BIT(1), '!!                            00304100
*              '/* BIT */')                                             00304200
*              NORESCAN COL(MACLMAR+2);                                 00304300
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00304400
*          ANS('3 '!!XMFCTRL!!                                          00304500
*              '_XFLAGS_RSVD1 BIT(3), '!!                               00304600
*              '/* BIT */')                                             00304700
*              NORESCAN COL(MACLMAR+2);                                 00304800
*/*PL.LL09 BIT XXXXX1XX----------------------------------------------*/ 00304900
*          ANS('3 '!!XMFCTRL!!                                          00305000
*              '_KEYUSED_HEALTHRSN BIT(1), '!!                          00305100
*              '/* BIT */')                                             00305200
*              NORESCAN COL(MACLMAR+2);                                 00305300
*/*PL.LL09 BIT XXXXXX1X----------------------------------------------*/ 00305400
*          ANS('3 '!!XMFCTRL!!                                          00305500
*              '_KEYUSED_SUBSYS BIT(1), '!!                             00305600
*              '/* BIT */')                                             00305700
*              NORESCAN COL(MACLMAR+2);                                 00305800
*/*PL.LL07 BIT XXXXXXX1----------------------------------------------*/ 00305900
*          ANS('3 '!!XMFCTRL!!                                          00306000
*              '_KEYUSED_SUBSYSNM BIT(1), '!!                           00306100
*              '/* BIT */')                                             00306200
*              NORESCAN COL(MACLMAR+2);                                 00306300
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00306400
*        ANS('2 '!!XMFCTRL!!                                            00306500
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00306600
*            '/* INPUT XPLISTLEN*/')                                    00306700
*            NORESCAN COL(MACLMAR+2);                                   00306800
*/*PL.LL13  XHEALTH FIXED(31) INPUT----------------------------------*/ 00306900
*        ANS('2 '!!XMFCTRL                                              00307000
*         !! '_XHEALTH FIXED(31), '                                     00307100
*         !! '/* '!!ZXHEALTH                                            00307200
*         !! ' XHEALTH */'                                              00307300
*            ) NORESCAN COL(MACLMAR+2);                                 00307400
*/*PL.LL13  XSTOKEN BIT(64) INPUT------------------------------------*/ 00307500
*        ANS('2 '!!XMFCTRL                                              00307600
*         !! '_XSTOKEN BIT(64), '                                       00307700
*         !! '/* '!!ZXSTOKEN                                            00307800
*         !! ' XSTOKEN */'                                              00307900
*            ) NORESCAN COL(MACLMAR+2);                                 00308000
*/*PL.LL13  XRSV0010 CHAR(32) RESERVED-------------------------------*/ 00308100
*        ANS('2 '!!XMFCTRL                                              00308200
*         !! '_XRSV0010 CHAR(32), '                                     00308300
*         !! '/* RESERVED */'                                           00308400
*            ) NORESCAN COL(MACLMAR+2);                                 00308500
*/*PL.LPVER01 -------------------------------------------------------*/ 00308600
*  IF XPLISTVER>=1                                                      00308700
*    THEN                                                               00308800
*      DO;                                                              00308900
*/*PL.L01 XRSV0010 DEFINED------------------------------------------*/  00309000
*        ANS('1 * DEF('!!XMFCTRL!!                                      00309100
*            '_XRSV0010), '!!                                           00309200
*            '/* DEFINED */')                                           00309300
*            NORESCAN COL(MACLMAR);                                     00309400
*/*PL.LPVER02 -------------------------------------------------------*/ 00309500
*      END;                                                             00309600
*/*PL.LPVER01 -------------------------------------------------------*/ 00309700
*  IF XPLISTVER>=1                                                      00309800
*    THEN                                                               00309900
*      DO;                                                              00310000
*/*PL.LL13  XSUBSYS CHAR(8) INPUT------------------------------------*/ 00310100
*        ANS('2 '!!XMFCTRL                                              00310200
*         !! '_XSUBSYS CHAR(8), '                                       00310300
*         !! '/* '!!ZXSUBSYS                                            00310400
*         !! ' XSUBSYS */'                                              00310500
*            ) NORESCAN COL(MACLMAR+2);                                 00310600
*/*PL.LPVER02 -------------------------------------------------------*/ 00310700
*      END;                                                             00310800
*/*PL.LPVER01 -------------------------------------------------------*/ 00310900
*  IF XPLISTVER>=1                                                      00311000
*    THEN                                                               00311100
*      DO;                                                              00311200
*/*PL.LL13  XSUBSYSNM CHAR(8) INPUT----------------------------------*/ 00311300
*        ANS('2 '!!XMFCTRL                                              00311400
*         !! '_XSUBSYSNM CHAR(8), '                                     00311500
*         !! '/* '!!ZXSUBSYSNM                                          00311600
*         !! ' XSUBSYSNM */'                                            00311700
*            ) NORESCAN COL(MACLMAR+2);                                 00311800
*/*PL.LPVER02 -------------------------------------------------------*/ 00311900
*      END;                                                             00312000
*/*PL.LPVER01 -------------------------------------------------------*/ 00312100
*  IF XPLISTVER>=1                                                      00312200
*    THEN                                                               00312300
*      DO;                                                              00312400
*/*PL.LL13  XHEALTHRSN CHAR(16) INPUT--------------------------------*/ 00312500
*        ANS('2 '!!XMFCTRL                                              00312600
*         !! '_XHEALTHRSN CHAR(16), '                                   00312700
*         !! '/* '!!ZXHEALTHRSN                                         00312800
*         !! ' XHEALTHRSN */'                                           00312900
*            ) NORESCAN COL(MACLMAR+2);                                 00313000
*/*PL.LPVER02 -------------------------------------------------------*/ 00313100
*      END;                                                             00313200
*/*PL.LL18 ----------------------------------------------------------*/ 00313300
*        ANS('2 * CHAR(0);')                                            00313400
*            NORESCAN COL(MACLMAR+2);                                   00313500
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00313600
*      END;                                                             00313700
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00313800
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00313900
*  DEACT ZPRMLINE;                                                      00314000
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00314100
*  DEACT ZNDX;                                                          00314200
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00314300
*  DCL XVERSION CHAR;                                                   00314400
*  DEACT XVERSION;                                                      00314500
*/*PL.L02 ?IWM4HLTH PARAMETER LIST-----------------------------------*/ 00314600
*  IF XMF^='L'                                                          00314700
*    THEN                                                               00314800
*      DO;                                                              00314900
*/*PL.L03 ?IWM4HLTH PARAMETER LIST-----------------------------------*/ 00315000
*        IF XMF='S'                                                     00315100
*          THEN                                                         00315200
*            XMFCTRL='#ZPLIST';                                         00315300
*/*PL.L04 ?IWM4HLTH PARAMETER LIST-----------------------------------*/ 00315400
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00315500
*                 XMFCTRL!!'),'!!                                       00315600
*                 ' /* ?IWM4HLTH PARM LIST*/';                          00315700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00315800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00315900
*                 '_XVERSION FIXED(8), '!!                              00316000
*                 '/* INPUT XVERSION*/';                                00316100
*/*PL.L08  XFLAGS BIT(8) FIELD_LABEL---------------------------------*/ 00316200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00316300
*                 '_XFLAGS BIT(8), '!!                                  00316400
*                 '/* FIELD_LABEL */';                                  00316500
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00316600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00316700
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00316800
*                 '/* INPUT XPLISTLEN*/';                               00316900
*/*PL.L08  XHEALTH FIXED(31) INPUT-----------------------------------*/ 00317000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00317100
*                 '_XHEALTH FIXED(31), '!!                              00317200
*                 '/* '!!ZXHEALTH!!                                     00317300
*                 ' XHEALTH */';                                        00317400
*/*PL.L08  XSTOKEN BIT(64) INPUT-------------------------------------*/ 00317500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00317600
*                 '_XSTOKEN BIT(64), '!!                                00317700
*                 '/* '!!ZXSTOKEN!!                                     00317800
*                 ' XSTOKEN */';                                        00317900
*/*PL.L08  XRSV0010 CHAR(32) RESERVED--------------------------------*/ 00318000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00318100
*                 '_XRSV0010 CHAR(32), '!!                              00318200
*                 '/* RESERVED */';                                     00318300
*/*PL.LPVER03 -------------------------------------------------------*/ 00318400
*  IF XPLISTVER>=1                                                      00318500
*    THEN                                                               00318600
*      DO;                                                              00318700
*/*PL.P01 XRSV0010 DEFINED------------------------------------------*/  00318800
*        ZPRMLINE=ZPRMLINE!!                                            00318900
*            ' 1 * DEF(#Z'!!ZNDX!!                                      00319000
*            '_XRSV0010), '!!                                           00319100
*            '/* DEFINED */';                                           00319200
*/*PL.LPVER04 -------------------------------------------------------*/ 00319300
*      END;                                                             00319400
*/*PL.LPVER03 -------------------------------------------------------*/ 00319500
*  IF XPLISTVER>=1                                                      00319600
*    THEN                                                               00319700
*      DO;                                                              00319800
*/*PL.L08  XSUBSYS CHAR(8) INPUT-------------------------------------*/ 00319900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00320000
*                 '_XSUBSYS CHAR(8), '!!                                00320100
*                 '/* '!!ZXSUBSYS!!                                     00320200
*                 ' XSUBSYS */';                                        00320300
*/*PL.LPVER04 -------------------------------------------------------*/ 00320400
*      END;                                                             00320500
*/*PL.LPVER03 -------------------------------------------------------*/ 00320600
*  IF XPLISTVER>=1                                                      00320700
*    THEN                                                               00320800
*      DO;                                                              00320900
*/*PL.L08  XSUBSYSNM CHAR(8) INPUT-----------------------------------*/ 00321000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00321100
*                 '_XSUBSYSNM CHAR(8), '!!                              00321200
*                 '/* '!!ZXSUBSYSNM!!                                   00321300
*                 ' XSUBSYSNM */';                                      00321400
*/*PL.LPVER04 -------------------------------------------------------*/ 00321500
*      END;                                                             00321600
*/*PL.LPVER03 -------------------------------------------------------*/ 00321700
*  IF XPLISTVER>=1                                                      00321800
*    THEN                                                               00321900
*      DO;                                                              00322000
*/*PL.L08  XHEALTHRSN CHAR(16) INPUT---------------------------------*/ 00322100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00322200
*                 '_XHEALTHRSN CHAR(16), '!!                            00322300
*                 '/* '!!ZXHEALTHRSN!!                                  00322400
*                 ' XHEALTHRSN */';                                     00322500
*/*PL.LPVER04 -------------------------------------------------------*/ 00322600
*      END;                                                             00322700
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00322800
*        ZPRMNUM=ZPRMNUM+1;                                             00322900
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00323000
*        IF XPLISTVER^=0                                                00323100
*           & XMF^='S'                                                  00323200
*          THEN                                                         00323300
*            DO;                                                        00323400
*              ZPRMNUM=ZPRMNUM+1;                                       00323500
*              ZPRM(ZPRMNUM)=                                           00323600
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00323700
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00323800
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00323900
*               ' IS LONG ENOUGH */';                                   00324000
*            END;                                                       00324100
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00324200
*        ZPLLEN=48;                                                     00324300
*        IF XPLISTVER>=0                                                00324400
*          THEN                                                         00324500
*            ZPLLEN=48;                                                 00324600
*        IF ZPRMMAX<ZPLLEN                                              00324700
*           & XMF^='E'                                                  00324800
*          THEN                                                         00324900
*            ZPRMMAX=ZPLLEN;                                            00325000
*/*PL.L13 -----------------------------------------------------------*/ 00325100
*      END;                                                             00325200
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00325300
*  IF XMF^='L'                                                          00325400
*    THEN                                                               00325500
*      DO;                                                              00325600
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00325700
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00325800
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00325900
*                '/* CLEAR PARAMETER AREA */')                          00326000
*                NORESCAN COL(MACLMAR);                                 00326100
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00326200
*        IF XPLISTVER^=0                                                00326300
*          THEN                                                         00326400
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00326500
*                '/* XVERSION FIXED(8) */')                             00326600
*                NORESCAN COL(MACLMAR);                                 00326700
*/*PI.L06 XFLAGS BIT(8)----------------------------------------------*/ 00326800
*        ZW='';                                                         00326900
*        ZMS='';                                                        00327000
*/*PI.L07 XFLAGS BIT(8) 1XXXXXXX-------------------------------------*/ 00327100
*        IF XFUNCTION='SET'                                             00327200
*          THEN                                                         00327300
*            ZW=ZW!!'1';                                                00327400
*          ELSE                                                         00327500
*            ZW=ZW!!'0';                                                00327600
*/*PI.L07 XFLAGS BIT(8) X1XXXXXX-------------------------------------*/ 00327700
*        IF XFUNCTION='RESET'                                           00327800
*          THEN                                                         00327900
*            ZW=ZW!!'1';                                                00328000
*          ELSE                                                         00328100
*            ZW=ZW!!'0';                                                00328200
*/*PI.L07 XFLAGS BIT(8) XXXXX1XX-------------------------------------*/ 00328300
*        IF HEALTHRSN^=''                                               00328400
*          THEN                                                         00328500
*            ZW=ZW!!'0001';                                             00328600
*          ELSE                                                         00328700
*            ZW=ZW!!'0000';                                             00328800
*/*PI.L07 XFLAGS BIT(8) XXXXXX1X-------------------------------------*/ 00328900
*        IF SUBSYS^=''                                                  00329000
*          THEN                                                         00329100
*            ZW=ZW!!'1';                                                00329200
*          ELSE                                                         00329300
*            ZW=ZW!!'0';                                                00329400
*/*PI.L07 XFLAGS BIT(8) XXXXXXX1-------------------------------------*/ 00329500
*        IF SUBSYSNM^=''                                                00329600
*          THEN                                                         00329700
*            ZW=ZW!!'1';                                                00329800
*          ELSE                                                         00329900
*            ZW=ZW!!'0';                                                00330000
*/*PI.L09 XFLAGS BIT(8)----------------------------------------------*/ 00330100
*        IF INDEX(ZW,'1')^=0                                            00330200
*          THEN                                                         00330300
*            ANS('#Z'!!ZNDX!!'_XFLAGS='!!                               00330400
*                '#Z'!!ZNDX!!'_XFLAGS ! '!!                             00330500
*                ''''!!ZW!!'''B; '!!                                    00330600
*                '/* BIT(8) */')                                        00330700
*                NORESCAN COL(MACLMAR);                                 00330800
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00330900
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00331000
*            '/* XPLISTLEN FIXED(16) */')                               00331100
*            NORESCAN COL(MACLMAR);                                     00331200
*/*PI.L17 XHEALTH FIXED(31)------------------------------------------*/ 00331300
*        IF ZXHEALTH='INPUT' !                                          00331400
*           ZXHEALTH='INOUT'                                            00331500
*          THEN                                                         00331600
*            ANS('#Z'!!ZNDX!!'_XHEALTH='!!                              00331700
*                XHEALTH!!';'!!                                         00331800
*                '/* XHEALTH FIXED(31) */')                             00331900
*                NORESCAN COL(MACLMAR);                                 00332000
*/*PI.L19 XSTOKEN NAME BIT(64)---------------------------------------*/ 00332100
*        IF ZXSTOKEN='INPUT' !                                          00332200
*           ZXSTOKEN='INOUT'                                            00332300
*          THEN                                                         00332400
*            IF (XSTOKEN(1:1)^='0' &                                    00332500
*               XSTOKEN(1:1)^='1')                                      00332600
*              THEN                                                     00332700
*                ANS('#Z'!!ZNDX!!'_XSTOKEN='!!                          00332800
*                    XSTOKEN!!';'!!                                     00332900
*                    '/* XSTOKEN BIT(64) */')                           00333000
*                    NORESCAN COL(MACLMAR);                             00333100
*              ELSE                                                     00333200
*                ANS('#Z'!!ZNDX!!'_XSTOKEN='!!                          00333300
*                    ''''!!XSTOKEN!!'''B;'!!                            00333400
*                    '/* XSTOKEN BIT(64) */')                           00333500
*                    NORESCAN COL(MACLMAR);                             00333600
*/*PI.LPVER01 -------------------------------------------------------*/ 00333700
*  IF XPLISTVER>=1                                                      00333800
*    THEN                                                               00333900
*      DO;                                                              00334000
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00334100
*        IF TRANSLATE(XSUBSYS)                                          00334200
*                    = 'NO_SUBSYS'                                      00334300
*          THEN                                                         00334400
*            ZXSUBSYS='';                    /* RESET INPUT/INOUT */    00334500
*/*PI.L21 XSUBSYS NAME CHAR(8)---------------------------------------*/ 00334600
*        IF ZXSUBSYS='INPUT' !                                          00334700
*           ZXSUBSYS='INOUT'                                            00334800
*          THEN                                                         00334900
*            ANS('#Z'!!ZNDX!!'_XSUBSYS='!!                              00335000
*                XSUBSYS!!';'!!                                         00335100
*                '/* XSUBSYS CHAR(8) */')                               00335200
*                NORESCAN COL(MACLMAR);                                 00335300
*/*PI.LPVER02 -------------------------------------------------------*/ 00335400
*      END;                                                             00335500
*/*PI.LPVER01 -------------------------------------------------------*/ 00335600
*  IF XPLISTVER>=1                                                      00335700
*    THEN                                                               00335800
*      DO;                                                              00335900
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00336000
*        IF TRANSLATE(XSUBSYSNM)                                        00336100
*                    = 'NO_SUBSYSNM'                                    00336200
*          THEN                                                         00336300
*            ZXSUBSYSNM='';                  /* RESET INPUT/INOUT */    00336400
*/*PI.L21 XSUBSYSNM NAME CHAR(8)-------------------------------------*/ 00336500
*        IF ZXSUBSYSNM='INPUT' !                                        00336600
*           ZXSUBSYSNM='INOUT'                                          00336700
*          THEN                                                         00336800
*            ANS('#Z'!!ZNDX!!'_XSUBSYSNM='!!                            00336900
*                XSUBSYSNM!!';'!!                                       00337000
*                '/* XSUBSYSNM CHAR(8) */')                             00337100
*                NORESCAN COL(MACLMAR);                                 00337200
*/*PI.LPVER02 -------------------------------------------------------*/ 00337300
*      END;                                                             00337400
*/*PI.LPVER01 -------------------------------------------------------*/ 00337500
*  IF XPLISTVER>=1                                                      00337600
*    THEN                                                               00337700
*      DO;                                                              00337800
*/*PI.L14 CHECK FOR * AS THE CHAR(16) ARGUMENT-----------------------*/ 00337900
*        IF TRANSLATE(XHEALTHRSN)                                       00338000
*                    = 'NO_RSN'                                         00338100
*          THEN                                                         00338200
*            ZXHEALTHRSN='';                 /* RESET INPUT/INOUT */    00338300
*/*PI.L21 XHEALTHRSN NAME CHAR(16)-----------------------------------*/ 00338400
*        IF ZXHEALTHRSN='INPUT' !                                       00338500
*           ZXHEALTHRSN='INOUT'                                         00338600
*          THEN                                                         00338700
*            ANS('#Z'!!ZNDX!!'_XHEALTHRSN='!!                           00338800
*                XHEALTHRSN!!';'!!                                      00338900
*                '/* XHEALTHRSN CHAR(16) */')                           00339000
*                NORESCAN COL(MACLMAR);                                 00339100
*/*PI.LPVER02 -------------------------------------------------------*/ 00339200
*      END;                                                             00339300
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00339400
*              IF NUMBER(RSNCODE)>0                                     00339500
*                THEN                                                   00339600
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00339700
*              IF NUMBER(RETCODE)>0                                     00339800
*                THEN                                                   00339900
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00340000
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00340100
*                    IF SYSAM64 = 'YES' THEN                            00340200
*              ANS('G64R01P=ADDR(#Z'!!ZNDX!!');'!!                      00340300
*                  '/* PARAMETER LIST */')                              00340400
*                  NORESCAN COL(MACLMAR);                               00340500
*                    ELSE                                               00340600
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00340700
*                  '/* PARAMETER LIST */')                              00340800
*                  NORESCAN COL(MACLMAR);                               00340900
*              IF SYSASCE^='P'                                          00341000
*                THEN                                                   00341100
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00341200
*                      '/* PARAMETER LIST AR */')                       00341300
*                      NORESCAN COL(MACLMAR);                           00341400
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00341500
       ANS('PC(XM@(96)!118);') SKIP COL(5);                             00341600
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00341700
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00341800
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00341900
*              IF NUMBER(RETCODE)>0                                     00342000
*                THEN                                                   00342100
*                    ANS(XRETCODE!!                                     00342200
*                     '=GPR15F; /* SET RETURN CODE */')                 00342300
*                      NORESCAN COL(MACLMAR);                           00342400
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00342500
*              IF NUMBER(RSNCODE)>0                                     00342600
*                THEN                                                   00342700
*                    ANS(XRSNCODE!!                                     00342800
*                     '=GPR00F; /* SET REASON CODE */')                 00342900
*                      NORESCAN COL(MACLMAR);                           00343000
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00343100
*              IF NUMBER(RSNCODE)>0                                     00343200
*                THEN                                                   00343300
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00343400
*              IF NUMBER(RETCODE)>0                                     00343500
*                THEN                                                   00343600
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00343700
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00343800
*      END;                                                             00343900
*/*PO.L13 IWM4HLTH USAGE INDICATOR-----------------------------------*/ 00344000
*  ZIWM4HLTH='YES';                          /* SET IWM4HLTH USED */    00344100
*/*PO.L15 END OF EXECUTABLE IWM4HLTH-PLISTVER MACRO------------------*/ 00344200
*  IF XMF^='L'                                                          00344300
*    THEN                                                               00344400
*      ANS('END; /* IWM4HLTH-PLISTVER */')                              00344500
*          NORESCAN COL(MACLMAR);                                       00344600
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00344700
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00344800
*/*PO.L17 END OF IWM4HLTH MACRO--------------------------------------*/ 00344900
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00345000
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00345100
*/*******************************************************************/  00345200
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00345300
*/*******************************************************************/  00345400
*      END;                                                             00345500
*/*******************************************************************/  00345600
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00345700
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00345800
*/*******************************************************************/  00345900
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00346000
*    THEN                                                               00346100
*      DO;                                                              00346200
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00346300
*                                      DOUBLEWORD MULTIPLES        */   00346400
*/*******************************************************************/  00346500
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00346600
*/*******************************************************************/  00346700
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00346800
*          THEN                                                         00346900
*            DO;                                                        00347000
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00347100
*                THEN                                                   00347200
*                  DO;                                                  00347300
*                    ANS('?EPILOG                                       00347400
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00347500
*                    EHALIST=EHALIST!!',AMG,';                          00347600
*                  END;                                                 00347700
*            END;                                                       00347800
*/*******************************************************************/  00347900
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00348000
*/*******************************************************************/  00348100
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00348200
*          THEN                                                         00348300
*            DO;                                                        00348400
*              IF ZPRMMAX>EHAMAXLEN                                     00348500
*                THEN                                                   00348600
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00348700
*            END;                                                       00348800
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00348900
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00349000
*              COL(MACLMAR);                                            00349100
*        END;                                                           00349200
*      END;                                                             00349300
*/*-----------------------------------------------------------------*/  00349400
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00349500
*/*        BY ?EPILOG                                               */  00349600
*/*-----------------------------------------------------------------*/  00349700
*        IF INDEX(EHAREGS,'01P')=0                                      00349800
*          THEN                                                         00349900
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00350000
*        IF INDEX(EHAREGS,'00F')=0                                      00350100
*          & NUMBER(RSNCODE)>0                                          00350200
*          THEN                                                         00350300
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00350400
*        IF INDEX(EHAREGS,'15F')=0                                      00350500
*          THEN                                                         00350600
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00350700
*        IF SYSALVL > 1 THEN                                            00350800
*        DO;                                                            00350900
*          IF INDEX(EHAREGS64,'00F')=0 THEN                             00351000
*            EHAREGS64 = EHAREGS64 !! '00F';                            00351100
*          IF INDEX(EHAREGS64,'01P')=0 THEN                             00351200
*            EHAREGS64 = EHAREGS64 !! '01P';                            00351300
*          IF INDEX(EHAREGS64,'15F')=0 THEN                             00351400
*            EHAREGS64 = EHAREGS64 !! '15F';                            00351500
*        END;                                                           00351600
*  RETURN CODE(ZMACRET);                                                00351700
*%END IWM4HLTH;                                                         00351800
