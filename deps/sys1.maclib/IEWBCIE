*                                                                               
*/*********************************************************************         
*                                                                     *         
*    $MAC(IEWBCIE)  COMP(PMB01):                                      *         
*                                                                     *         
*    INCLUDE NAME: IEWBCIE                                            *         
*                                                                     *         
*    DESCRIPTIVE NAME: IMPORT/EXPORT TABLE MAPPING                    *         
*                                                                     *         
*    STATUS: HPM7730                                                  *         
*                                                                     *         
*PROPRIETARY V3 STATEMENT                                             *         
*LICENSED MATERIALS - PROPERTY OF IBM                                 *         
*5694-A01                                                             *         
*COPYRIGHT IBM CORP. 1998, 2006                                       *         
*END PROPRIETARY V3 STATEMENT                                         *         
*                                                                     *         
*    FUNCTION: Define the format of the Binder-generated              *         
*              Import/Export table.  This is the format               *         
*              returned by a GETD call for B_IMPEXP and may be        *         
*              be used by external users (such as LE) to map          *         
*              the generated table.                                   *         
*                                                                     *         
*    NOTES:                                                           *         
*       There are two versions of the mapping. Version 2          @L1A*         
*       was added for XPLINK support and will be used if any      @L1A*         
*       imported or exported functions or imported data uses      @L1A*         
*       XPLINK conventions.                                           *         
*                                                                     *         
*    METHOD OF ACCESS:                                                *         
*                                                                     *         
*      Assembler: mapping via DSECTs                                  *         
*                                                                     *         
*      PL/X LINKAGE:                                                  *         
*                                           -----                     *         
*       %DCL CIETBASE CHAR EXTERNAL                                   *         
*       %CIETBASE=''                                                  *         
*       %INCLUDE SYSLIB(IEWBCIE)                                      *         
*                                                                     *         
*       By default, the IEWBCIE header is based on CIET_PTR with      *         
*       both basing expression and pointer declared                   *         
*       If other basing is desired, use %CIETBASE='BASED(XXXXXX)'     *         
*       If %CIETBASE='BASED(CIET_PTR)' is coded, a Declare for        *         
*       CIET_PTR is also generated.                                   *         
*                                                                     *         
*    MACRO TYPE: MAPPING                                              *         
*                                                                     *         
*       PROCESSOR: PL/X, Assembler                                    *         
*       DISTRIBUTION LIBRARY: PLSMACS                                 *         
*       ATTRIBUTES: NONE                                              *         
*                                                                     *         
*    CHANGE ACTIVITY:                                                 *         
*                                                                     *         
*   $L0=PM3ITER2,HDZ11C0,951121,SJPLLB: INITIAL                       *         
*   $L1=XPLINK  ,HDZ11E0,971124,SJPLLB: XPLINK. Add CIET2 mapping.    *         
*   $P0=XPLINK  ,HDZ11E0,990627,STLLB:  add extended attribute support*         
*   $P1=XPLINK  ,HDZ11E0,990707,POKDJS: change CIET2_VAR_REF basing,  *         
*                                       create bilingual version      *         
*   $P2=K160767 ,HDZ11F0,991111,STLMD: UPDATE PROLOG             @P2A *         
*   $P3=MG05772 ,HPM7730,050504,PMBRT: Make ASM match Pl/X       @P3A *         
*   $P4=MG07027 ,HPM7740,060526,PMBRT: Add matching constants    @P4A *         
*                                                                     *         
**********************************************************************/         
*/*                                                                             
         MACRO                                                                  
         IEWBCIE ,                                                              
         GBLC  CIET_EYE_CATCH_ID                                   @P4A         
         GBLC  CIET_BINDER_ID                                      @P4A         
CIET_HEADER DSECT                      CIET_HEADER is at offset                 
*                                        0 from the beginning of its            
*                                        resident class (B_IMPEXP)              
         DS    CL36                                                             
         ORG   CIET_HEADER                                                      
CIET_EYE_CATCHER DS CL8                Eyecatcher 'IEWBCIET'                    
&CIET_EYE_CATCH_ID SETC 'IEWBCIET'                                 @P4A         
CIET_VERSION     DS FL1                Version of this mapping                  
CIET_VERSION1   EQU 1                                              @P4A         
CIET_SOURCE      DS CL3                Identifies product building IET          
*                                        (Binder will store 'IEW')              
CIET_FUNC_ADDR   DS A                  Address of exported function             
*                                        pointer array             @P3C         
CIET_FUNC_COUNT  DS F                  Count of entries in exported             
*                                        function pointer array    @P3C         
CIET_VAR_ADDR    DS A                  Address of exported variable             
*                                        pointer array             @P3C         
CIET_VAR_COUNT   DS F                  Count of entries in exported             
*                                        variable pointer array    @P3C         
CIET_DLL_ADDR    DS A                  Address of DLL pointer array@P3C         
CIET_DLL_COUNT   DS F                  Count of entries in DLL pointer          
*                                        array                     @P3C         
*                                                                               
******************************************************************              
* Exported function and variable entries have the following                     
* common format. Note that the flag CIET_IS_FUNCTION indicates                  
* whether the symbol represents a function or a variable.                       
******************************************************************              
CIET_EXP_ENTRY DSECT                                                            
         DS    CL28                                                             
         ORG   CIET_EXP_ENTRY                                                   
CIET_EXP_CLASS      DS CL16         Name of class containing                    
*                                     exported symbol                           
CIET_EXP_OFFSET     DS F            Offset of exported symbol from @P3C         
*                                     start of class (or virtual                
*                                     address of the exported symbol            
*                                     if CIET_IS_ADDRESS is true)               
CIET_EXP_NAME_ADDR  DS A            Address of name of exported    @P3C         
*                                     symbol                                    
CIET_EXP_ATTRIBUTES DS BL2                                                      
CIET_IS_FUNCTION    EQU X'80'       Set if function (not variable)              
CIET_IS_ADDR        EQU X'40'       Set if CIET_EXP_OFFSET is an                
*                                     address rather than an offset             
*                                                                               
******************************************************************              
*                                                                               
* One entry for each DLL from which this program may import a symbol.           
*                                                                               
******************************************************************              
CIET_DLL_ENTRY DSECT                                                            
         DS    CL20                                                             
         ORG   CIET_DLL_ENTRY                                                   
CIET_DLL_NAME_ADDR       DS A          Address of DLL name         @P3C         
CIET_IMP_FUNC_ARRAY_ADDR DS A          Address of imported function             
*                                        pointer array             @P3C         
CIET_IMP_FUNC_COUNT      DS F          Count of functions imported              
*                                        from this DLL             @P3C         
CIET_IMP_VAR_ARRAY_ADDR  DS A          Address of imported variable             
*                                        pointer array             @P3C         
CIET_IMP_VAR_COUNT       DS F          Count of variables imported              
*                                        from this DLL             @P3C         
*                                                                               
******************************************************************              
* Two import arrays exist for each DLL from which this program                  
* may import a symbol.  One array is for functions, the other                   
* for variables.  One array entry exists for each symbol which                  
* the program may import from this DLL.                                         
******************************************************************              
CIET_IMP_ENTRY DSECT                                                            
         DS    CL24                                                             
         ORG   CIET_IMP_ENTRY                                                   
CIET_IMP_CLASS     DS CL16             Name of class                            
*                                      Containing descriptor for                
*                                        imported symbol                        
CIET_IMP_OFF       DS F                Offset of symbol's descriptor            
*                                        from start of it's containing          
*                                        class                     @P3C         
CIET_IMP_NAME_ADDR DS A                Address of symbol's name in              
*                                        string area               @P3C         
*                                                                               
******************************************************************              
******************************************************************              
*  CIET2 mapping.   A CIET version 2 table will be generated if                 
*  the module has any contents which require XPLINK support.                    
**********************************************************all @L1A              
******************************************************************              
*                                                                               
CIET2_HEADER DSECT                     CIET2_HEADER is at offset                
*                                        0 from the beginning of its            
*                                        resident class (B_IMPEXP)              
         DS    CL36                                                             
         ORG   CIET2_HEADER                                                     
CIET2_EYE_CATCHER DS CL8               Eyecatcher 'IEWBCIET'                    
CIET2_VERSION     DS FL1               Version of this mapping                  
CIET_VERSION2   EQU 2                                              @P4A         
CIET2_SOURCE      DS CL3               Identifies product building IET          
*                                        (Binder will store 'IEW')              
CIET2_FUNC_ADDR   DS A                 Address of exported function             
*                                        array                     @P3C         
CIET2_FUNC_COUNT  DS F                 Count of entries in exported             
*                                        function array            @P3C         
CIET2_VAR_ADDR    DS A                 Address of exported variable             
*                                        array                     @P3C         
CIET2_VAR_COUNT   DS F                 Count of entries in exported             
*                                        variable array            @P3C         
CIET2_DLL_ADDR    DS A                 Address of DLL array        @P3C         
CIET2_DLL_COUNT   DS F               Count of entries in DLL array @P3C         
*                                                                               
*****************************************************************               
*       EXPORT  ENTRIES                                                         
*****************************************************************               
* In version 2, exported functions (code) and exported variable                 
* (data) entries have different formats                                         
*****************************************************************               
*       Exported Data  (variables)                                              
*****************************************************************               
* For rent C/C++ code it is expected that the data will be                      
* in WSA and EXP_VAR_OFFSET will contain the offset.  For                       
* nonrent XPLINK and perhaps others, such as assembler, the data                
* will be in an initial load class and the field will contain                   
* an actual address.                                                            
*****************************************************************               
CIET2_EXP_VAR_ENTRY DSECT                                                       
         DS    CL16                                                             
         ORG   CIET2_EXP_VAR_ENTRY                                              
CIET2_EXP_VAR_CLASS_ADDR DS A          Address of name of class    @P3C         
*                                        containing exported symbol             
CIET2_EXP_VAR_OFFSET     DS F          Offset of exported symbol   @P3C         
         ORG   CIET2_EXP_VAR_OFFSET      from start of class (or                
CIET2_EXP_VAR_ADDR       DS A            virtual address of the    @P3C         
*                                        exported symbol if                     
*                                        CIET2_EXP_VAR_IS_ADDRESS               
*                                        is true)                               
CIET2_EXP_VAR_NAME_ADDR  DS A          Address of name of exported @P3C         
*                                        symbol                                 
CIET2_EXP_VAR_ATTRIBUTES DS BL2                                                 
CIET2_EXP_VAR_IS_ADDR    EQU X'40'     Set if CIET2_EXP_VAR_OFFSET              
*                                        is an address rather than an           
*                                        offset                                 
*                                                                               
*****************************************************************               
*       Exported Code (functions)                                               
*****************************************************************               
* Notes:                                                                        
* 1. function addresses from known HLL compilers will be in the                 
* initial load class but that is not an architectural restriction.              
* HLASM for example would allow functions in a deferred load                    
* class                                                                         
* 2. XPlink entries contain the information needed to build                     
* a call-by-ptr descriptor.                                                     
* 3. XPlink entries also contain the address of an array                        
* whose entries identify the locations in the module which                      
* are to be modified to point to the call-by-ptr descriptor                     
* once it has been built.                                                       
*****************************************************************               
CIET2_EXP_FUNC_ENTRY DSECT                                                      
         DS    CL36                                                             
         ORG   CIET2_EXP_FUNC_ENTRY                                             
CIET2_EXP_FUNC_CLASS_ADDR DS A         Address of name of class    @P3C         
*                                        containing exported symbol             
CIET2_EXP_FUNC_OFFSET     DS F         Offset of exported symbol   @P3C         
         ORG   CIET2_EXP_FUNC_OFFSET     from start of class (or                
CIET2_EXP_FUNC_ADDR       DS A           virtual address of the    @P3C         
*                                        exported symbol if                     
*                                        CIET2_EXP_FUNC_IS_ADDR                 
*                                        is true)                               
CIET2_EXP_FUNC_NAME_ADDR  DS A         Address of name of exported @P3C         
*                                        symbol                                 
CIET2_EXP_FUNC_ATTRIBUTES DS BL2                                                
CIET2_EXP_FUNC_IS_ADDR EQU X'40'       Set if CIET2_EXP_FUNC_OFFSET             
*                                        is an address rather than an           
*                                        offset                                 
CIET2_EXP_ADA_IS_ADDR  EQU X'20'       Set if CIET2_EXP_FUNC_ADA_OFFSET         
*                                        is an address and FUNC_XPLINK          
*                                        is set                                 
CIET2_EXP_FUNC_XPLINK  EQU X'10'       This function uses XPlink                
*                                        linkage conventions                    
                              DS H     *Reserved*                  @P3C         
CIET2_EXP_FUNC_ADA_CLASS_ADDR DS A     Address of name of class    @P3C         
*                                        containing associated data             
*                                        (if FUNC_XPLINK)                       
CIET2_EXP_FUNC_ADA_OFFSET DS F         Offset of environment data  @P3C         
*                                        from start of class       @P3C         
         ORG   CIET2_EXP_FUNC_ADA_OFFSET (or address of            @P3C         
CIET2_EXP_FUNC_ADA_ADDR   DS A           environment data if       @P3C         
*                                        CIET2_EXP_ADA_IS_ADDR is               
*                                        true) & EXP_FUNC_XPLINK                
CIET2_EXP_DESCR_REF_ADDR  DS A         Pointer to a CIET2_FUNC_REF @P3C         
*                                        array - defines locations              
*                                        that are to contain a pointer          
*                                        to the call-by-ptr descriptor          
*                                        built by LE                            
CIET2_EXP_DESCR_REF_COUNT DS F         Count of entries in the     @P3C         
*                                        array based on                         
*                                        CIET2_EXP_DESCR_REF_ADDR               
CIET2_EXP_XATTR_ADDR      DS A         Address of extended attributes           
*                                                                  @P3C         
*                                                                               
*****************************************************************               
*       DLL     ENTRIES                                                         
*****************************************************************               
* One entry for each DLL from which this program may import a symbol.           
*****************************************************************               
CIET2_DLL_ENTRY DSECT                                                           
         DS    CL24                                                             
         ORG   CIET2_DLL_ENTRY                                                  
CIET2_DLL_NAME_ADDR       DS A         Address of DLL name         @P3C         
CIET2_IMP_FUNC_ARRAY_ADDR DS A         Address of imported function             
*                                        array                     @P3C         
CIET2_IMP_FUNC_COUNT      DS F         Count of functions imported              
*                                        from this DLL             @P3C         
CIET2_IMP_VAR_ARRAY_ADDR  DS A         Address of imported variable             
*                                        array                     @P3C         
CIET2_IMP_VAR_COUNT       DS F         Count of variables imported              
*                                        from this DLL             @P3C         
CIET2_DLL_FLAGS           DS BL4                                                
CIET2_DLL_BYPTR_EXISTS    EQU X'80'    Set to 1 if at least one by-ptr          
*                                        reference exists from the              
*                                         application to this DLL               
*                                                                               
******************************************************************              
*        IMPORT  ENTRIES                                                        
******************************************************************              
* Two import arrays exist for each DLL from which this program                  
* may import a symbol.  One array is for functions, the other                   
* for variables.  Each imported symbol has one entry which can                  
* potentially support both XPLINK references and non-XP link                    
* references. The two arrays are based on CIET2_IMP_FUNC_ARRAY_ADDR             
* and CIET2_IMP_VAR_ARRAY_ADDR.                                                 
******************************************************************              
CIET2_IMP_ENTRY DSECT                                                           
         DS    CL28                                                             
         ORG   CIET2_IMP_ENTRY                                                  
*** Start non-XPlink section ***                                                
CIET2_IMP_CLASS_ADDR    DS A           Name of class containing    @P3C         
*                                        descriptor for imported                
*                                        symbol. (Not used for XPLINK)          
*                                        If all refs are XPLINK, this           
*                                        field will be 0                        
CIET2_IMP_OFF           DS F         Offset of symbol's descriptor @P3C         
*                                        from start of its containing           
*                                        class. (Not used for XPLINK)           
*                                        Non-XPlink references only.            
*** End non-XPlink section ***                                                  
CIET2_IMP_NAME_ADDR     DS A           Address of symbol's name in @P3C         
*                                        string area                            
*** Start XPlink section ***                                                    
CIET2_IMP_FUNC_DLL_ADDR DS A           Address of DLL entry for    @P3C         
*                                        imported function                      
*                                        (XPLINK functions only)                
CIET2_IMP_REF_ADDR      DS A           XPLINK only. Addresses to be@P3C         
*                                        fixed up at execution time.            
*                                        For imported data, entries are         
*                                        mapped by CIET2_VAR_REF.               
*                                        For imported functions,                
*                                        entries are mapped by                  
*                                        CIET2_FUNC_REF.                        
CIET2_IMP_REF_COUNT     DS H           XPLINK only. Count of addresses          
*                                        to be fixed up            @P3C         
CIET2_IMP_EXP_INDEX     DS H           Index for imported          @P3C         
*                                        variable/function entry in the         
*                                        export entry of the IEWBCIE            
*                                        belonging to the exporting             
*                                        module, or zero.                       
CIET2_IMP_XATTR_ADDR    DS A           Address of extended attributes.          
*                                                                  @P3C         
*** End XPlink section ***                                                      
*                                                                               
*******************************************************************             
*   1.  DATA (VARIABLE) REFERENCES                                              
*******************************************************************             
* - XPLINK only - references to imported data items                             
* Each entry represents an address to be fixed up by LE.                        
* There is an array for each imported data item which has one                   
* or more references with the XPLINK flag.  The array for                       
* the imported data item is based on the CIET2_IMP_REF_ADDR                     
* field in the import entry for that item                                       
*******************************************************************             
CIET2_VAR_REF DSECT                                              @P1C           
         DS    CL12                                                             
         ORG   CIET2_VAR_REF                                                    
CIET2_VAR_REF_ATTRIBUTES DS BL1                                                 
CIET2_VAR_REF_IS_ADDR    EQU X'80'     True if CIET2_VAR_REF_OFF is an          
*                                        address rather than offset             
CIET2_VAR_REF_LEN        DS FL1        Length of adcon                          
                         DS H          Reserved                    @P3C         
CIET2_VAR_REF_CLASS_ADDR DS A          Name of class containing this            
*                                        reference                 @P3C         
CIET2_VAR_REF_OFF        DS F          Offset from start of        @P3C         
*                                        containing class          @P3C         
         ORG   CIET2_VAR_REF_OFF         (or address if                         
CIET2_VAR_REF_ADDR       DS A         CIET2_VAR_REF_IS_ADDR is set)@P3C         
*                                                                               
******************************************************************              
*   2. CODE (FUNCTION) REFERENCES                                               
******************************************************************              
* - XPLINK only - the entries of the following array                            
* describe either the location                                                  
* of a descriptor built by the binder or the location of a                      
* reference to a descriptor which is to be built by LE                          
*                                                                               
* A.ADDRESSES REFERENCING DESCRIPTORS TO BE BUILT BY LE                         
* each entry represents a reference to a descriptor                             
* 1. exported call_by_pointer                                                   
* based on CIET2_EXP_DESCR_REF_ADDR.                                            
* 2. imported call_by_pointer                                                   
* based on CIET2_IMP_REF_ADDR                                                   
*                                                                               
* B.ADDRESSES OF DESCRIPTORS BUILT BY THE COMPILER                              
* each entry represents the location of a descriptor                            
* for unresolved (imported) by-name references                                  
* based on CIET2_IMP_REF_ADDR                                                   
*   the descriptors whose locations are in this list are to                     
*   be initialized using the information in the export entries in               
*   the exporting module's CIE,  after DLL load is complete.                    
******************************************************************              
CIET2_FUNC_REF DSECT                                                            
         DS    CL12                                                             
         ORG   CIET2_FUNC_REF                                                   
CIET2_FUNC_REF_ATTRIBUTES DS BL1                                                
CIET2_FUNC_REF_IS_ADDR    EQU X'80'    Set if CIET2_FUNC_REF_OFF is             
*                                        an address (not offset)                
CIET2_FUNC_REF_BYPTR      EQU X'40'    This is a 'by-pointer'                   
*                                        invocation (0=by name).                
CIET2_FUNC_REF_RESOLVED   EQU X'20'    This is a resolved reference             
*                                        (used only with 'by-pointer'           
*                                        references)                            
CIET2_FUNC_REF_LEN        DS FL1       Length of adcon                          
                          DS H         Reserved                    @P3C         
CIET2_FUNC_REF_CLASS_ADDR DS A     Ptr to name of class containing @P3C         
*                                    descriptor (by_name) or class              
*                                    containing reference (by-ptr)              
CIET2_FUNC_REF_OFF        DS F     Offset of descriptor (by-name)  @P3C         
         ORG   CIET2_FUNC_REF_OFF    or reference (by-pointer)                  
CIET2_FUNC_REF_ADDR       DS A       from start of containing class@P3C         
*                                    (or address if                             
*                                    CIET2_FUNC_REF_IS_ADDR set)                
*                                                                               
******************************************************************              
*        SYMBOL NAME STRINGS                                                    
******************************************************************              
* Symbol names (in string area at end of element)                               
* The symbols represent imported/exported variables/functions                   
* and DLL names                                                                 
******************************************************************              
CIET_NAME DSECT                                                                 
         DS    0C                                                               
         ORG   CIET_NAME                                                        
CIET_NAME_LEN   DS FL2                 Length of name                           
CIET_NAME_CHARS DS 0C                  Name                                     
*                                                                               
&CIET_BINDER_ID SETC  'IEW'                                        @P4A         
         MEND    ,                                                              
**/                                                                             
*%DCL CIETBASE CHAR EXTERNAL;                                                   
*%IF CIETBASE='' %THEN                                                          
*    %CIETBASE='BASED(CIET_PTR)';                                               
*%IF TRANSLATE(CIETBASE) ='BASED(CIET_PTR)' %THEN                               
*    %DO;                                                                       
*    dcl CIET_PTR PTR(31) Locates(CIET_HEADER);                                 
*    %END;                                                                      
*                                                                               
*%DCL CIET2BASE CHAR EXTERNAL;                                                  
*%IF CIET2BASE='' %THEN                                                         
*    %CIET2BASE='BASED(CIET2_PTR)';                                             
*%IF TRANSLATE(CIET2BASE) ='BASED(CIET2_PTR)' %THEN                             
*    %DO;                                                                       
*    dcl CIET2_PTR PTR(31) Locates(CIET2_HEADER);                               
*    %END;                                                                      
*                                                                               
*                                                                               
* declare                                                                       
*  1 CIET_HEADER   bdy(word) CIETBASE, /* CIET_HEADER is at offset              
*                                       0 from the beginning of its             
*                                        resident class (B_IMPEXP)   */         
*    3 CIET_EYE_CATCHER  char(8),  /* Eyecatcher 'IEWBCIET'          */         
*    3 CIET_VERSION      fixed(8), /* version of this mapping        */         
*    3 CIET_SOURCE       char(3),  /* Identifies product building IET -         
*                                     Binder will store 'IEW'        */         
*    3 CIET_FUNC_ADDR    ptr(31),  /* address of exported function              
*                                        pointer array               */         
*    3 CIET_FUNC_COUNT   fixed(31),/* count of entries in exported              
*                                        function pointer array      */         
*    3 CIET_VAR_ADDR     ptr(31),  /* address of exported variable              
*                                        pointer array               */         
*    3 CIET_VAR_COUNT    fixed(31),/* count of entries in exported              
*                                        variable pointer array      */         
*                                                                               
*    3 CIET_DLL_ADDR     ptr(31),  /* address of DLL pointer array */           
*    3 CIET_DLL_COUNT    fixed(31);/* count of entries in DLL                   
*                                        pointer array               */         
*                                                                               
*/* CIET_HEADER is immediately followed by the following three                  
*   arrays. However, they should be accessed using                              
*   pointers in the header (e.g. CIET_FUNC_ADDR) and not by assumptions         
*   regarding their position.                                        */         
*dcl  CIET_EXP_FUNC_ADDR(*) ptr(31) based(CIET_FUNC_ADDR);                      
*                                  /* addresses of exported function            
*                                     entries */                                
*dcl  CIET_EXP_VAR_ADDR(*) ptr(31) based(CIET_VAR_ADDR);                        
*                                  /* addresses of exported variables           
*                                     entries */                                
*dcl  CIET_DLL_ENT_ADDR(*) ptr(31) based(CIET_DLL_ADDR);                        
*                                  /* addresses of entries for DLLs             
*                                     from which this program may               
*                                     import a symbol */                        
*/* the preceeding arrays are followed by the following arrays    */            
*/* each DLL entry is associated with a set of these two arrays   */            
*dcl  CIET_IMP_FUNC_ADDR(*) ptr(31) based(CIET_IMP_FUNC_ARRAY_ADDR);            
*                                  /* addresses of imported function            
*                                     entries */                                
*dcl  CIET_IMP_VAR_ADDR(*) ptr(31) based(CIET_IMP_VAR_ARRAY_ADDR);              
*                                  /* addresses of imported variables           
*                                     entries */                                
*                                                                               
*/* exported function and variable entries have the following                   
*   common format. Note that the flag CIET_IS_FUNCTION indicates                
*   whether the symbol represents a function or a variable           */         
*dcl 1 CIET_EXP_ENTRY based,                                                    
*     3 CIET_EXP_CLASS char(16),      /* name of class                          
*                                     containing exported                       
*                                     symbol                         */         
*     3 CIET_EXP_OFFSET fixed(31),    /* offset of exported symbol              
*                                     from start of class (or virtual           
*                                     address of the exported symbol            
*                                     if CIET_IS_ADDRESS is true)    */         
*     3 CIET_EXP_NAME_ADDR ptr(31),   /* address of name of exported            
*                                        symbol                      */         
*     3 CIET_EXP_ATTRIBUTES bit(16),                                            
*       5 CIET_IS_FUNCTION bit(1),    /* set if function (not vbl)   */         
*       5 CIET_IS_ADDR     bit(1),   /* set if CIET_EXP_OFFSET is               
*                                        an address rather than an              
*                                        offset                      */         
*       5 *              bit(14),     /* reserved                    */         
*     3 *               fixed(15);    /* reserved */                            
*                                                                               
*/* one entry for each DLL from which this program may import a                 
*      symbol                                                        */         
*dcl 1 CIET_DLL_ENTRY based,                                                    
*      3 CIET_DLL_NAME_ADDR ptr(31),/* address of DLL name           */         
*      3 CIET_IMP_FUNC_ARRAY_ADDR ptr(31), /* addresses of imported             
*                                        function pointer array      */         
*      3 CIET_IMP_FUNC_COUNT fixed(31), /* count of functions                   
*                                         imported from this DLL     */         
*      3 CIET_IMP_VAR_ARRAY_ADDR ptr(31),  /* address of exported               
*                                        variable pointer array      */         
*      3 CIET_IMP_VAR_COUNT fixed(31);    /* count of variables                 
*                                         imported from this dll     */         
*                                                                               
*/* Two import arrays exist for each DLL from which this program                
*   may import a symbol.  One array is for functions, the other                 
*   for variables.        One array entry exists for each symbol                
*   which the program may import from this DLL                    */            
*dcl 1 CIET_IMP_ENTRY based,                                                    
*      3 CIET_IMP_CLASS  char(16), /* name of class                             
*                                     containing descriptor for                 
*                                     imported symbol                */         
*      3 CIET_IMP_OFF   fixed(31),/* offset of symbol's descriptor              
*                                     from start of it's containing             
*                                     class                          */         
*      3 CIET_IMP_NAME_ADDR ptr(31); /*address of symbol's name                 
*                                      in string area                */         
*                                                                               
*                                                                               
* /*******************************************************************/         
* /*                                                                 */         
* /*  CIET2 mapping.   A CIET version 2 table will be generated if   */         
* /*  the module has any contents which require XPLINK support.      */         
* /*                                                         all @L1A*/         
* /*******************************************************************/         
* declare                                                                       
*  1 CIET2_HEADER  bdy(word) CIET2BASE, /* CIET2_HEADER is at offset            
*                                     0 from the beginning of its               
*                                     resident class (B_IMPEXP)      */         
*    3 CIET2_EYE_CATCHER char(8),  /* Eyecatcher 'IEWBCIET'          */         
*    3 CIET2_VERSION     fixed(8), /* version of this mapping        */         
*    3 CIET2_SOURCE      char(3),  /* Identifies product building IET -         
*                                     Binder will store 'IEW'        */         
*    3 CIET2_FUNC_ADDR   ptr(31),  /* address of exported function              
*                                         array                      */         
*    3 CIET2_FUNC_COUNT  fixed(31),/* count of entries in exported              
*                                        function array              */         
*    3 CIET2_VAR_ADDR    ptr(31),  /* address of exported variable              
*                                        array                       */         
*    3 CIET2_VAR_COUNT   fixed(31),/* count of entries in exported              
*                                        variable array              */         
*                                                                               
*    3 CIET2_DLL_ADDR    ptr(31),  /* address of DLL array           */         
*    3 CIET2_DLL_COUNT   fixed(31);/* count of entries in DLL                   
*                                        array                       */         
*                                                                               
* /******************************************************************/          
* /*       EXPORT  ENTRIES                                          */          
* /******************************************************************/          
* /* in version 2, exported functions (code) and exported variable              
*    (data) entries have different formats                           */         
*                                                                               
* /******************************************************************/          
* /*       Exported Data  (variables)                               */          
* /******************************************************************/          
* /* for rent C/C++ code it is expected that the data will be                   
*    in WSA and EXP_VAR_OFFSET will contain the offset.  For                    
*    nonrent XPLINK and perhaps others, such as assembler, the data             
*    will be in an initial load class and the field will contain                
*    an actual address                                               */         
* dcl 1 CIET2_EXP_VAR_ENTRY(*) based(CIET2_VAR_ADDR),                           
*      3 CIET2_EXP_VAR_CLASS_ADDR ptr, /* address of name of class              
*                                     containing exported                       
*                                     symbol                         */         
*      3 CIET2_EXP_VAR_OFFSET fixed(31), /* offset of exported symbol*/         
*        5 CIET2_EXP_VAR_ADDR ptr, /* from start of class (or virtual           
*                                     address of the exported symbol            
*                                     if CIET2_EXP_VAR_IS_ADDRESS               
*                                     is true                        */         
*      3 CIET2_EXP_VAR_NAME_ADDR ptr(31),   /* address of name of               
*                                     exported symbol                */         
*      3 CIET2_EXP_VAR_ATTRIBUTES  bit(16),                                     
*        5 *                   bit(1),  /* reserved                  */         
*        5 CIET2_EXP_VAR_IS_ADDR  bit(1), /*set if CIET2_EXP_VAR_OFFSET         
*                                     is an address rather than an              
*                                     offset                         */         
*        5 *                   bit(6),  /* reserved                  */         
*      3 *                     fixed(15);  /* reserved */                       
*                                                                               
* /******************************************************************/          
* /*       Exported Code (functions)                                */          
* /******************************************************************/          
* /* notes:                                                                     
*    1. function addresses from known HLL compilers will be in the              
*    initial load class but that is not an architectural restriction.           
*    HLASM for example would allow functions in a deferred load                 
*    class                                                                      
*    2. XPlink entries contain the information needed to build                  
*    a call-by-ptr descriptor.                                                  
*    3. XPlink entries also contain the address of an array                     
*    whose entries identify the locations in the module which                   
*    are to be modified to point to the call-by-ptr descriptor                  
*    once it has been built.                                         */         
* dcl 1 CIET2_EXP_FUNC_ENTRY(*) based(CIET2_FUNC_ADDR),                         
*      3 CIET2_EXP_FUNC_CLASS_ADDR ptr, /* address of name of class             
*                                     containing exported                       
*                                     symbol                         */         
*      3 CIET2_EXP_FUNC_OFFSET fixed(31),/* offset of exported symbol*/         
*        5 CIET2_EXP_FUNC_ADDR ptr, /*from start of class (or virtual           
*                                     address of the exported symbol            
*                                     if CIET2_EXP_FUNC_IS_ADDR                 
*                                     is true                        */         
*      3 CIET2_EXP_FUNC_NAME_ADDR ptr(31), /* address of name of                
*                                     exported symbol                */         
*      3 CIET2_EXP_FUNC_ATTRIBUTES bit(16),                                     
*        5 *                  bit(1),  /* reserved                   */         
*        5 CIET2_EXP_FUNC_IS_ADDR bit(1), /* set if                             
*                                      CIET2_EXP_FUNC_OFFSET is an              
*                                      address rather than an offset */         
*        5 CIET2_EXP_ADA_IS_ADDR bit(1),/*set if                                
*                                      CIET2_EXP_FUNC_ADA_OFFSET                
*                                      is an address and FUNC_XPLINK            
*                                      is set                        */         
*        5 CIET2_EXP_FUNC_XPLINK   bit(1), /* this function uses                
*                                      XPlink linkage conventions    */         
*        5 *                   bit(4), /* reserved                   */         
*      3 *               fixed(15),    /* reserved */                           
*      3 CIET2_EXP_FUNC_ADA_CLASS_ADDR ptr,/* address of name of class          
*                                     containing associated data                
*                                     (if FUNC_XPLINK)               */         
*      3 CIET2_EXP_FUNC_ADA_OFFSET fixed(31),/* offset of associated */         
*        5 CIET2_EXP_FUNC_ADA_ADDR ptr,/*data from start of class (or           
*                                     address of associated data if             
*                                     if CIET2_EXP_ADA_IS_ADDR is true          
*                                     & EXP_FUNC_XPLINK              */         
*      3 CIET2_EXP_DESCR_REF_ADDR ptr(31),/* pointer to a                       
*                                     CIET2_FUNC_REF                            
*                                     array - defines locations                 
*                                     that are to contain the                   
*                                     a pointer to the call-by-ptr              
*                                     descriptor built by LE         */         
*      3 CIET2_EXP_DESCR_REF_COUNT fixed(31),  /* count of entries in           
*                                     the array based on                        
*                                     CIET2_EXP_DESCR_REF_ADDR       */         
*      3 CIET2_EXP_XATTR_ADDR     ptr(31);/* address of extended                
*                                     attributes                 @P0A*/         
*                                                                               
* /******************************************************************/          
* /*       DLL     ENTRIES                                          */          
* /******************************************************************/          
*/* one entry for each DLL from which this program may import a                 
*      symbol                                                        */         
*dcl 1 CIET2_DLL_ENTRY(*) based(CIET2_DLL_ADDR),                                
*      3 CIET2_DLL_NAME_ADDR ptr(31),/* address of DLL name          */         
*      3 CIET2_IMP_FUNC_ARRAY_ADDR ptr(31), /* address of imported              
*                                        function array              */         
*      3 CIET2_IMP_FUNC_COUNT fixed(31), /* count of functions                  
*                                         imported from this DLL     */         
*      3 CIET2_IMP_VAR_ARRAY_ADDR ptr(31), /* address of imported               
*                                        variable array              */         
*      3 CIET2_IMP_VAR_COUNT fixed(31),   /* count of variables                 
*                                         imported from this dll     */         
*      3 CIET2_DLL_FLAGS bit(32),                                               
*        5 CIET2_DLL_BYPTR_EXISTS bit(1); /* set to 1 if at least               
*                                         one byptr reference exists            
*                                         from the application to               
*                                         this DLL                   */         
*                                                                               
*/*******************************************************************/          
*/*        IMPORT  ENTRIES                                          */          
*/*******************************************************************/          
*/* Two import arrays exist for each DLL from which this program                
*   may import a symbol.  One array is for functions, the other                 
*   for variables.  Each imported symbol has one entry which                    
*   can potentially support both                                                
*   XPLINK references and non_XPlink references.                                
*   The two arrays are based on CIET2_IMP_FUNC_ARRAY_ADDR and                   
*   CIET2_IMP_VAR_ARRAY_ADDR.                                       */          
*                                                                               
*dcl 1 CIET2_IMP_ENTRY(*) based,                                                
*      /* start non XPlink section                                   */         
*      3 CIET2_IMP_CLASS_ADDR ptr(31), /* name of class                         
*                                    containing descriptor for                  
*                                    imported symbol. not used                  
*                                    for XPLINK                                 
*                                    If all refs are XPLINK, this               
*                                    field will be 0                 */         
*      3 CIET2_IMP_OFF fixed(31),  /* offset of symbol's descriptor             
*                                    from start of its containing               
*                                    class. Not used for XPLINK.                
*                                    non-XPlink references only.     */         
*      /* end non XPlink section                                     */         
*      3 CIET2_IMP_NAME_ADDR ptr(31),/*address of symbol's name                 
*                                    in string area                  */         
*      /* start XPlink section                                       */         
*      3 CIET2_IMP_FUNC_DLL_ADDR ptr(31), /* address of DLL entry for           
*                                    for imported function                      
*                                    (XPLINK functions only)         */         
*      3 CIET2_IMP_REF_ADDR ptr(31),  /* XPLINK only. Addresses to              
*                                    be fixed up at execution time              
*                                    For imported data entries                  
*                                    are mapped by CIET2_VAR_REF.               
*                                    For imported functions, entries,           
*                                    are mapped by CIET2_FUNC_REF    */         
*      3 CIET2_IMP_REF_COUNT fixed(15), /* XPLINK only. count of                
*                                    addresses to be fixed up        */         
*      3 CIET2_IMP_EXP_INDEX  fixed(15), /* index for imported                  
*                                    variable/function entry in the             
*                                    export entry of the IEWBCIE                
*                                    belonging to the exporting module          
*                                    or zero.                        */         
*      3 CIET2_IMP_XATTR_ADDR     ptr(31);/* address of extended                
*                                     attributes                 @P0A*/         
*      /* end XPlink section                                         */         
*                                                                               
*/********************************************************************/         
*/*   1.  DATA (VARIABLE) REFERENCES                                 */         
*/********************************************************************/         
*                                                                               
*/* - XPLINK only - references to imported data items                           
*   Each entry represents an address to be fixed up by LE.                      
*   There is an array for each imported data item which has one                 
*   or more references with the XPLINK flag.  The array for                     
*   the imported data item is based on the CIET2_IMP_REF_ADDR                   
*   field in the import entry for that item                          */         
*dcl 1 CIET2_VAR_REF(*)  based,                                /*@P1C*/         
*      3 CIET2_VAR_REF_ATTRIBUTES bit(8),                                       
*        5 CIET2_VAR_REF_IS_ADDR bit(1), /* true if CIET2_VAR_REF_OFF           
*                                      is an address rather than                
*                                      offset                        */         
*      3 CIET2_VAR_REF_LEN fixed(8),    /* length of adcon           */         
*      3 * FIXED(16),                   /* reserved                  */         
*      3 CIET2_VAR_REF_CLASS_ADDR ptr(31),/* name of class containing           
*                                      this reference                */         
*      3 CIET2_VAR_REF_OFF fixed(31),   /* offset from start of      */         
*        5 CIET2_VAR_REF_ADDR ptr;  /* containing class              */         
*                                                                               
*/*******************************************************************/          
*/*   2. CODE (FUNCTION) REFERENCES                                 */          
*/*******************************************************************/          
*                                                                               
*/* - XPLINK only - the entries of the following array               */         
*/* describe either the location                                     */         
*/* of a descriptor built by the binder or the location of a         */         
*/* reference to a descriptor which is to be built by LE             */         
*/*                                                                  */         
*/* A.ADDRESSES REFERENCING DESCRIPTORS TO BE BUILT BY LE            */         
*/* each entry represents a reference to a descriptor                */         
*/* 1. exported call_by_pointer                                      */         
*/* based on CIET2_EXP_DESCR_REF_ADDR.                               */         
*/* 2. imported call_by_pointer                                      */         
*/* based on CIET2_IMP_REF_ADDR                                      */         
*/*                                                                  */         
*/* B.ADDRESSES OF DESCRIPTORS BUILT BY THE COMPILER                 */         
*/* each entry represents the location of a descriptor               */         
*/* for unresolved (imported) by-name references                     */         
*/* based on CIET2_IMP_REF_ADDR                                      */         
*/*   the descriptors whose locations are in this list are to        */         
*/*   be initialized using the information in the export entries in  */         
*/*   the exporting module's CIE,  after DLL load is complete.       */         
*                                                                               
*dcl 1 CIET2_FUNC_REF(*) based,                                                 
*      3 CIET2_FUNC_REF_ATTRIBUTES bit(8),                                      
*        5 CIET2_FUNC_REF_IS_ADDR BIT(1),/* '1'B if CIET2_FUNC_REF_OFF          
*                                    is an address(not offset)       */         
*        5  CIET2_FUNC_REF_BYPTR bit(1), /* this is a 'by-pointer'              
*                                    invocation (0=by name).         */         
*        5  CIET2_FUNC_REF_RESOLVED bit(1), /* this is a resolved               
*                                    reference (used only with                  
*                                    'by-pointer' references         */         
*      3 CIET2_FUNC_REF_LEN fixed(8),   /* length of adcon           */         
*      3  *                fixed(16),   /* reserved                  */         
*      3 CIET2_FUNC_REF_CLASS_ADDR ptr, /* ptr to name of class                 
*                                       containing descriptor (by_name)         
*                                       or class containing reference           
*                                       (by-pointer)                 */         
*      3 CIET2_FUNC_REF_OFF fixed(31),  /* offset of descriptor      */         
*        5 CIET2_FUNC_REF_ADDR ptr;  /* (by-name) or reference                  
*                                       to descriptor (by-pointer)              
*                                       from start of                           
*                                       containing class             */         
*                                                                               
*                                                                               
*/*******************************************************************/          
*/*        SYMBOL NAME STRINGS                                      */          
*/*******************************************************************/          
*/* Symbol names (in string area at end of element) */                          
*/* The symbols represent imported/exported variables/functions                 
*   and DLL names                                                    */         
*dcl 1 CIET_NAME based,                                                         
*      3 CIET_NAME_LEN fixed(15), /* length of name      */                     
*      3 CIET_NAME_CHARS char(*);  /* name               */                     
*                                                                               
*/*  Header constants                                                */         
*declare CIET_EYE_CATCH_ID CHAR(8) CONSTANT('IEWBCIET');                        
*declare CIET_VERSION1 FIXED(8) CONSTANT(1);                   /*@L1C*/         
*declare CIET_VERSION2 FIXED(8) CONSTANT(2);                   /*    */         
*declare CIET_BINDER_ID   CHAR(3)  CONSTANT('IEW');                             
*                                                                               
*                                                                               
*                                                                               
*/* END OF IEWBCIE                                                   */         
