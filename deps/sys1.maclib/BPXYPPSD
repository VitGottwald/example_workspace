* %DCL BPXYPPSD_INCLUDED CHAR EXT;                                      00010000
* %DEACTIVATE BPXYPPSD_INCLUDED;                                        00020000
* %IF BPXYPPSD_INCLUDED = '' %THEN                                      00030000
* %DO;                                                                  00040000
*% /*                                                                   00050000
         MACRO                                                          00060000
         BPXYPPSD &DSECT=YES,&LIST=YES,&PPSD=YES                        00070000
         GBLC  &BPXYPPSD_INCLUDED                                       00080000
         GBLC  &ZCBPRINT                                                00090000
         GBLC  &SYSAM64       Variable set by SYSSTATE AMODE64=YES @DDA 00100000
         AIF   ('&BPXYPPSD_INCLUDED' EQ 'YES').P_EXIT          @D1A     00110000
&BPXYPPSD_INCLUDED SETC 'YES'                                           00120000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                       6@D1M     00130000
         AIF   ('&LIST' EQ 'YES').A411                                  00140000
.P1      ANOP                                                           00150000
         PUSH  PRINT     BPXYPPSD: Signal Data Area                     00160000
         PRINT OFF                                                      00170000
         AGO   .A411                                                    00180000
**/ BPXYPPSD_1:;                                                        00190000
*/****START OF SPECIFICATIONS****************************************** 00200000
*                                                                       00210000
*    $MAC (BPXYPPSD) COMP(SCPX1) PROD(BPX):                             00220000
*                                                                       00230000
*01* MACRO NAME: BPXYPPSD                                               00240000
*                                                                       00250000
*01* DSECT NAME: BPXYPPSD                                               00260000
*                                                                       00270000
*01* DESCRIPTIVE NAME: Signal Data Area                                 00280000
*                                                                       00290000
*02*   ACRONYM: PPSD                                                    00300000
**/                                                                     00310000
*/*01* PROPRIETARY STATEMENT=                                        */ 00320000
*/***PROPRIETARY_STATEMENT********************************************/ 00330000
*/*                                                                  */ 00340000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00350000
*/* 5694-A01 COPYRIGHT IBM CORP. 1993, 2008                          */ 00351004
*/*                                                                  */ 00380000
*/* STATUS= HBB7760                                                  */ 00390001
*/*                                                                  */ 00400000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00410000
*/*                                                                     00420000
*01* EXTERNAL CLASSIFICATION:  GUPI                                     00430000
*01* END OF EXTERNAL CLASSIFICATION:                                    00440000
*                                                                       00450000
*01* FUNCTION:                                                          00460000
*                                                                       00470000
*    This file contains the mapping of the Signal Delivery              00480000
*    data.  One of these data areas will be created whenever a          00490000
*    task is dubbed.                                                    00500000
*                                                                       00510000
*01* METHOD OF ACCESS:                                                  00520000
*                                                                       00530000
*02*   PL/X:                                                            00540000
*                                                                       00550000
*        %INCLUDE SYSLIB(BPXYPPSD)                                      00560000
*                                                                       00570000
*        By default, the PPSD is based on PpstPpsd. If                  00580000
*        other basing is desired, use %PPSDBASE='BASED(xxxxxx)'.        00590000
*                                                                       00600000
*02*   ASM:                                                             00610000
*        With DSECT=NO (default), storage is allocated in line          00620000
*        and addressability is provided thru that DSECT or CSECT.       00630000
*        With DSECT=YES, a DSECT is produced and "USING PPSD,reg"       00640000
*        is rquired for addressability.  Here "reg" contains the        00650000
*        address of PPSD#LENGTH bytes of storage.                       00660000
*                                                                       00670000
*01* SIZE: PPSD#LENGTH                                                  00680000
*                                                                       00690000
*01* POINTED TO BY:                                                     00700000
*                   PpstPpsd                                            00710000
*                                                                       00720000
*01* CREATED BY: BPXPRIN1                                               00730000
*                                                                       00740000
*01* DELETED BY: Task termination cleanup                               00750000
*                                                                       00760000
*01* STORAGE ATTRIBUTES:                                                00770000
*02*   SUBPOOL: 230                                                     00780000
*02*   KEY: Same as callers key who was first dubbed in the process     00790000
*02*   RESIDENCY: private                                               00800000
*                                                                       00810000
*01* FREQUENCY: 1 per task                                              00820000
*                                                                       00830000
*01* SERIALIZATION: This data area can only be used while signals       00840000
*                   are blocked.                                        00850000
*                                                                       00860000
*01* DEPENDENCIES: None                                                 00870000
*                                                                       00880000
*01* NOTES: None                                                        00890000
*                                                                       00900000
*01* COMPONENT:  OpenMVS (SCPX1)                                        00910000
*                                                                       00920000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00930000
*                                                                       00940000
*01* EYE-CATCHER: PPSD                                                  00950000
*02*   OFFSET:  0                                                       00960000
*02*   LENGTH:  4                                                       00970000
*                                                                       00980000
*                                                                       00990000
*01* CHANGE-ACTIVITY:                                                   01000000
*                                                                       01010000
* $L0=POSIXXNS HOM1110 921201 PDJJ: OpenMVS Initial Release             01020000
* $P1=PL70376  HOM1110 921201 PDJJ: Remove TITLE                        01030000
* $D2=DL70019  HOM1110 921201 PDJM: Assembler macro fixup               01040000
* $D3=DL70014  HOM1110 921101 PDJJ: Threads support                     01050000
* $P2=PL70597  HOM1110 930104 PDJM: Use "OpenMVS"                       01060000
* $D4=DL70038  HOM1110 930316 PDJJ: Quiesce threads                     01070000
* $D5=DL7A012  HOM1110 930426 PDJH: Support new parameter, user_data,   01080000
*                                   on SIGACTION                        01090000
* $D6=DPFA065  HOM1130 940114 PDPE: DCR A065.04 BSD Signals             01100000
* $P3=PPF0008  HOM1130 940425 PDPE: Add sending/receiving thread id     01110000
* $P4=PPF0054  HOM1130 940613 PDPE: Add sending pid/real uid            01120000
* $P5=PPF0072  HOM1130 940719 PDPE: Add siginfo information             01130000
* $D7=DPFA051  HOM1130 940235 PDJD: DCR A051.15 XPG4 sigsuspend change  01140000
* $D8=DSPA166  HOM1150 960319 PDJQ: DCR A166.04 MODIFY cancel support   01150000
* $P6=PQC2019  HBB6603 960803 PDJJ: Add TRM exit status (OW21905)       01160000
* $D9=DSYA194  HBB6604 960819 PDJJ: DCR A194.02 Unauth async I/O exits  01170000
* $DA=DSYA211  HBB6604 970203 PDJJ: DCR A211.00 Syscall performance     01180000
* $P7=PWA0291  JBB6607 980526 PDZJ: Merge up OW34166 - queued signals   01190000
* $DB=DWYA254  HBB6609 981204 PDJJ: DCR A254.00 XP LINK support         01200000
* $DC=DXDA367  HBB7703 990610 PDJI: 64-bit register support A367.02     01210000
* $P8=PYM0078  HBB7706 010618 PDJC: Always have thid in MSG BPXP010I    01220000
* $DD=DYNA519  HBB7708 010101 PDJC: 64-bit support - signals A519.05    01230000
* $DE=DYVA551  HBB7707 010629 PDJI: Enhanced pthread quiesce A551.00    01240000
* $P9=PYN0220  HBB7708 020301 PDFO: Bilingual fixup                     01250000
* $DF=DYNA613  HBB7709 021108 PDSZ: Dynamic CBs                         01260000
* $DG=DJKA613  HBB7709 020629 PDJC: Add JOBNAME to task terminated by   01270000
*                                   signal message                      01280000
* $DH=DYN0612  HBB7709 020910 PDJJ: Add superkill option to bpx1kil     01290000
* $PA=PJK1177  HBB7709 031107 PDJT: 64-Bit Asyncio Exits                01300000
* $T1=TJK0998  HBB7709 031119 PDJT: Separate PpsdAiocb64 Bit            01310000
* $DI=DCRB200  HBB7750 070330 PDDE: TimeStamp for last register stored  01320000
* $PB=ME11419  HBB7750 071024 PDHA: Asset protection errors             01320104
* $DJ=DCRB395  HBB7760 070915 PDI6: User Syscall Trace                  01321001
*                                                                       01330000
****END OF SPECIFICATIONS*********************************************/ 01340000
*% /*                                                                   01350000
.A411    ANOP ,                                                         01360000
** BPXYPPSD: Signal Data Area                                           01370000
**  Used By: User written signal interrupt routines                     01380000
         AIF   ('&PPSD'  EQ  'NO').L0002                                01390000
         AIF   ('&DSECT' EQ 'YES').L0003                                01400000
PPSD                 DS    0D                                           01410000
         AGO   .L0004                                                   01420000
.L0003   ANOP                                                           01430000
PPSD                 DSECT ,                                            01440000
.L0004   ANOP                                                           01450000
PPSDID               DC    C'PPSD'  Eye catcher                         01460000
PPSD#ID              EQU   C'PPSD'    Control Block Acronym             01470000
                     SPACE ,                                            01480000
PPSDSP               DS    FL1      Subpool number of this PPSD         01490000
PPSD#SP              EQU   230        Subpool for the PPSD              01500000
                     SPACE ,                                            01510000
PPSDLEN              DC    AL3(PPSD#LENGTH)   Length this structure     01520000
*                                                                       01530000
*    *****************************************************************  01540000
*     PpsdSIRParms is used to setup up a parameter list to the          01550000
*     Signal Interface Routine (SIR).  When the SIR is invoked, the     01560000
*     address of PpsdSIRParms field is set in Register 1.  The          01570000
*     PpsdAddrPpsd contains the address of the Ppsd.                    01580000
*    *****************************************************************  01590000
*                                                                       01600000
PPSDSIRPARMS         DS    0A       SIR Parameters                      01610000
PPSDADDRPPSD         DC    A(PPSD)  Pointer to the top of the Ppsd      01620000
PPSDSIRPARMEND       EQU   X'80'    End of Parameters flag set on       01630000
                     SPACE ,                                            01640000
PPSDTRMEXITSTATUS    DS    F        4 Byte status passed to PRTRM @P6C  01650000
PPSDSIGNUM           DS    F        Signal number                       01660000
PPSDFL               DS    XL2      X'7FFF' reserved                    01670000
                     ORG   PPSDFL                                       01680000
PPSDFLAGS2A          DS    0B                                           01690000
PPSDQUIESCEFREEZE    EQU   X'80'      Interrupt due to freeze           01700000
PPSDSIRCOMPLETE      EQU   X'40'    Sir done with async I/O exits @D9A  01710000
PPSDPROCDFT          EQU   X'20'    Process default                     01720000
PPSDSIGQUEUE         EQU   X'10'    NSSGQ queued signal                 01730000
PPSDREDRIVE          EQU   X'08'    SPB will Resend signal later  @DBA  01740000
PPSDJUMPBACK         EQU   X'04'    SPB return to point of interrupt    01750000
PPSDMASKONLY         EQU   X'02'    SPB restore mask only         @DBA  01760000
PPSDSIGTHSTOP        EQU   X'01'    Interrupt due to thread-stop        01770000
*                                   signal                        @DEA  01780000
                     ORG   PPSDFL+0001                                  01790000
PPSDFLAGS2B          DS    B                                            01800000
PPSDQUIESCEANDGET    EQU   X'80'    Interrupt due to                    01810000
*                                   pthread_quiesce_and_get_np    @DEA  01820000
PPSDF2_64            EQU   X'40'    Use PSWxxx64 fields           @DDA  01830000
PPSDACTION           DS    B        Action for this signal              01840000
*                                      catch                            01850000
*                                      SIR determines default action    01860000
                     SPACE ,                                            01870000
PPSDFLAGS            DS    B        X'00' reserved                      01880000
PPSDASYNC            EQU   X'80'    Signal delivered Asynchronously     01890000
PPSDDUMP             EQU   X'40'    Dump for terminating signals        01900000
PPSDPTHREADKILL      EQU   X'20'    Signal sent via BPX1PTK             01910000
PPSDTHISTHREADGEN    EQU   X'10'    Sending=Receiving thread            01920000
PPSDSIGNAL           EQU   X'08'    Interrupt due to signal             01930000
PPSDCANCEL           EQU   X'04'    Interrupt due to cancel             01940000
PPSDQUIESCE          EQU   X'02'    Interrupt due to quiesce            01950000
PPSDIPT              EQU   X'01'    If ON then this is the IPT          01960000
                     SPACE ,                                            01970000
         AIF  ('&SYSAM64' EQ 'YES').AM64A                          @DDA 01980000
PPSDSAHANDLER        DS    A        Addr of catcher function            01990000
         AGO   .AM64B                                              @DDA 02000000
.AM64A   ANOP  ,                                                   @DDA 02010000
PPSDRES1             DS    F        Reserved in 64 bit mode        @DDC 02020000
.AM64B   ANOP  ,                                                   @DDA 02030000
PPSDSAMASK           DS    XL8      Signal mask set by BPX1SIA for      02040000
*                                   this signal                         02050000
PPSDSAFLAGS          DS    XL4      X'00FFFFFF' reserved          @D6C  02060000
PPSDNOCLDSTOP        EQU   X'80'      Do not generate SIGCHLD on stops  02070000
PPSDOLDSTYLE         EQU   X'40'      Signal defined by signal() funct. 02080000
PPSDONSTACK          EQU   X'20'      Deliver on alternate stack  @D6A  02090000
PPSDRESETHAND        EQU   X'10'      Reset action on delivery    @D6A  02100000
PPSDRESTART          EQU   X'08'      Restart interruptable funcs @D6A  02110000
PPSDSIGINF           EQU   X'04'      Pass sig info to catcher    @D6A  02120000
PPSDNOCLDWAIT        EQU   X'02'      Don't create zombie on exit @D6A  02130000
PPSDNODEFER          EQU   X'01'      Don't block sig on delivery @D6A  02140000
                     SPACE ,                                            02150000
PPSDCURRENTMASK      DS    XL8      This is the signal mask to be set   02160000
*                                   when the signal catcher returns.    02170000
*                                   Signal mask at time of interrupt    02180000
*                                   except for sigsuspend case. If      02190000
*                                   signal during sigsuspend, then      02200000
*                                   this mask is the signal mask prior  02210000
*                                   to call to sigsuspend.              02220000
         AIF  ('&SYSAM64' EQ 'YES').AM64C                          @DDA 02230000
PPSDSIR              DS    A        Addr Signal interrupt routine       02240000
PPSDUSERDATA         DS    A        User data speicified on BPX1MSS     02250000
         AGO   .AM64D                                              @DDA 02260000
.AM64C   ANOP  ,                                                   @DDA 02270000
PPSDRES2             DS    F        Reserved in 64 bit mode        @DDC 02280000
PPSDRES3             DS    F        Reserved in 64 bit mode        @DDC 02290000
.AM64D   ANOP  ,                                                   @DDA 02300000
PPSDGENREGS          DS    CL64     Users general regs at interrupt     02310000
         AIF  ('&SYSAM64' EQ 'YES').AM64E                          @DDA 02320000
PPSDPSW              DS    XL8      Users PSW at interrupt              02330000
         AGO   .AM64F                                              @DDA 02340000
.AM64E   ANOP  ,                                                   @DDA 02350000
PPSDRES4             DS    XL8      Reserved in 64 bit mode        @DDC 02360000
.AM64F   ANOP  ,                                                   @DDA 02370000
PPSDARREGS           DS    16F      Users AR regs at interrupt          02380000
PPSDKILDATA          DS    FL2      User specified data on BPX1KIL      02390000
PPSDKILOPTS          DS    XL2      X'7FFF' reserved                    02400000
*                                   User specified options on BPX1KIL   02410000
PPSDPTBYPASS         EQU   X'80'      Ptrace Bypass option in effect    02420000
PPSDKERNSICODE       EQU   X'40'      PpsdKilData=Kern set SiCode  @D6A 02430000
PPSDAPPLSICODE       EQU   X'20'      PpsdKilData=Appl set SiCode  @D6A 02440000
PPSDCONSCANCEL       EQU   X'10'      Console MODIFY cancel qualifier   02450000
*                                     in PpdsKilData               @D8A 02460000
PPSDSUPERKILL        EQU   X'08'      Superkill option on BPX1KIL  @DHA 02470000
PPSDTRACEOVERRIDE    EQU   X'04'      SYSCALL Trace Override Option@DJA 02471002
PPSDTRACEACTION      EQU   X'02'      SYSCALL Trace Action Setting @DJA 02472002
         AIF  ('&SYSAM64' EQ 'YES').AM64G                          @DDA 02480000
PPSDQUIESCEDATA      DS    F        Quiesce_Data specified on BPX1QUT   02490000
         AGO   .AM64H                                              @DDA 02500000
.AM64G   ANOP  ,                                                   @DDA 02510000
PPSDRES5             DS    F        Reserved in 64 bit mode        @DDC 02520000
.AM64H   ANOP  ,                                                   @DDA 02530000
PPSDLASTPTSIG        DS    F        Last Ptraced Signal                 02540000
         AIF  ('&SYSAM64' EQ 'YES').AM64I                          @DDA 02550000
PPSDSIGACTIONDATA    DS    F        User_Data specified on BPX1SIA      02560000
PPSDPTXLWAPTR        DS    A        Threads workarea address specified  02570000
*                                   on BPX1PTC (pthread_create).  This  02580000
*                                   address is zero if the thread was   02590000
*                                   not pt_created.                     02600000
         AGO   .AM64J                                              @DDA 02610000
.AM64I   ANOP  ,                                                   @DDA 02620000
PPSDRES6             DS    2F       Reserved in 64 bit mode        @DDC 02630000
.AM64J   ANOP  ,                                                   @DDA 02640000
PPSDSENDINGTHREAD    DS    CL8      Sending thread id              @P3A 02650000
PPSDTARGETTHREAD     DS    CL8      Target thread id               @P3A 02660000
PPSDSENDINGPID       DS    F        Sending process id             @P4A 02670000
PPSDSENDINGUID       DS    F        Sending real uid               @P4A 02680000
         AIF  ('&SYSAM64' EQ 'YES').AM64K                          @DDA 02690000
PPSDSIADDR           DS    A        Address of faulting instruction     02700000
*                                   for SIGILL, SIGFPE, SIGSEGV    @P5A 02710000
         AGO   .AM64L                                              @DDA 02720000
.AM64K   ANOP  ,                                                   @DDA 02730000
PPSDRES7             DS    F        Reserved in 64 bit mode        @DDC 02740000
.AM64L   ANOP  ,                                                   @DDA 02750000
PPSDSISTATUS         DS    F        Exit status or signal          @P5A 02760000
         AIF  ('&SYSAM64' EQ 'YES').AM64M                          @DDA 02770000
PPSDSIBAND           DS    F        Band event                     @P5A 02780000
         AGO   .AM64N                                              @DDA 02790000
.AM64M   ANOP  ,                                                   @DDA 02800000
PPSDRES8             DS    F        Reserved in 64 bit mode        @DDC 02810000
.AM64N   ANOP  ,                                                   @DDA 02820000
PPSDERRNO            DS    F        Error return code              @P5A 02830000
PPSDCATCHERMASK      DS    XL8      Signal Mask to be set before signal 02840000
*                                  catcher is called. If signal during  02850000
*                                  sigsuspend then this field is same   02860000
*                                  as mask specified on sigsuspend. If  02870000
*                                  not sigsuspend, then PpsdCatcherMask 02880000
*                                  and PpsdCurrentMask are equal.  @D7A 02890000
PPSDRES10            DS    25F      Reserved                       @DDA 02900000
         AIF  ('&SYSAM64' EQ 'YES').AM64O                          @DDA 02910000
PPSDSQV              DS    F        Signal si_value                @P7A 02920000
         AGO   .AM64P                                              @DDA 02930000
.AM64O   ANOP  ,                                                   @DDA 02940000
PPSDRES9             DS    F        Reserved in 64 bit mode        @DDC 02950000
.AM64P   ANOP  ,                                                   @DDA 02960000
PPSDREDRIVETIME      DS    F        Time to delay signal 1000 per mic   02970000
PPSDG64H             DS    16F      Users G64H at interrupt        @DCA 02980000
PPSDRRTRMMSGTHID     DS    CL8      Sending thread id for MSG           02990000
*                                  BPXP010I                        @P8A 03000000
PPSDSENDINGJOBNAME   DS    CL8      Jobname of thread sending signal    03010000
*                                                                  @DGA 03020000
PPSDREGUPDATETOD     DS    2F       Time last register was stored  @DIA 03030000
                     DS    2F       Reserved                       @DGC 03040000
         AIF  ('&SYSAM64' EQ 'YES').AM64Q                          @DDA 03050000
PPSDRES11            DS    22F      Reserved in 31 bit mode        @DDA 03060000
         AGO   .AM64R                                              @DDA 03070000
.AM64Q   ANOP  ,                                                   @DDA 03080000
PPSDSAHANDLER        DS    AD       Addr of catcher function       @DDA 03090000
PPSDSIR              DS    AD       Addr Signal interrupt routine  @DDA 03100000
PPSDUSERDATA         DS    AD       User data speicified on BPX1MSS@DDA 03110000
PPSDPSW              DS    XL16     Users PSW at interrupt         @DDA 03120000
PPSDQUIESCEDATA      DS    FD       Quiesce_Data specified on BPX1QUT   03130000
*                                                                  @DDA 03140000
PPSDSIGACTIONDATA    DS    FD       User_Data specified on BPX1SIA @DDA 03150000
PPSDPTXLWAPTR        DS    AD       Threads workarea address specified  03160000
*                                   on BPX1PTC (pthread_create).  This  03170000
*                                   address is zero if the thread was   03180000
*                                   not pt_created.                     03190000
PPSDSIADDR           DS    AD       Address of faulting instruction     03200000
*                                   for SIGILL, SIGFPE, SIGSEGV    @DDA 03210000
PPSDSIBAND           DS    FD       Band event                     @DDA 03220000
PPSDSQV              DS    FD       Signal si_value                @P7A 03230000
.AM64R   ANOP  ,                                                   @DDA 03240000
                     DS    4F       Reserved                   @T1C@DDC 03250000
                     DS    FL2      Reserved                       @T1A 03260000
PPSDAIOCB64          DS    FL2      Amode(64) Exit Flags           @T1A 03270000
PPSDEXCOUNT          DS    FL2      Count of PpsdAiocb's           @DDM 03280000
PPSDEXLASTIX         DS    FL2      Last array index used          @DDM 03290000
PPSDAIOCB            DS    12D      Aiocb Array for Async Exit @T1C@DDM 03300000
PPSDEND              DS    0D       End of PPSD on double word          03310000
                     SPACE ,                                            03320000
PPSD#LENGTH          EQU   *-PPSD   Length of this structure            03330000
** BPXYPPSD End                                                         03340000
         SPACE 3                                                        03350000
.L0002   ANOP                                                           03360000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 03370000
         AIF   ('&LIST' EQ 'YES').P4                                    03380000
.P3      ANOP                                                           03390000
         POP   PRINT                                                    03400000
         AGO   .P_EXIT                                                  03410000
.P4      ANOP                                                           03420000
.P_EXIT  ANOP                                                           03430000
         MEND  ,                  Terminating PL/X comment           */ 03440000
*                                                                       03450000
* BPXYPPSD_2:;                                                          03460000
* %BPXYPPSD_INCLUDED = 'YES';                                           03470000
* %DCL ZCBPRINT CHAR EXT;                                               03480000
* %DEACTIVATE ZCBPRINT;                                                 03490000
* %DCL BPXYPPSD_LIST CHAR EXT;                                          03500000
* %DEACTIVATE BPXYPPSD_LIST;                                            03510000
* %IF BPXYPPSD_LIST ^= 'NO' &                                           03520000
*    ZCBPRINT ^= 'NO' %THEN                                             03530000
*   %GOTO BPXYPPSD_3;                                                   03540000
*   @LIST PUSH NOECHO;                                                  03550000
*   @LIST NOASSEMBLE NOECHO;                                            03560000
*   @LIST OFF C NOECHO;                                                 03570000
* %BPXYPPSD_3:;                                                         03580000
*/* Start of PL/AS Source                                            */ 03590000
*                                                               @EJECT; 03600000
*                                                                       03610000
*%IF PPSDBASE='' %THEN                                                  03620000
*  %DO;                                                                 03630000
*    %PPSDBASE='BASED(PpstPpsd) VIA(PpsdAlet)';                         03640000
*  %END;                                                                03650000
*%IF AsaxmacP64 = ''                                          /* @DDA*/ 03660000
*   %Then %AsaxmacP64 = 'Char(8)';                            /* @DDA*/ 03670000
*%IF AsaxmacF64 = ''                                          /* @DDA*/ 03680000
*   %Then %AsaxmacF64 = 'Char(8)';                            /* @DDA*/ 03690000
*%IF AsaxmacF63 = ''                                          /* @DDA*/ 03700000
*   %Then %AsaxmacF63 = 'Char(8)';                            /* @DDA*/ 03710000
*                                                                       03720000
*                                                               @SPACE; 03730000
*DCL                                                                    03740000
* 1 PPSD             PPSDBASE  Bdy(DWord),                    /* @DDC*/ 03750000
*  3 PpsdID            Char(04), /* EBCDIC ID - PPSD                 */ 03760000
*  3 PpsdSP           Fixed(08), /* Subpool number of this PPSD      */ 03770000
*  3 PpsdLEN          Fixed(24), /* Length of this PPSD              */ 03780000
*  /******************************************************************/ 03790000
*  /* PpsdSIRParms is used to setup up a parameter list to the       */ 03800000
*  /* Signal Interface Routine (SIR).  When the SIR is invoked, the  */ 03810000
*  /* address of PpsdSIRParms field is set in Register 1.  The       */ 03820000
*  /* PpsdAddrPpsd contains the address of the Ppsd.                 */ 03830000
*  /******************************************************************/ 03840000
*  3 PpsdSIRParms,               /* SIR Parameters                   */ 03850000
*    5 PpsdAddrPpsd   Ptr(31),   /* Pointer to the top of the Ppsd   */ 03860000
*      7 PpsdSIRParmEnd  Bit(1), /* End of Parameters flag set on    */ 03870000
*  3 PpsdTRMExitStatus Fixed(32),/* 4 byte exit status passed to PRTRM  03880000
*                                                                @P6C*/ 03890000
*  3 PpsdSigDelivery,                                                   03900000
*    5 PpsdSigNum     Fixed(32), /* Signal number                    */ 03910000
*    5 PpsdFlags2     Bit(16),   /* Flags                        @D5C*/ 03920000
*      7 PpsdQuiesceFreeze Bit(01), /* Interrupt due to freeze   @D5A*/ 03930000
*      7 PpsdSirComplete   Bit(01), /* Sir is done processing Async I/O 03940000
*                                   exits                        @D9A*/ 03950000
*      7 PpsdProcDft       Bit(01), /* Process default           @P7A*/ 03960000
*      7 PpsdSigQueue      Bit(01), /* NSSGQ queued signal       @P7A*/ 03970000
*      7 PpsdReDrive       Bit(01), /* Input to BPX1SPB to resend the   03980000
*                                      signal                    @DBA*/ 03990000
*      7 PpsdJumpBack      Bit(01), /* Input to BPX1SPB to have control 04000000
*                                      returned to point of signal      04010000
*                                      interrupt                 @DBA*/ 04020000
*      7 PpsdMaskOnly      Bit(01), /* Input to BPX1SPB to only restore 04030000
*                                      signal mask, sig not requeued    04040000
*                                                                @DBA*/ 04050000
*      7 PpsdSigThStop     Bit(01), /* Interrupt due to thread-stop     04060000
*                                      signal                    @DEA*/ 04070000
*      7 PpsdQuiesceAndGet Bit(01), /* Interrupt due to                 04080000
*                                   pthread_quiesce_and_get_np   @DEA*/ 04090000
*      7 PpsdF2_64         Bit(01), /* Use PSWxxx64 fields       @LJN*/ 04100000
*    5 PpsdAction     Fixed(08), /* Action for this signal              04110000
*                                  4 -> Catch, 5 -> SIR determines   */ 04120000
*    5 PpsdFlags        Bit(08),                                        04130000
*      7 PpsdAsync      Bit(01), /* Signal delivered Asynchronously  */ 04140000
*      7 PpsdDump       Bit(01), /* Dump for terminating signals     */ 04150000
*      7 PpsdPthreadKill Bit(01), /* Signal sent via BPX1PTK     @D2A*/ 04160000
*      7 PpsdThisThreadGen Bit(01), /* Sending=Receiving thread  @D2A*/ 04170000
*      7 PpsdSignal     Bit(01), /* Interrupt due to signal      @D4A*/ 04180000
*      7 PpsdCancel     Bit(01), /* Interrupt due to cancel      @D4A*/ 04190000
*      7 PpsdQuiesce    Bit(01), /* Interrupt due to QuiesceTerm @D4A*/ 04200000
*      7 PpsdIPT        Bit(01), /* If ON then this is the IPT   @D4A*/ 04210000
*    5 PpsdSaHandler    Ptr(31), /* Addr of catcher function         */ 04220000
*    5 PpsdSaMask       Bit(64), /* Signal mask set by BPX1SIA for      04230000
*                                   this signal                      */ 04240000
*    5 PpsdSaFlags      Bit(32),                                        04250000
*      7 PpsdNoCldStop  Bit(01), /* Do not generate SIGCHLD on stops */ 04260000
*      7 PpsdOldStyle   Bit(01), /* Signal defined by signal() funct.*/ 04270000
*      7 PpsdOnStack    Bit(01), /* Deliver on alternate stack   @D6A*/ 04280000
*      7 PpsdResetHand  Bit(01), /* Reset action on delivery     @D6A*/ 04290000
*      7 PpsdRestart    Bit(01), /* Restart interruptable funcs  @D6A*/ 04300000
*      7 PpsdSiginf     Bit(01), /* Pass sig info to catcher     @D6A*/ 04310000
*      7 PpsdNoCldWait  Bit(01), /* Don't create zombie on exit  @D6A*/ 04320000
*      7 PpsdNoDefer    Bit(01), /* Don't block sig on delivery  @D6A*/ 04330000
*      7 *              Bit(24), /* Reserved                     @D6C*/ 04340000
*    5 PpsdCurrentMask  Bit(64), /* This is the signal mask to be set   04350000
*                                   when the signal catcher returns.    04360000
*                                   Signal mask at time of interrupt    04370000
*                                   except for sigsuspend case. If      04380000
*                                   signal during sigsuspend, then      04390000
*                                   this mask is the signal mask prior  04400000
*                                   to call to sigsuspend.       @D7C*/ 04410000
*    5 PpsdSIR          Ptr(31), /* Addr Signal  interrupt routine   */ 04420000
*    5 PpsdUserData     Ptr(31), /* User data specified on BPX1MSS   */ 04430000
*    5 PpsdGenRegs     Char(64), /* Users general regs at interrupt  */ 04440000
*    5 PpsdPSW                 , /* Users PSW at interrupt           */ 04450000
*      7 PpsdPswCntl    Bit(32), /* Users PSW control info       @DAA*/ 04460000
*      7 PpsdPswIar     Ptr(31), /* Users PSW Instr address      @DAA*/ 04470000
*    5 PpsdARRegs      Char(64), /* Users AR regs at interrupt       */ 04480000
*    5 PpsdKilData    Fixed(16), /* User specified data on BPX1KIL   */ 04490000
*    5 PpsdKilOpts      Bit(16), /* User specified options on BPX1KIL*/ 04500000
*      7 PpsdPtBypass   Bit(01), /* Ptrace Bypass option in effect   */ 04510000
*      7 PpsdKernSiCode Bit(01), /* PpsdKilData=Kern set SiCode  @D6A*/ 04520000
*      7 PpsdApplSiCode Bit(01), /* PpsdKilData=Appl set SiCode  @D6A*/ 04530000
*      7 PpsdConsCancel Bit(01), /* Console MODIFY cancel qualifier     04540000
*                                   in PpsdKilData               @D8A*/ 04550000
*      7 PpsdSuperKill  Bit(01), /* SuperKill option on BPX1KIL  @DHA*/ 04560000
*      7 PpsdTraceOverride Bit(01), /* Syscall Trace Override Option    04561002
*                                     on BPX1KIL                 @DJA*/ 04561102
*      7 PpsdTraceAction   Bit(01), /* Syscall Trace Action Setting     04562002
*                                     on BPX1KIL                 @DJA*/ 04563002
*      7 *              Bit(09), /* Reserved                     @DJC*/ 04570003
*    5 PpsdQuiesceData Fixed(32),/* Quiesce_Data specified on BPX1QUT   04580000
*                                   call                         @D4A*/ 04590000
*    5 PpsdLastPtSig  Fixed(32), /* Last Ptraced Signal          @D4A*/ 04600000
*    5 PpsdSigactionData Fixed(32),/* User_Data specified on BPX1SIA    04610000
*                                     call                       @D5A*/ 04620000
*    5 PpsdPtxlWAptr    Ptr(31), /* Address of the workarea that this   04630000
*                                  thread was created with, also        04640000
*                                  pointed to by the Ptxl.  This ptr    04650000
*                                  is zero if thread not pt_created  */ 04660000
*    5 PpsdSendingThread Char(8), /* Sending thread id           @P3A*/ 04670000
*    5 PpsdTargetThread Char(8), /* Target thread id             @P3A*/ 04680000
*    5 PpsdSendingPid Fixed(32), /* Sending process id           @P4A*/ 04690000
*    5 PpsdSendingUid Fixed(32), /* Sending real uid             @P4A*/ 04700000
*    5 PpsdSiAddr       Ptr(31), /* Address of faulting instruction for 04710000
*                                   SIGILL, SIGFPE, SIGSEGV      @P5A*/ 04720000
*    5 PpsdSiStatus   Fixed(32), /* Exit status or signal        @P5A*/ 04730000
*    5 PpsdSiBand     Fixed(32), /* Band event                   @P5A*/ 04740000
*    5 PpsdErrno      Fixed(32), /* Error return code            @P5A*/ 04750000
*    5 PpsdCatcherMask  Bit(64), /* Catcher mask not including SaMask.  04760000
*                                   Prior to invoking a signal catcher  04770000
*                                  the signal mask must be set to the   04780000
*                                  value (PpsdCatcherMask ORed with     04790000
*                                  PpsdSaMask).  If signal during       04800000
*                                  sigsuspend then PpsdCatcherMask is   04810000
*                                  equal to mask specified on           04820000
*                                  sigsuspend. If  not sigsuspend, then 04830000
*                                  PpsdCatcherMask and PpsdCurrentMask  04840000
*                                  are equal.                    @D7A*/ 04850000
*    5 *              Char(100), /* Reserved                     @DDA*/ 04860000
*    5 PpsdSigQValue   Char(4),  /* Valued passed on sigqueue()  @P7C*/ 04870000
*    5 PpsdReDriveTime Bit(32),  /* Time delay for redrive 1000 units   04880000
*                                   per mic                      @DBA*/ 04890000
*    5 PpsdG64H        Char(64), /* Users high halves of GPRs    @DCA*/ 04900000
*    5 PpsdRrtrmMsgThid    Char(8), /* Sending thread id for MSG        04910000
*                                   BPXP010I                     @P8A*/ 04920000
*    5 PpsdSendingJobName Char(8), /* Jobname of thread sending signal  04930000
*                                                                @DGA*/ 04940000
*    5 PpsdRegUpdateTOD  Char(8),  /* Time Stamp when last register     04950000
*                                     was stored                 @DIA*/ 04960000
*    5 *               Char(8),    /* Reserved                   @DIC*/ 04970000
*    5 PpsdSaHandler64 AsaxmacP64, /* Addr of catcher function   @DDA*/ 04980000
*    5 PpsdSIR64       AsaxmacP64, /* Addr Signal interrupt routine     04990000
*                                     in 64 bit mode             @DDA*/ 05000000
*    5 PpsdUserData64  AsaxmacP64, /* User data specified on BPX1MSS    05010000
*                                     in 64 bit mode             @DDA*/ 05020000
*    5 PpsdPSW64,                  /* Users PSW at interrupt            05030000
*                                     in 64 bit mode             @DDA*/ 05040000
*      7 PpsdPswCntl64 AsaxmacF64, /* Users PSW control info            05050000
*                                     in 64 bit mode             @DDA*/ 05060000
*      7 PpsdPswIar64  AsaxmacP64, /* Users PSW Instr address           05070000
*                                     in 64 bit mode             @DDA*/ 05080000
*    5 PpsdQuiesceData64  AsaxmacF64, /* Quiesce_Data specified         05090000
*                                     on BPX1QUT call in 64 bit mode    05100000
*                                                                @DDA*/ 05110000
*    5 PpsdSigactionData64 AsaxmacF64, /* User_Data specified on        05120000
*                                     BPX1SIA call in 64 bit mode       05130000
*                                                                @DDA*/ 05140000
*    5 PpsdPtxlWAPtr64 AsaxmacP64, /* Work area passed on PTC    @DDA*/ 05150000
*    5 PpsdSiAddr64    AsaxmacP64, /* Address of faulting instruction   05160000
*                                     for SIGILL, SIGFPE, SIGSEGV       05170000
*                                     in 64 bit mode             @DDA*/ 05180000
*    5 PpsdSiBand64    AsaxmacF64, /* Band event in 64 bit mode  @DDA*/ 05190000
*    5 PpsdSigQValue64 AsaxmacF64, /* Valued passed on sigqueue()       05200000
*                                     in 64 bit mode             @DDA*/ 05210000
*    5 *               Char(18), /* Reserved                 @T1C@DDC*/ 05220000
*    /****************************************************************/ 05230000
*    /* The PpsdExitInfo is Used by an OE defined SIR in POSIX(OFF)  */ 05240000
*    /* environments.  It contains information that the OESIR will   */ 05250000
*    /* use to give control to the ASYNC I/O user defined exits.     */ 05260000
*    /* For more information about these exits see BPX1AIO in the    */ 05270000
*    /* assember syscalls book.                                  @D9A*/ 05280000
*    /****************************************************************/ 05290000
*    5 PpsdExitInfo ,            /* Exit Information             @D9A*/ 05300000
*      7 PpsdAiocb64  Bit(16),   /*  Amode(64) Flags             @T1M*/ 05310000
*      7 PpsdExCount  Fixed(15), /*  Count of PpsdAiocb's        @D9A*/ 05320000
*      7 PpsdExLastIx Fixed(15), /*  Last array index used       @D9A*/ 05330000
*      7 PpsdAiocb(Ppsd#AioCnt) Char(8),  /*  Aiocb Array    @PAC@D9A*/ 05340000
   /*                                                                */ 05350000
   /* NOTE: The size of this control block is retrieved dynamically  */ 05360000
   /*       during runtime by the modules that need it.              */ 05370000
   /*       When adding additional fields to this control block,     */ 05380000
   /*                                                                */ 05390000
   /* ====> THE ONLY MODULE THAT *MUST* BE RECOMPILED IS BPXPRIT @DFA*/ 05400000
   /*                                                                */ 05410000
*  3 PpsdEnd Bdy(Word) Char(0);  /* End of PPSD                      */ 05420000
*                                                               @SPACE; 05430000
*DCL                                                                    05440000
*  Ppsd#AioCnt Fixed(16) Constant(12),   /* Aiocb Array size @PAC@D9A*/ 05450000
*  Ppsd#ID     Char(4)   Constant('PPSD'), /* Control Block Acronym  */ 05460000
*  Ppsd#Len    Fixed(16) Constant(LENGTH(PPSD)), /* Length of PPSD   */ 05470000
*  Ppsd#SP     Fixed(31) Constant(230); /* Subpool for the PPSD      */ 05480000
*                                                                       05490000
*/* End of PL/AS Source                                              */ 05500000
* %IF BPXYPPSD_LIST ^= 'NO' &                                           05510000
*    ZCBPRINT ^= 'NO' %THEN                                             05520000
*   %GOTO BPXYPPSD_4;                                                   05530000
*   @LIST POP NOECHO;                                                   05540000
* %BPXYPPSD_4:;                                                         05550000
* %END;                                                                 05560000
